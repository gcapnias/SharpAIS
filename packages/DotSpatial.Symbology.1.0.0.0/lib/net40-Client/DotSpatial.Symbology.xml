<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DotSpatial.Symbology</name>
    </assembly>
    <members>
        <member name="T:DotSpatial.Symbology.PolygonSymbolizer">
            <summary>
            PolygonSymbolizer
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.FeatureSymbolizer">
            <summary>
            FeatureSymbolizer
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.LegendItem">
            <summary>
            LegendItem
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.Descriptor">
            <summary>
            Descriptors are simple classes that are used for storing symbology or other basic characteristics.
            They are presumed to be made up of value types and other descriptors, and are expected to be serializable.
            This being said, some basic capabilities are supported for randomizing, copying and comparing the
            properties of descriptors.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.CopyBase">
            <summary>
            CopyBase
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.CopyBase.#ctor">
            <summary>
            Creates a new instance of CopyBase
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.CopyBase.System#ICloneable#Clone">
            <summary>
            Creates a duplicate of this descriptor using MemberwiseClone
            </summary>
            <returns>A clone of this object as a duplicate</returns>
        </member>
        <member name="M:DotSpatial.Symbology.CopyBase.DistinctNames(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
            <summary>
            PropertyInfo returns overridden members as separate entries.  We would rather work with each members
            only one time.
            </summary>
            <param name="allProperties">All the properties, including duplicates created by overridden members</param>
            <returns>An Array of PropertyInfo members</returns>
        </member>
        <member name="M:DotSpatial.Symbology.CopyBase.OnCopy(DotSpatial.Symbology.Descriptor)">
            <summary>
            This occurs during the Copy method and is overridable by sub-classes
            </summary>
            <param name="copy">The duplicate descriptor</param>
        </member>
        <member name="T:DotSpatial.Symbology.IDescriptor">
            <summary>
            IDescriptor
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.IMatchable">
            <summary>
            Matching is defined as being a different object, but having properties
            that would make it indistinguishable from the comparision property.
            This is an alternative to overriding the equals behavior in cases
            where you might ALSO need to see if the object reference is the same.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.IMatchable.Matches(DotSpatial.Symbology.IMatchable,System.Collections.Generic.List{System.String}@)">
            <summary>
            Tests this object against the comparison object.  If any of the
            value type members are different, or if any of the properties
            are IMatchable and do not match, then this returns false.
            </summary>
            <param name="other">The other IMatcheable object of the same type</param>
            <param name="mismatchedProperties">The list of property names that do not match</param>
            <returns>Boolean, true if the properties are comparably equal.</returns>
        </member>
        <member name="T:DotSpatial.Symbology.IRandomizable">
            <summary>
            IRandomizable
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.IRandomizable.Randomize(System.Random)">
            <summary>
            This method will set the values for this class with random values that are
            within acceptable parameters for this class.
            </summary>
            <param name="generator">An existing random number generator so that the random seed can be controlled</param>
        </member>
        <member name="M:DotSpatial.Symbology.IDescriptor.CopyProperties(System.Object)">
            <summary>
            This copies the public descriptor properties from the specified object to
            this object.
            </summary>
            <param name="other">An object that has properties that match the public properties on this object.</param>
        </member>
        <member name="M:DotSpatial.Symbology.Descriptor.#ctor">
            <summary>
            Creates a new instance of MatchableObject
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.Descriptor.CopyProperties(System.Object)">
            <summary>
            For each of the publicly accessible properties found on this object, this attempts
            to copy a public property from the source object of the same name, if it can find it.
            For each matching property name/type, it will attempt to copy the value.
            </summary>
            <param name="source">The</param>
        </member>
        <member name="M:DotSpatial.Symbology.Descriptor.Matches(DotSpatial.Symbology.IMatchable,System.Collections.Generic.List{System.String}@)">
            <summary>
            Compares the properties of this object with the specified IMatchable other.
            This does not test every property of other, but does test every property
            of this item.  As long as the other item has corresponding properties
            for every property on this item, the items are said to match.
            The IMatchable interface allows custom definitions of matching.
            For collections to match, all of their sub-members must match.
            </summary>
            <param name="other"></param>
            <param name="mismatchedProperties"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.Descriptor.Randomize(System.Random)">
            <summary>
            The default behavior is to cycle through all the properties of this
            object, and call Randomize on any that implement the IRandomizable interface.
            </summary>
            <param name="generator">The Random seed generator for controling how the random content is created</param>
        </member>
        <member name="M:DotSpatial.Symbology.Descriptor.OnCopyProperties(System.Object)">
            <summary>
            This occurs while copying properties from the specified source, and
            is the default handling for subclasses
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:DotSpatial.Symbology.Descriptor.OnMatch(DotSpatial.Symbology.IMatchable,System.Collections.Generic.List{System.String})">
            <summary>
            This gives sub-classes the chance to directly override, control or otherwise tamper
            with the matching process.  This is also where normal matching is performed,
            so to replace it, simply don't call the base.OnMatch method.  To tweak the results,
            the base method should be performed first, and the results can then be modified.
            </summary>
            <param name="other"></param>
            <param name="mismatchedProperties"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.Descriptor.OnRandomize(System.Random)">
            <summary>
            This allows overrideable behavior that can replace or extend the basic behavior,
            which is to call Randomize on any public properties that are listed as randomizeable.
            This does nothing to normal properties or non public members and needs to be overriden
            to provide the special case functionality for sub-classes.
            </summary>
            <param name="generator">The random number generator to be used during randomization</param>
        </member>
        <member name="T:DotSpatial.Symbology.ILegendItem">
            <summary>
            The LegendItem interface controls specifically the
            properties associated with the legend.  It is assumed that
            All layers will support one legend item, but this way
            ostensibly we can eventually add things to the legend that
            are not technically layers.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.IParentItem`1">
            <summary>
            Any item which can be contained by a parent item
            </summary>
            <typeparam name="T">The type class of the potential parent</typeparam>
        </member>
        <member name="M:DotSpatial.Symbology.IParentItem`1.GetParentItem">
            <summary>
            Gets the parent item relative to this item.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.IParentItem`1.SetParentItem(`0)">
            <summary>
            Sets teh parent legend item for this item
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:DotSpatial.Symbology.ILegendItem.CanReceiveItem(DotSpatial.Symbology.ILegendItem)">
            <summary>
            Tests the specified legend item to determine whether or not
            it can be dropped into the current item.
            </summary>
            <param name="item">Any object that implements ILegendItem</param>
            <returns>Boolean that is true if a drag-drop of the specified item will be allowed.</returns>
        </member>
        <member name="M:DotSpatial.Symbology.ILegendItem.LegendSymbol_Painted(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Instructs this legend item to perform custom drawing for any symbols.
            </summary>
            <param name="g">A Graphics surface to draw on</param>
            <param name="box">The rectangular coordinates that confine the symbol.</param>
        </member>
        <member name="M:DotSpatial.Symbology.ILegendItem.PrintLegendItem(System.Drawing.Graphics,System.Drawing.Font,System.Drawing.Color,System.Drawing.SizeF)">
            <summary>
            Prints the formal legend content without any resize boxes or other notations.
            </summary>
            <param name="g">The graphics object to print to</param>
            <param name="font">The system.Drawing.Font to use for the lettering</param>
            <param name="fontColor">The color of the font</param>
            <param name="maxExtent">Assuming 0, 0 is the top left, this is the maximum extent</param>
        </member>
        <member name="M:DotSpatial.Symbology.ILegendItem.GetLegendSymbolSize">
            <summary>
            Gets the size of the symbol to be drawn to the legend
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILegendItem.ContextMenuItems">
            <summary>
            This is a list of menu items that should appear for this layer.
            These are in addition to any that are supported by default.
            Handlers should be added to this list before it is retrieved.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILegendItem.Checked">
            <summary>
            Gets or sets whether or not this legend item should be visible.
            This will not be altered unless the LegendSymbolMode is set
            to CheckBox.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILegendItem.IsExpanded">
            <summary>
            Gets or sets whether this legend item is expanded.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILegendItem.IsSelected">
            <summary>
            Gets or sets whether this legend item is currently selected (and therefore drawn differently)
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILegendItem.LegendItems">
            <summary>
            Gets whatever the child collection is and returns it as an IEnumerable set of legend items
            in order to make it easier to cycle through those values.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILegendItem.LegendItemVisible">
            <summary>
            Gets or sets a boolean, that if false will prevent this item, or any of its child items
            from appearing in the legend when the legend is drawn.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILegendItem.LegendSymbolMode">
            <summary>
            Gets the symbol mode for this legend item.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILegendItem.LegendText">
            <summary>
            The text that will appear in the legend
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILegendItem.LegendType">
            <summary>
            Gets or sets a pre-defined behavior in the legend when referring to drag and drop functionality.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LegendItem.#ctor">
            <summary>
            Creates a new instance of the legend item
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LegendItem.Configure">
            <summary>
            Configures the default settings of the legend item
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LegendItem.CanReceiveItem(DotSpatial.Symbology.ILegendItem)">
            <summary>
            Returns a boolean indicating whether or not this item can have other items dropped on it.
            By default this is false.  This can be overridden for more customized behaviors.
            </summary>
            <param name="item">The item to test for dropping.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.LegendItem.LegendSymbol_Painted(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws the symbol for this specific category to the legend
            </summary>
            <param name="g"></param>
            <param name="box"></param>
        </member>
        <member name="M:DotSpatial.Symbology.LegendItem.PrintLegendItem(System.Drawing.Graphics,System.Drawing.Font,System.Drawing.Color,System.Drawing.SizeF)">
            <summary>
            Prints the formal legend content without any resize boxes or other notations.
            </summary>
            <param name="g">The graphics object to print to</param>
            <param name="font">The system.Drawing.Font to use for the lettering</param>
            <param name="fontColor">The color of the font</param>
            <param name="maxExtent">Assuming 0, 0 is the top left, this is the maximum extent</param>
        </member>
        <member name="M:DotSpatial.Symbology.LegendItem.GetNearestValue(System.Double,System.Collections.Generic.List{System.Double})">
            <summary>
            Gets the nearest value.
            </summary>
            <param name="value">The value.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.LegendItem.ByteRange(System.Double)">
            <summary>
            Bytes the range.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.LegendItem.OnCopy(DotSpatial.Symbology.Descriptor)">
            <summary>
            Handles updating event handlers during a copy process
            </summary>
            <param name="copy"></param>
        </member>
        <member name="M:DotSpatial.Symbology.LegendItem.ResumeChangeEvent">
            <summary>
            Allows the ItemChanged event to fire in response to individual changes again.
            This will also fire the event once if there were any changes that warent it
            that were made while the event was suspended.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LegendItem.SuspendChangeEvent">
            <summary>
            Each suspend call increments an integer, essentially keeping track of the depth of
            suspension.  When the same number of ResumeChangeEvents methods have been called
            as SuspendChangeEvents have been called, the suspension is aborted and the
            legend item is allowed to broadcast its changes.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LegendItem.GetLegendSymbolSize">
            <summary>
            Gets or sets the size of the symbol to be drawn to the legend
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LegendItem.GetParentItem">
            <summary>
            Gets the Parent Legend item for this category.  This should probably be the appropriate layer item.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LegendItem.SetParentItem(DotSpatial.Symbology.ILegendItem)">
            <summary>
            Sets the parent legend item for this category.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:DotSpatial.Symbology.LegendItem.OnSetParentItem(DotSpatial.Symbology.ILegendItem)">
            <summary>
            Allows for the set behavior for the parent item to be overridden in child classes
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:DotSpatial.Symbology.LegendItem.OnItemChanged">
            <summary>
            Fires the ItemChanged event
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LegendItem.OnItemChanged(System.Object)">
            <summary>
            Fires the ItemChanged event, optionally specifying a different
            sender
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LegendItem.OnRemoveItem">
            <summary>
            Instructs the parent legend item to remove this item from the list of legend items.
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.LegendItem.ItemChanged">
            <summary>
            Occurs whenever the symbol content has been updated
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.LegendItem.RemoveItem">
            <summary>
            Occurs whenever the item should be removed from the parent collection
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LegendItem.ChangesSuspended">
            <summary>
            Boolean, true if changes are suspended
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LegendItem.IsDragable">
            <summary>
            Gets or sets a boolean that indicates whether or not this legend item can be dragged to a new position in the legend.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LegendItem.LegendItemVisible">
            <summary>
            Gets or sets a boolean, that if false will prevent this item, or any of its child items
            from appearing in the legend when the legend is drawn.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LegendItem.Checked">
            <summary>
            Because these are in symbol mode, this is not used.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LegendItem.ContextMenuItems">
            <summary>
            Gets the MenuItems that should appear in the context menu of the legend for this category
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LegendItem.IsExpanded">
            <summary>
            Gets or sets a boolean that indicates whether or not the legend should draw the child LegendItems for this category.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LegendItem.IsSelected">
            <summary>
            Gets or sets whether this legend item has been selected in the legend
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LegendItem.LegendItems">
            <summary>
            Gets whatever the child collection is and returns it as an IEnumerable set of legend items
            in order to make it easier to cycle through those values.  This defaults to null and must
            be overridden in specific cases where child legend items exist.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LegendItem.LegendSymbolMode">
            <summary>
            Gets or sets the symbol mode for the legend.  By default this should be "Symbol", but this can be overridden
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LegendItem.LegendText">
            <summary>
            Gets or sets the text for this category to appear in the legend.  This might be a category name,
            or a range of values.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LegendItem.LegendType">
            <summary>
            Gets or sets a pre-defined behavior in the legend when referring to drag and drop functionality.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LegendItem.IsLegendGroup">
            <summary>
            If this is true, then "can receive
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.IFeatureSymbolizer">
            <summary>
            IFeatureSymbolizer
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.IFeatureSymbolizer.Draw(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws a simple rectangle in the specified location.
            </summary>
            <param name="g"></param>
            <param name="target"></param>
        </member>
        <member name="M:DotSpatial.Symbology.IFeatureSymbolizer.SetOutline(System.Drawing.Color,System.Double)">
            <summary>
            Sets the outline, assuming that the symbolizer either supports outlines, or
            else by using a second symbol layer.
            </summary>
            <param name="outlineColor">The color of the outline</param>
            <param name="width">The width of the outline in pixels</param>
        </member>
        <member name="P:DotSpatial.Symbology.IFeatureSymbolizer.IsVisible">
            <summary>
            Gets or sets a boolean indicating whether or not this specific feature should be drawn.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IFeatureSymbolizer.ScaleMode">
            <summary>
            Gets or Sets a ScaleModes enumeration that determines whether non-coordinate drawing
            properties like width or size use pixels or world coordinates.  If pixels are
            specified, a back transform is used to approximate pixel sizes.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IFeatureSymbolizer.Smoothing">
            <summary>
            Gets or sets the smoothing mode to use that controls advanced features like
            anti-aliasing.  By default this is set to antialias.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IFeatureSymbolizer.Units">
            <summary>
            Gets or sets the graphics unit to work with.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureSymbolizer.#ctor">
            <summary>
            Creates a new instance of FeatureSymbolizer
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureSymbolizer.SetOutline(System.Drawing.Color,System.Double)">
            <summary>
            Sets the outline, assuming that the symbolizer either supports outlines, or
            else by using a second symbol layer.
            </summary>
            <param name="outlineColor">The color of the outline</param>
            <param name="width">The width of the outline in pixels</param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureSymbolizer.Draw(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws a simple rectangle in the specified location.
            </summary>
            <param name="g"></param>
            <param name="target"></param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureSymbolizer.OnCopyProperties(System.Object)">
            <summary>
            Occurs during the copy properties method, when copying properties from the source symbolizer
            to this symbolizer.
            </summary>
            <param name="source">The source symbolizer to copy properties from.</param>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureSymbolizer.IsVisible">
            <summary>
            Gets or sets a boolean indicating whether or not this specific feature should be drawn.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureSymbolizer.ScaleMode">
            <summary>
            Gets or Sets a ScaleModes enumeration that determines whether non-coordinate drawing
            properties like width or size use pixels or world coordinates.  If pixels are
            specified, a back transform is used to approximate pixel sizes.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureSymbolizer.Smoothing">
            <summary>
            Gets or sets the smoothing mode to use that controls advanced features like
            anti-aliasing.  By default this is set to antialias.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureSymbolizer.Units">
            <summary>
            Gets or sets the graphics unit to work with.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.IPolygonSymbolizer">
            <summary>
            IPolygonSymbolizer
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.IPolygonSymbolizer.GetFillColor">
            <summary>
            Gets the color of the top-most pattern, if it is a simple pattern,
            or return Color.Empty otherwise
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.IPolygonSymbolizer.SetFillColor(System.Drawing.Color)">
            <summary>
            Sets the color, forcing a simple pattern if necessary
            </summary>
            <param name="color">Gets the color of the top-most pattern</param>
        </member>
        <member name="M:DotSpatial.Symbology.IPolygonSymbolizer.GetOutlineWidth">
            <summary>
            This gets the largest width of all the strokes of the outlines of all the patterns.  Setting this will
            forceably adjust the width of all the strokes of the outlines of all the patterns.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.IPolygonSymbolizer.SetOutlineWidth(System.Double)">
            <summary>
            Forces the specified width to be the width of every stroke outlining every pattern.
            </summary>
            <param name="width">The width to force as the outline width</param>
        </member>
        <member name="P:DotSpatial.Symbology.IPolygonSymbolizer.OutlineSymbolizer">
            <summary>
            Gets or sets the method for drawing the lines that make up the borders of this polygon
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IPolygonSymbolizer.Patterns">
            <summary>
            gets or sets the list of patterns to use for filling polygons.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonSymbolizer.#ctor">
            <summary>
            Creates a new instance of PolygonSymbolizer
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonSymbolizer.#ctor(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Creates a new instance of a polygon symbolizer
            </summary>
            <param name="fillColor">The fill color to use for the polygons</param>
            <param name="outlineColor">The border color to use for the polygons</param>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonSymbolizer.#ctor(System.Drawing.Color,System.Drawing.Color,System.Double)">
            <summary>
            Creates a new instance of a solid colored polygon symbolizer
            </summary>
            <param name="fillColor">The fill color to use for the polygons</param>
            <param name="outlineColor">The border color to use for the polygons</param>
            <param name="outlineWidth">The width of the outline to use fo</param>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonSymbolizer.#ctor(System.Drawing.Color,System.Drawing.Color,System.Double,DotSpatial.Symbology.GradientType)">
            <summary>
            Creates a new instance of a Gradient Pattern using the specified colors and angle
            </summary>
            <param name="startColor">The start color</param>
            <param name="endColor">The end color</param>
            <param name="angle">The direction of the gradient, measured in degrees clockwise from the x-axis</param>
            <param name="style">Controls how the gradient is drawn</param>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonSymbolizer.#ctor(System.Drawing.Color,System.Drawing.Color,System.Double,DotSpatial.Symbology.GradientType,System.Drawing.Color,System.Double)">
            <summary>
            Creates a new instance of a Gradient Pattern using the specified colors and angle
            </summary>
            <param name="startColor">The start color</param>
            <param name="endColor">The end color</param>
            <param name="angle">The direction of the gradient, measured in degrees clockwise from the x-axis</param>
            <param name="style">The type of gradient to use</param>
            <param name="outlineColor">The color to use for the border symbolizer</param>
            <param name="outlineWidth">The width of the line to use for the border symbolizer</param>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonSymbolizer.#ctor(System.Drawing.Image,System.Drawing.Drawing2D.WrapMode,System.Double)">
            <summary>
            Creates a new PicturePattern with the specified image
            </summary>
            <param name="picture">The picture to draw</param>
            <param name="wrap">The way to wrap the picture</param>
            <param name="angle">The angle to rotate the image</param>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonSymbolizer.#ctor(System.Drawing.Image,System.Drawing.Drawing2D.WrapMode,System.Double,System.Drawing.Color,System.Double)">
            <summary>
            Creates a new PicturePattern with the specified image
            </summary>
            <param name="picture">The picture to draw</param>
            <param name="wrap">The way to wrap the picture</param>
            <param name="angle">The angle to rotate the image</param>
            <param name="outlineColor">The color to use for the border symbolizer</param>
            <param name="outlineWidth">The width of the line to use for the border symbolizer</param>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonSymbolizer.#ctor(System.Collections.Generic.IEnumerable{DotSpatial.Symbology.IPattern})">
            <summary>
            Creates a new symbolizer, using the patterns specified by the list or array of patterns.
            </summary>
            <param name="patterns">The patterns to add to this symbolizer.</param>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonSymbolizer.#ctor(System.Drawing.Color)">
            <summary>
            Specifies a polygon symbolizer with a specific fill color.
            </summary>
            <param name="fillColor">The color to use as a fill color.</param>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonSymbolizer.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of PolygonSymbolizer
            </summary>
            <param name="selected">Boolean, true if this should use selection symbology</param>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonSymbolizer.SetOutline(System.Drawing.Color,System.Double)">
            <summary>
            Sets the outline, assuming that the symbolizer either supports outlines, or
            else by using a second symbol layer.
            </summary>
            <param name="outlineColor">The color of the outline</param>
            <param name="width">The width of the outline in pixels</param>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonSymbolizer.GetOutlineWidth">
            <summary>
            This gets the largest width of all the strokes of the outlines of all the patterns.  Setting this will
            forceably adjust the width of all the strokes of the outlines of all the patterns.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonSymbolizer.SetOutlineWidth(System.Double)">
            <summary>
            Forces the specified width to be the width of every stroke outlining every pattern.
            </summary>
            <param name="width">The width to force as the outline width</param>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonSymbolizer.GetFillColor">
            <summary>
            Gets the fill color of the top-most pattern.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonSymbolizer.SetFillColor(System.Drawing.Color)">
            <summary>
            Sets the fill color of the top-most pattern.
            If the pattern is not a simple pattern, a simple pattern will be forced.
            </summary>
            <param name="color">The Color structure</param>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonSymbolizer.Draw(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws the polygon symbology
            </summary>
            <param name="g">The graphics device to draw to</param>
            <param name="target">The target rectangle to draw symbology content to</param>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonSymbolizer.OnHandlePatternEvents">
            <summary>
            Occurs after the pattern list is set so that we can listen for when
            the outline symbolizer gets updated.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonSymbolizer.OnIgnorePatternEvents">
            <summary>
            Occurs before the pattern list is set so that we can stop listening
            for messages from the old outline.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.PolygonSymbolizer.OutlineSymbolizer">
            <summary>
            Gets or sets the Symbolizer for the borders of this polygon as they appear on the top-most pattern.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.PolygonSymbolizer.Patterns">
            <summary>
            gets or sets the list of patterns to use for filling polygons.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.GradientPattern">
            <summary>
            GradientPattern
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.Pattern">
            <summary>
            The pattern can act as both the base class for specific types of pattern  as well as a wrapper class that allows
            for an enumerated constructor that makes it easier to figure out what kinds of patterns can be created.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.IPattern">
            <summary>
            IPattern
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.IPattern.CopyOutline(DotSpatial.Symbology.IPattern)">
            <summary>
            Copies the properties defining the outline from the specified source onto this pattern.
            </summary>
            <param name="source">The source pattern to copy outline properties from.</param>
        </member>
        <member name="M:DotSpatial.Symbology.IPattern.FillPath(System.Drawing.Graphics,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Fills the specified graphics path with the pattern specified by this object
            </summary>
            <param name="g">The Graphics device to draw to</param>
            <param name="gp">The GraphicsPath that describes the closed shape to fill</param>
        </member>
        <member name="M:DotSpatial.Symbology.IPattern.DrawPath(System.Drawing.Graphics,System.Drawing.Drawing2D.GraphicsPath,System.Double)">
            <summary>
            Draws the borders for this graphics path by sequentially drawing all
            the strokes in the border symbolizer
            </summary>
            <param name="g">The Graphics device to draw to </param>
            <param name="gp">The GraphicsPath that describes the outline to draw</param>
            <param name="scaleWidth">The scaleWidth to use for scaling the line width </param>
        </member>
        <member name="M:DotSpatial.Symbology.IPattern.GetFillColor">
            <summary>
            Gets a color that can be used to represent this pattern.  In some cases, a color is not
            possible, in which case, this returns Gray.
            </summary>
            <returns>A single System.Color that can be used to represent this pattern.</returns>
        </member>
        <member name="M:DotSpatial.Symbology.IPattern.SetFillColor(System.Drawing.Color)">
            <summary>
            Sets the color that will attempt to be applied to the top pattern.  If the pattern is
            not colorable, this does nothing.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IPattern.Bounds">
            <summary>
            Gets or sets the rectangular bounds.  This controls how the gradient is drawn, and
            should be set to the envelope of the entire layer being drawn
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IPattern.Outline">
            <summary>
            Gets or sets the line symbolizer that is the outline for this pattern.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IPattern.PatternType">
            <summary>
            Gets the pattern type of this pattern.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IPattern.UseOutline">
            <summary>
            Gets or sets a boolean indicating whether or not the pattern should use the outline symbolizer.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.Pattern.#ctor">
            <summary>
            Creates a new instance of Pattern
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.Pattern.#ctor(DotSpatial.Symbology.PatternType)">
            <summary>
            Creates a new pattern with the specified type
            </summary>
            <param name="type">The subclass of pattern to use as the internal pattern</param>
        </member>
        <member name="M:DotSpatial.Symbology.Pattern.GetFillColor">
            <summary>
            Gets a color that can be used to represent this pattern.  In some cases, a color is not
            possible, in which case, this returns Gray.
            </summary>
            <returns>A single System.Color that can be used to represent this pattern.</returns>
        </member>
        <member name="M:DotSpatial.Symbology.Pattern.SetFillColor(System.Drawing.Color)">
            <summary>
            Sets the color that will attempt to be applied to the top pattern.  If the pattern is
            not colorable, this does nothing.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.Pattern.CopyOutline(DotSpatial.Symbology.IPattern)">
            <summary>
            Copies the properties defining the outline from the specified source onto this pattern.
            </summary>
            <param name="source">The source pattern to copy outline properties from.</param>
        </member>
        <member name="M:DotSpatial.Symbology.Pattern.FillPath(System.Drawing.Graphics,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Fills the specified graphics path with the pattern specified by this object
            </summary>
            <param name="g">The Graphics device to draw to</param>
            <param name="gp">The GraphicsPath that describes the closed shape to fill</param>
        </member>
        <member name="M:DotSpatial.Symbology.Pattern.DrawPath(System.Drawing.Graphics,System.Drawing.Drawing2D.GraphicsPath,System.Double)">
            <summary>
            Draws the borders for this graphics path by sequentially drawing all
            the strokes in the border symbolizer
            </summary>
            <param name="g">The Graphics device to draw to </param>
            <param name="gp">The GraphicsPath that describes the outline to draw</param>
            <param name="scaleWidth">The scaleWidth to use for scaling the line width </param>
        </member>
        <member name="M:DotSpatial.Symbology.Pattern.OnItemChanged">
            <summary>
            Occurs when the item is changed
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.Pattern.OnRemoveItem">
            <summary>
            This is not currently used, but technically should cause the list of patterns to remove this pattern.
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.Pattern.ItemChanged">
            <summary>
            Fires the item changed event
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.Pattern.RemoveItem">
            <summary>
            Not Used
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.Pattern.Bounds">
            <summary>
            Gets or sets the rectangular bounds.  This controls how the gradient is drawn, and
            should be set to the envelope of the entire layer being drawn
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.Pattern.Outline">
            <summary>
            Gets or sets the ILineSymbolizer that describes the outline symbology for this pattern.
            </summary>
            <remarks>
            [TypeConverter(typeof(GeneralTypeConverter))]
            [Editor(typeof(LineSymbolizerEditor), typeof(UITypeEditor))]
            </remarks>
        </member>
        <member name="P:DotSpatial.Symbology.Pattern.PatternType">
            <summary>
            Gets or sets the pattern type.  Setting this
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.Pattern.UseOutline">
            <summary>
            Gets or sets a boolean indicating whether or not the pattern should use the outline symbolizer.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.IGradientPattern">
            <summary>
            IGradientPath
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IGradientPattern.Angle">
            <summary>
            Gets or sets the angle for the gradient pattern.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IGradientPattern.Colors">
            <summary>
            Gets or sets an array of colors that match the corresponding positions.  The length of
            colors and positions should be the same length.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IGradientPattern.Positions">
            <summary>
            The positions as floating point values from 0 to 1 that represent the corresponding location
            in the gradient brush pattern.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IGradientPattern.GradientType">
            <summary>
            Gets or sets the gradient type
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.GradientPattern.#ctor">
            <summary>
            Creates a new instance of GradientPattern
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.GradientPattern.#ctor(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Creates a new instance of a Gradient Pattern using the specified colors
            </summary>
            <param name="startColor"></param>
            <param name="endColor"></param>
        </member>
        <member name="M:DotSpatial.Symbology.GradientPattern.#ctor(System.Drawing.Color,System.Drawing.Color,System.Double)">
            <summary>
            Creates a new instance of a Gradient Pattern using the specified colors and angle
            </summary>
            <param name="startColor">The start color</param>
            <param name="endColor">The end color</param>
            <param name="angle">The direction of the gradient, measured in degrees clockwise from the x-axis</param>
        </member>
        <member name="M:DotSpatial.Symbology.GradientPattern.#ctor(System.Drawing.Color,System.Drawing.Color,System.Double,DotSpatial.Symbology.GradientType)">
            <summary>
            Creates a new instance of a Gradient Pattern using the specified colors and angle
            </summary>
            <param name="startColor">The start color</param>
            <param name="endColor">The end color</param>
            <param name="angle">The direction of the gradient, measured in degrees clockwise from the x-axis</param>
            <param name="style">Controls how the gradient is drawn</param>
        </member>
        <member name="M:DotSpatial.Symbology.GradientPattern.GetFillColor">
            <summary>
            Gets a color that can be used to represent this pattern.  In some cases, a color is not
            possible, in which case, this returns Gray.
            </summary>
            <returns>A single System.Color that can be used to represent this pattern.</returns>
        </member>
        <member name="M:DotSpatial.Symbology.GradientPattern.SetFillColor(System.Drawing.Color)">
            <summary>
            Sets the fill color, keeping the approximate gradiant RGB changes the same, but adjusting
            the mean color to the specifeid color.
            </summary>
            <param name="color">The mean color to apply.</param>
        </member>
        <member name="M:DotSpatial.Symbology.GradientPattern.FillPath(System.Drawing.Graphics,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Handles the drawing code for linear gradient paths.
            </summary>
            <param name="g"></param>
            <param name="gp"></param>
        </member>
        <member name="P:DotSpatial.Symbology.GradientPattern.Angle">
            <summary>
            Gets or sets the angle for the gradient pattern.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.GradientPattern.Colors">
            <summary>
            Gets or sets the end color
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.GradientPattern.Positions">
            <summary>
            Gets or sets the start color
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.GradientPattern.GradientType">
            <summary>
            Gets or sets the gradient type
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.IColorScheme">
            <summary>
            IColorScheme
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.IScheme">
            <summary>
            IScheme
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.IScheme.AddCategory(DotSpatial.Symbology.ICategory)">
            <summary>
            Adds a new scheme, assuming that the new scheme is the correct type.
            </summary>
            <param name="category">The category to add</param>
        </member>
        <member name="M:DotSpatial.Symbology.IScheme.ApplySnapping(DotSpatial.Symbology.ICategory)">
            <summary>
            Applies the snapping rule directly to the categories, based on the most recently
            collected set of values, and the current VectorEditorSettings.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.IScheme.CreateNewCategory(System.Drawing.Color,System.Double)">
            <summary>
            Creates the category using a random fill color
            </summary>
            <param name="fillColor">The base color to use for creating the category</param>
            <param name="size">For points this is the maximal point size, for lines this is the maximum line width</param>
            <returns>A new IFeatureCategory that matches the type of this scheme</returns>
        </member>
        <member name="M:DotSpatial.Symbology.IScheme.CreateRandomCategory">
            <summary>
            Uses the settings on this scheme to create a random category.
            </summary>
            <returns>A new ICategory</returns>
        </member>
        <member name="M:DotSpatial.Symbology.IScheme.DecreaseCategoryIndex(DotSpatial.Symbology.ICategory)">
            <summary>
            Reduces the index value of the specified category by 1 by
            exchaning it with the category before it.  If there is no
            category before it, then this does nothing.
            </summary>
            /// <param name="category">The category to decrease the index of</param>
        </member>
        <member name="M:DotSpatial.Symbology.IScheme.DrawCategory(System.Int32,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws the regular symbolizer for the specified cateogry to the specified graphics
            surface in the specified bounding rectangle.
            </summary>
            <param name="index">The integer index of the feature to draw.</param>
            <param name="g">The Graphics object to draw to</param>
            <param name="bounds">The rectangular bounds to draw in</param>
        </member>
        <member name="M:DotSpatial.Symbology.IScheme.IncreaseCategoryIndex(DotSpatial.Symbology.ICategory)">
            <summary>
            Re-orders the specified member by attempting to exchange it with the next higher
            index category.  If there is no higher index, this does nothing.
            </summary>
             <param name="category">The category to increase the index of</param>
        </member>
        <member name="M:DotSpatial.Symbology.IScheme.InsertCategory(System.Int32,DotSpatial.Symbology.ICategory)">
            <summary>
            Inserts the category at the specified index
            </summary>
            <param name="index">The integer index where the category should be inserted</param>
            <param name="category">The category to insert</param>
        </member>
        <member name="M:DotSpatial.Symbology.IScheme.RemoveCategory(DotSpatial.Symbology.ICategory)">
            <summary>
            Removes the specified category
            </summary>
            <param name="category">The category to insert</param>
        </member>
        <member name="M:DotSpatial.Symbology.IScheme.SuspendEvents">
            <summary>
            Suspends the category events
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.IScheme.ResumeEvents">
            <summary>
            Resumes the category events
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.IScheme.ClearCategories">
            <summary>
            Clears the categories
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IScheme.EditorSettings">
            <summary>
            Gets or sets the editor settings that control how this scheme operates.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IScheme.Statistics">
            <summary>
            This is cached until a GetValues call is made, at which time the statistics will
            be re-calculated from the values.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IScheme.Values">
            <summary>
            Gets the current list of values calculated in the case of numeric breaks.
            This includes only members that are not excluded by the exclude expression,
            and have a valid numeric value.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.IColorScheme.ApplyScheme(DotSpatial.Symbology.ColorSchemeType,DotSpatial.Data.IRaster)">
            <summary>
            Applies the specified color scheme from a list of predefined scheme options.
            </summary>
            <param name="schemeType">The predefined color scheme</param>
            <param name="raster">The raster that provides values to govern symbolizing</param>
        </member>
        <member name="M:DotSpatial.Symbology.IColorScheme.CreateCategories(DotSpatial.Data.IRaster)">
            <summary>
            Creates the categories for this scheme based on statistics and values
            sampled from the specified raster.
            </summary>
            <param name="raster">The raster to use when creating categories</param>
        </member>
        <member name="M:DotSpatial.Symbology.IColorScheme.GetValues(DotSpatial.Data.IRaster)">
            <summary>
            Gets the values from the raster.  If MaxSampleCount is less than the
            number of cells, then it randomly samples the raster with MaxSampleCount
            values.  Otherwise it gets all the values in the raster.
            </summary>
            <param name="raster">The raster to sample</param>
        </member>
        <member name="P:DotSpatial.Symbology.IColorScheme.Opacity">
            <summary>
            Gets or sets the floating point value for the opacity
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IColorScheme.Categories">
            <summary>
            Gets or sets the collection of color scheme categories to use.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IColorScheme.EditorSettings">
            <summary>
            gets or sets the editor settings for controls that affect the color scheme.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.CustomSymbolizerCollectionExt">
            <summary>
            Extension methods for a collection of custom symbolizers
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.CustomSymbolizerCollectionExt.Save(System.Collections.Generic.IEnumerable{DotSpatial.Symbology.CustomLineSymbolizer},System.String)">
            <summary>
            Saves a list of custom line symbolizers to a file.
            </summary>
            <param name="self">The list of custom line symbolizers</param>
            <param name="fileName">the file name</param>
        </member>
        <member name="M:DotSpatial.Symbology.CustomSymbolizerCollectionExt.Save(System.Collections.Generic.IEnumerable{DotSpatial.Symbology.CustomPointSymbolizer},System.String)">
            <summary>
            Saves a list of custom point symbolizers to a file
            </summary>
            <param name="self"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:DotSpatial.Symbology.CustomSymbolizerCollectionExt.Save(System.Collections.Generic.IEnumerable{DotSpatial.Symbology.CustomPolygonSymbolizer},System.String)">
            <summary>
            Saves a list of custom polygon symbolizers to a file
            </summary>
            <param name="self"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:DotSpatial.Symbology.CustomSymbolizerCollectionExt.Load(System.Collections.Generic.IEnumerable{DotSpatial.Symbology.CustomLineSymbolizer},System.String)">
            <summary>
            Loads the list of custom line symbolizers from a file
            </summary>
            <param name="self">The list of custom line symbolizers</param>
            <param name="fileName">the file name</param>
        </member>
        <member name="T:DotSpatial.Symbology.CustomLineSymbolProvider">
            <summary>
            This class provides a list of predefined symbolizers.
            In the current implementation the symbolizers are 'hard-coded'.
            In other implementations they will be loaded from a xml resource file.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.ICustomLineSymbolProvider">
            <summary>
            The interface IPredefinedLineSymbolProvider defines methods to save and load predefined
            line symbolizers from a xml file or from another source.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ICustomLineSymbolProvider.Load(System.String)">
            <summary>
            Loads a list of custom line symbolizers from a data file
            </summary>
            <param name="fileName">The file name</param>
            <returns>The list of custom line symbolizers</returns>
        </member>
        <member name="M:DotSpatial.Symbology.ICustomLineSymbolProvider.Save(System.String)">
            <summary>
            Saves a list of custom line symbolizers to a data file
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:DotSpatial.Symbology.CustomLineSymbolProvider.#ctor">
            <summary>
            Creates a new instance of PredefinedLineSymbolProvider
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.CustomLineSymbolProvider.GetAvailableCategories">
            <summary>
            Gets a string array of all available categories (groups) of custom predefined symbols
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.CustomLineSymbolProvider.GetAllSymbols">
            <summary>
            Returns all available predefined custom line symbols
            </summary>
            <returns>A list of vailable custom line symbols</returns>
        </member>
        <member name="M:DotSpatial.Symbology.CustomLineSymbolProvider.GetSymbolsByCategory(System.String)">
            <summary>
            Gets a list of all predefined custom symbols that belong to the specific category
            </summary>
            <param name="categoryName">The name of the category group</param>
            <returns>The list of custom symbols</returns>
        </member>
        <member name="M:DotSpatial.Symbology.CustomLineSymbolProvider.Load(System.String)">
            <summary>
            Loads a list of custom line symbolizers from a binary serialized file
            </summary>
            <param name="fileName">The serialized binary file</param>
            <returns>The list of custom line symbolizers</returns>
        </member>
        <member name="M:DotSpatial.Symbology.CustomLineSymbolProvider.Save(System.String)">
            <summary>
            Saves
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="T:DotSpatial.Symbology.Position2D">
            <summary>
            Position2D is much simpler than a typical geometric construct, using fields instead of properties to make it work faster.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.Position2D.X">
            <summary>
            The position in the X, or horizontal direction
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.Position2D.Y">
            <summary>
            The position in the Y or vertical direction
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.Position2D.#ctor">
            <summary>
            Creates a new instance of Position2D
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.Position2D.#ctor(System.Double,System.Double)">
            <summary>
            Creates a new position2D class using the specified coordinates
            </summary>
            <param name="x">The X or horizontal coordinate</param>
            <param name="y">The Y or vertical coordinate</param>
        </member>
        <member name="M:DotSpatial.Symbology.Position2D.OnRandomize(System.Random)">
            <summary>
            Randomizes the position by selecting a random position from -1000 to 1000 for X and Y
            </summary>
            <param name="generator">The random number generator so that a seed can be chosen.</param>
        </member>
        <member name="M:DotSpatial.Symbology.Position2D.ToCoordinate">
            <summary>
            Creates a valid 2D coordinate using this position2D class
            </summary>
            <returns></returns>
        </member>
        <member name="T:DotSpatial.Symbology.Opp">
            <summary>
            Opp
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.Opp.RectangleFromPoints(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Calculates a new rectangle by using the input points to define the far corners.
            The position of the points doesn't matter.
            </summary>
            <param name="pt1">One of the points to form a rectangle with.</param>
            <param name="pt2">The second point to use when drawing a rectangle.</param>
            <returns>A Rectangle created from the points.</returns>
        </member>
        <member name="T:DotSpatial.Symbology.FilterCollectionEM">
            <summary>
            FilterCollectionEM
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.FilterCollectionEM.AddRange(DotSpatial.Symbology.IFeatureSelection,System.Collections.Generic.IEnumerable{DotSpatial.Data.IFeature})">
            <summary>
            Adds all the features in the specified range.  This will throw an exception if the
            the features are not already in the feature list, since this is simply trying
            to select those features.
            </summary>
            <param name="self">The IFilterCollection to add the range to</param>
            <param name="features">The features being selected.</param>
        </member>
        <member name="M:DotSpatial.Symbology.FilterCollectionEM.AddRegion(DotSpatial.Symbology.IFeatureSelection,DotSpatial.Topology.IEnvelope)">
            <summary>
            This uses extent checking (rather than full polygon intersection checking).  It will add
            any members that are either contained by or intersect with the specified region
            depending on the SelectionMode property.  The order of operation is the region
            acting on the feature, so Contains, for instance, would work with points.
            </summary>
            <param name="self"></param>
            <param name="region"></param>
            <returns>True if any item was actually added to the collection</returns>
        </member>
        <member name="M:DotSpatial.Symbology.FilterCollectionEM.RemoveRange(DotSpatial.Symbology.IFeatureSelection,System.Collections.Generic.IEnumerable{DotSpatial.Data.IFeature})">
            <summary>
            Removes the entire list of features
            </summary>
            <param name="self">The IFilterCollection to remove the range from</param>
            <param name="features">The enumerable collection of IFeatures.</param>
        </member>
        <member name="M:DotSpatial.Symbology.FilterCollectionEM.RemoveRegion(DotSpatial.Symbology.IFeatureSelection,DotSpatial.Topology.IEnvelope)">
            <summary>
            Tests each member currently in the selected features based on
            the SelectionMode.  If it passes, it will remove the feature from
            the selection.
            </summary>
            <param name="self">The IFilterCollection that this should be applied to</param>
            <param name="region">The geographic region to remove</param>
            <returns>Boolean, true if the collection was changed</returns>
        </member>
        <member name="T:DotSpatial.Symbology.RasterLayerEventArgs">
            <summary>
            An EventArgs specifically tailored to RasterLayer.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.RasterLayerEventArgs.#ctor(DotSpatial.Symbology.IRasterLayer)">
            <summary>
            Initializes a new instance of the RasterLayerEventArgs class.
            </summary>
            <param name="rasterLayer">The IRasterLayer that is involved in this event.</param>
        </member>
        <member name="P:DotSpatial.Symbology.RasterLayerEventArgs.RasterLayer">
            <summary>
            Gets the RasterLayer associated with this event.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.IHatchPattern">
            <summary>
            IHatchPattern
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IHatchPattern.HatchStyle">
            <summary>
            Gets or sets the hatch style
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IHatchPattern.ForeColor">
            <summary>
            Gets or sets the fore color of the hatch pattern
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IHatchPattern.ForeColorOpacity">
            <summary>
            Sets the opacity of this simple pattern by modifying the alpha channel of the fill color.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IHatchPattern.BackColor">
            <summary>
            Gets or sets the background color of the hatch pattern
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IHatchPattern.BackColorOpacity">
            <summary>
            Sets the opacity of this simple pattern by modifying the alpha channel of the fill color.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.Symbol">
            <summary>
            A point symbolizer, is comprized of a set of symbols drawn one on top of the other.  This represents the base class
            for one of those symbols.  The specialized type, like CharacterSymbol, SimpleSymbol, and PictureSymbol.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.ISymbol">
            <summary>
            ISymbol
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ISymbol.CopyPlacement(DotSpatial.Symbology.ISymbol)">
            <summary>
            Only copies the shared placement aspects (Size, Offset, Angle) from the specified symbol.
            </summary>
            <param name="symbol">The symbol to copy values from.</param>
        </member>
        <member name="M:DotSpatial.Symbology.ISymbol.GetBoundingSize">
            <summary>
            Takes into account the size, angle, and offset to calculate a rectangular bounding size that completely
            contains the current symbol.
            </summary>
            <returns>A SizeD representing a size that contains the offset, rotated symbol.</returns>
        </member>
        <member name="M:DotSpatial.Symbology.ISymbol.Draw(System.Drawing.Graphics,System.Double)">
            <summary>
            Draws this symbol to the graphics object given the symbolizer that specifies content
            across the entire set of scales.
            </summary>
            <param name="g">The graphics object should be adjusted so that (0, 0) is the center of the symbol.</param>
            <param name="scaleSize">If this should draw in pixels, this should be 1.  Otherwise, this should be
            the constant that you multiply against so that drawing using geographic units will draw in pixel units.</param>
        </member>
        <member name="M:DotSpatial.Symbology.ISymbol.Scale(System.Double)">
            <summary>
            Multiplies all of the linear measurements found in this Symbol by the specified value.
            This is especially useful for changing units.
            </summary>
            <param name="value">The double precision floating point value to scale by.</param>
        </member>
        <member name="M:DotSpatial.Symbology.ISymbol.Select">
            <summary>
            Modifies this symbol in a way that is appropriate for indicating a selected symbol.
            This could mean drawing a cyan outline, or changing the color to cyan.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ISymbol.GetColor">
            <summary>
            Gets a color to represent this point.  If the point is using an image,
            then this color will be gray.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.ISymbol.SetColor(System.Drawing.Color)">
            <summary>
            Sets the primary color of this symbol to the specified color if possible
            </summary>
            <param name="color">The Color to assign</param>
        </member>
        <member name="P:DotSpatial.Symbology.ISymbol.Angle">
            <summary>
            Gets or sets the double precision floating point that controls the angle in degrees counter clockwise.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ISymbol.Offset">
            <summary>
            Gets or sets the 2D offset for this particular symbol
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ISymbol.Size">
            <summary>
            Gets or sets the size
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ISymbol.SymbolType">
            <summary>
            Gets the symbol type for this symbol.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.Symbol.#ctor">
            <summary>
            Creates a new instance of Symbol
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.Symbol.#ctor(DotSpatial.Symbology.SymbolType)">
            <summary>
            This creates a wrapper class encapsulates one of the available subclasses for
            symbol, enumerating the different options.
            </summary>
            <param name="type">The type to use for this symbol.</param>
        </member>
        <member name="M:DotSpatial.Symbology.Symbol.GetColor">
            <summary>
            Gets a color to represent this point.  If the point is using an image,
            then this color will be gray.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.Symbol.SetColor(System.Drawing.Color)">
            <summary>
            Sets the primary color of this symbol to the specified color if possible
            </summary>
            <param name="color">The Color to assign</param>
        </member>
        <member name="M:DotSpatial.Symbology.Symbol.CopyPlacement(DotSpatial.Symbology.ISymbol)">
            <summary>
            Only copies the shared placement aspects (Size, Offset, Angle) from the specified symbol.
            </summary>
            <param name="symbol">The symbol to copy values from.</param>
        </member>
        <member name="M:DotSpatial.Symbology.Symbol.Draw(System.Drawing.Graphics,System.Double)">
            <summary>
            Draws this symbol to the graphics object given the symbolizer that specifies content
            across the entire set of scales.
            </summary>
            <param name="g">The graphics object should be adjusted so that (0, 0) is the center of the symbol.</param>
            <param name="scaleWidth">If this should draw in pixels, this should be 1.  Otherwise, this should be
            the constant that you multiply against so that drawing using geographic units will draw in pixel units.</param>
        </member>
        <member name="M:DotSpatial.Symbology.Symbol.GetBoundingSize">
            <summary>
            Calculates a size that would be necessary to contain the entire symbol, taking rotation and
            offset into account.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.Symbol.Scale(System.Double)">
            <summary>
            Multiplies all of the linear measurements found in this Symbol by the specified value.
            This is especially useful for changing units.
            </summary>
            <param name="value">The double precision floating point value to scale by.</param>
        </member>
        <member name="M:DotSpatial.Symbology.Symbol.Select">
            <summary>
            Modifies this symbol in a way that is appropriate for indicating a selected symbol.
            This could mean drawing a cyan outline, or changing the color to cyan.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.Symbol.OnDraw(System.Drawing.Graphics,System.Double)">
            <summary>
            Occurs during drawing.  The graphics object will already be rotated by the specified angle and
            adjusted according to the specified offset.  The mask will also be drawn before the point.
            </summary>
            <param name="g"></param>
            <param name="scaleSize"></param>
        </member>
        <member name="M:DotSpatial.Symbology.Symbol.OnRandomize(System.Random)">
            <summary>
            An overrideable implementation of randomizing the values for this class.
            This can be useful for generating random symbols or else for unit testing.
            </summary>
            <param name="generator">The random number generator to use.</param>
        </member>
        <member name="M:DotSpatial.Symbology.Symbol.OnScale(System.Double)">
            <summary>
            This occurs when the symbol is being instructed to scale.  The linear measurements are all
            multiplied by the specified value.  This allows for additional behavior to be programmed,
            or the original behavior to be overridden or replaced.
            </summary>
            <param name="value">The double precision value to scale by.</param>
        </member>
        <member name="P:DotSpatial.Symbology.Symbol.Angle">
            <summary>
            Gets or sets the double precision floating point that controls the angle in degrees counter clockwise.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.Symbol.Offset">
            <summary>
            Gets or sets the 2D offset for this particular symbol
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.Symbol.Size">
            <summary>
            Gets or sets the size
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.Symbol.SymbolType">
            <summary>
            Gets the symbol type for this symbol.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.PointShape">
            <summary>
            Allows the selection of several pre-defined shapes that have built
            in drawing code.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.PointShape.Diamond">
            <summary>
            Like a rectangle, but oriented with the points vertically
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.PointShape.Ellipse">
            <summary>
            An rounded elipse.  The Size parameter determines the size of the ellipse before rotation.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.PointShape.Hexagon">
            <summary>
            A hexagon drawn to fit the size specified.  Only the smaller dimension is used.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.PointShape.Rectangle">
            <summary>
            A rectangle fit to the Size before any rotation occurs.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.PointShape.Pentagon">
            <summary>
            A pentagon drawn to fit the size specified.  Only the smaller dimension is used.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.PointShape.Star">
            <summary>
            A star drawn to fit the size.  Only the smaller size dimension is used.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.PointShape.Triangle">
            <summary>
            Triangle with the point facing upwards initially.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.PointShape.Undefined">
            <summary>
            The default value.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.FeatureLayerSelectionEventArgs">
            <summary>
            FeatureLayerSelectionEventArgs
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.FeatureLayerEventArgs">
            <summary>
            FeatureLayerEventArgs
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayerEventArgs.#ctor(DotSpatial.Symbology.IFeatureLayer)">
            <summary>
            Creates a new instance of FeatureLayerEventArgs
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureLayerEventArgs.FeatureLayer">
            <summary>
            Gets or sets the feature layer for this event
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayerSelectionEventArgs.#ctor(DotSpatial.Symbology.IFeatureLayer,DotSpatial.Symbology.ISelection)">
            <summary>
            Creates a new instance of FeatureLayerSelectionEventArgs
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureLayerSelectionEventArgs.Selection">
            <summary>
            Gets the list of changed features
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.ColorCategoryCollection">
            <summary>
            ColorCategoryCollection
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ColorCategoryCollection.#ctor">
            <summary>
            Default constructor for the PolygonCategoryCollection class.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ColorCategoryCollection.#ctor(DotSpatial.Symbology.IColorScheme)">
            <summary>
            Initializes a new PolygonCategoryCollection instance with the supplied scheme.
            </summary>
            <param name="scheme">The scheme to use ofr this collection.</param>
        </member>
        <member name="M:DotSpatial.Symbology.ColorCategoryCollection.OnInclude(DotSpatial.Symbology.IColorCategory)">
            <summary>
            Ensures that newly added categories can navigate to higher legend items.
            </summary>
            <param name="item">The newly added legend item.</param>
        </member>
        <member name="M:DotSpatial.Symbology.ColorCategoryCollection.OnExclude(DotSpatial.Symbology.IColorCategory)">
            <summary>
            Changes the parent item of the specified category
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:DotSpatial.Symbology.ColorCategoryCollection.UpdateItemParentPointers">
            <summary>
            Updates all of the categories so that they have a parent item that matches the
            schemes parent item.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ColorCategoryCollection.Scheme">
            <summary>
            Gets or sets the parent scheme for this collection
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.BinaryLayerProvider">
            <summary>
            BinaryLayerProvider
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.IRasterLayerProvider">
            <summary>
            A DataProvider that is specific to raster formats.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.ILayerProvider">
            <summary>
            ILayerProvider
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ILayerProvider.OpenLayer(System.String,System.Boolean,System.Collections.Generic.ICollection{DotSpatial.Symbology.ILayer},DotSpatial.Data.IProgressHandler)">
            <summary>
            This open method is only called if this plugin has been given priority for one
            of the file extensions supported in the DialogReadFilter property supplied by
            this control.  Failing to provide a DialogReadFilter will result in this plugin
            being added to the list of DataProviders being supplied under the Add Other Data
            option in the file menu.
            </summary>
            <param name="fileName">A string specifying the complete path and extension of the file to open.</param>
            <param name="inRam">A boolean that, if ture, will request that the data be loaded into memory</param>
            <param name="container">Any valid IContainer that should have the new layer automatically added to it</param>
            <param name="progressHandler">An IProgressHandler interface for status messages</param>
            <returns>A List of IDataSets to be added to the Map.  These can also be groups of datasets.</returns>
        </member>
        <member name="P:DotSpatial.Symbology.ILayerProvider.DialogReadFilter">
            <summary>
            Gets a dialog read filter that lists each of the file type descriptions and file extensions, delimeted
            by the | symbol.  Each will appear in DotSpatial's open file dialog filter, preceeded by the name provided
            on this object.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILayerProvider.DialogWriteFilter">
            <summary>
            Gets a dialog filter that lists each of the file type descriptions and extensions for a Save File Dialog.
            Each will appear in DotSpatial's open file dialog filter, preceeded by the name provided on this object.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILayerProvider.Name">
            <summary>
            Gets a prefereably short name that identifies this data provider.  Example might be GDAL.
            This will be prepended to each of the DialogReadFilter members from this plugin.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILayerProvider.Description">
            <summary>
            This provides a basic description of what your provider does.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.IRasterLayerProvider.Create(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Type,System.String[])">
            <summary>
            This create new method implies that this provider has the priority for creating a new file.
            An instance of the dataset should be created and then returned.  By this time, the fileName
            will already be checked to see if it exists, and deleted if the user wants to overwrite it.
            </summary>
            <param name="name">The string fileName for the new instance.</param>
            <param name="driverCode">The string short name of the driver for creating the raster.</param>
            <param name="xSize">The number of columns in the raster.</param>
            <param name="ySize">The number of rows in the raster.</param>
            <param name="numBands">The number of bands to create in the raster.</param>
            <param name="dataType">The data type to use for the raster.</param>
            <param name="options">The options to be used.</param>
            <returns>A new IRaster.</returns>
        </member>
        <member name="M:DotSpatial.Symbology.BinaryLayerProvider.Create(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Type,System.String[])">
            <summary>
            Creates a new BinaryRasterLayer
            </summary>
            <returns>IRasterLayer</returns>
        </member>
        <member name="M:DotSpatial.Symbology.BinaryLayerProvider.OpenLayer(System.String,System.Boolean,System.Collections.Generic.ICollection{DotSpatial.Symbology.ILayer},DotSpatial.Data.IProgressHandler)">
            <summary>
            Opens an existing raster and returns a layer containing it
            </summary>
            <param name="fileName">The string fileName to open</param>
            <param name="inRam">Opens in ram</param>
            <param name="container">A container to automatically add this layer to</param>
            <param name="progressHandler">Returns progress</param>
            <returns>An ILayer</returns>
        </member>
        <member name="P:DotSpatial.Symbology.BinaryLayerProvider.DialogReadFilter">
            <summary>
            Gets a dialog read filter that lists each of the file type descriptions and file extensions, delimeted
            by the | symbol.  Each will appear in DotSpatial's open file dialog filter, preceeded by the name provided
            on this object.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.BinaryLayerProvider.DialogWriteFilter">
            <summary>
            Gets a dialog filter that lists each of the file type descriptions and extensions for a Save File Dialog.
            Each will appear in DotSpatial's open file dialog filter, preceeded by the name provided on this object.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.BinaryLayerProvider.Name">
            <summary>
            Gets a prefereably short name that identifies this data provider.  Example might be GDAL.
            This will be prepended to each of the DialogReadFilter members from this plugin.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.BinaryLayerProvider.Description">
            <summary>
            This is a basic description that will fall next to your plugin in the Add Other Data dialog.
            This will only be shown if your plugin does not supply a DialogReadFilter.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.RandomExt">
            <summary>
            RandomEM
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.RandomExt.NextBool(System.Random)">
            <summary>
            Generates a boolean at random from this generator.
            </summary>
            <param name="generator">THe random class that generates the random content.</param>
            <returns>A boolean that has equal probability of being on or off.</returns>
        </member>
        <member name="M:DotSpatial.Symbology.RandomExt.NextColor(System.Random)">
            <summary>
            Extends the Random class to also allow it to generate random colors
            </summary>
            <param name="generator">This random number generator</param>
        </member>
        <member name="M:DotSpatial.Symbology.RandomExt.NextFloat(System.Random)">
            <summary>
            Generates a floating point value from 0 to 1
            </summary>
            <param name="generator">The random class to extend</param>
            <returns>A new randomly created floating point value from 0 to 1</returns>
        </member>
        <member name="M:DotSpatial.Symbology.RandomExt.NextFloat(System.Random,System.Single)">
            <summary>
            Generates a random floating point value from 0 to the specified extremeValue, which can
            be either positive or negative.
            </summary>
            <param name="generator">This random class</param>
            <param name="extremeValue">The floating point maximum for the number being calculated</param>
            <returns>A value ranging from 0 to ma</returns>
        </member>
        <member name="M:DotSpatial.Symbology.RandomExt.NextFloat(System.Random,System.Single,System.Single)">
            <summary>
            Calculates a random floating point value that ranges between (inclusive) the specified minimum and maximum values.
            </summary>
            <param name="generator">The random class to generate the random value</param>
            <param name="minimum">The floating point maximum</param>
            <param name="maximum">The floating point minimum</param>
            <returns>A floating point value that is greater than or equal to the minimum and less than or equal to the maximum</returns>
        </member>
        <member name="M:DotSpatial.Symbology.RandomExt.NextEnum``1(System.Random)">
            <summary>
            Given any enumeration of type T, this will return a random instance of that enumeration
            </summary>
            <typeparam name="T">The type of the enumeration</typeparam>
            <param name="generator">This random generator</param>
            <returns>The T type to generate</returns>
        </member>
        <member name="M:DotSpatial.Symbology.RandomExt.NextBoolArray(System.Random,System.Int32,System.Int32)">
            <summary>
            Generates an array of boolean values that ranges from minLength to maxLength
            </summary>
            <param name="generator">The Random class for generating random values</param>
            <param name="minLength">THe minimum length of the array</param>
            <param name="maxLength">The maximum length of the array</param>
            <returns>An array of boolean values.</returns>
        </member>
        <member name="T:DotSpatial.Symbology.CustomSymbolizer">
            <summary>
            This is a custom (predefined) symbolizer which is displayed in the 'Predefined symbol' control.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.ICustomSymbolizer">
            <summary>
            Interface for a predefined symbolizer which can be stored in a xml symbolizer file.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ICustomSymbolizer.SaveToXml(System.String)">
            <summary>
            Jiri's code to save to XML
            </summary>
            <param name="xmlDataSource">The xml data source to load the symbology from</param>
        </member>
        <member name="M:DotSpatial.Symbology.ICustomSymbolizer.LoadFromXml(System.String,System.String)">
            <summary>
            Jiri's code to load from XML
            </summary>
            <param name="xmlDataSource">The xml Data source to load the symbology from</param>
            <param name="uniqueName">A Unique name for the symbology item</param>
        </member>
        <member name="M:DotSpatial.Symbology.ICustomSymbolizer.LoadFromXml(System.String,System.String,System.String)">
            <summary>
            Jiri's code to load from XML
            </summary>
            <param name="xmlDataSource">The xml Data source to load the symbology from</param>
            <param name="group">The organizational group or category</param>
            <param name="name">The string name within the specified group or category</param>
        </member>
        <member name="P:DotSpatial.Symbology.ICustomSymbolizer.Symbolizer">
            <summary>
            Gets or sets the symbolizer for this predifined symbolizer
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ICustomSymbolizer.Name">
            <summary>
            Gets or sets the string name for this predefined symbolizer
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ICustomSymbolizer.Category">
            <summary>
            Gets or sets the string group for this predefined symbolizer
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ICustomSymbolizer.UniqueName">
            <summary>
            Gets or sets the unique name for this predefined symbolizer.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ICustomSymbolizer.SymbolType">
            <summary>
            Gets the symbolizer type of this predefined symbolizer
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.CustomSymbolizer.#ctor">
            <summary>
            Constructs a new instance of a custom symbolizer
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.CustomSymbolizer.#ctor(DotSpatial.Symbology.IFeatureSymbolizer,System.String,System.String,System.String)">
            <summary>
            Creates a new instance of CustomSymbolizer
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.CustomSymbolizer.SaveToXml(System.String)">
            <summary>
            Jiri's code to save to XML
            </summary>
            <param name="xmlDataSource">The xml data source to load the symbology from</param>
        </member>
        <member name="M:DotSpatial.Symbology.CustomSymbolizer.LoadFromXml(System.String,System.String)">
            <summary>
            Jiri's code to load from XML
            </summary>
            <param name="xmlDataSource">The xml Data source to load the symbology from</param>
            <param name="uniqueName">A Unique name for the symbology item</param>
        </member>
        <member name="M:DotSpatial.Symbology.CustomSymbolizer.LoadFromXml(System.String,System.String,System.String)">
            <summary>
            Jiri's code to load from XML
            </summary>
            <param name="xmlDataSource">The xml Data source to load the symbology from</param>
            <param name="group">The organizational group or category</param>
            <param name="name">The string name within the specified group or category</param>
        </member>
        <member name="P:DotSpatial.Symbology.CustomSymbolizer.Symbolizer">
            <summary>
            Gets or sets the symbolizer for this predifined symbolizer
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.CustomSymbolizer.Name">
            <summary>
            Gets or sets the string name for this predefined symbolizer
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.CustomSymbolizer.Category">
            <summary>
            Gets or sets the string group for this predefined symbolizer
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.CustomSymbolizer.UniqueName">
            <summary>
            Gets or sets the unique name for this predefined symbolizer.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.CustomSymbolizer.SymbolType">
            <summary>
            The type of the symbolizer (point, line, polygon)
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.CustomLineSymbolizer">
            <summary>
            CustomLineSymbolizer
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.CustomLineSymbolizer.#ctor">
            <summary>
            Creates a new CustomSymbolizer for symbolizing lines
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.CustomLineSymbolizer.#ctor(System.String,System.String,System.String,DotSpatial.Symbology.LineSymbolizer)">
            <summary>
            Creates a new Custom Line symbolizer with the specified properties
            </summary>
            <param name="uniqueName">the unique name</param>
            <param name="name">the name of the custom symbolizer</param>
            <param name="category">the map category of the custom symbolizer</param>
            <param name="symbolizer">the associated line symbolizer</param>
        </member>
        <member name="P:DotSpatial.Symbology.CustomLineSymbolizer.Symbolizer">
            <summary>
            Gets or sets the line symbolizer
            </summary>
            <remarks>//Editor(typeof(LineSymbolizerEditor), typeof(UITypeEditor))</remarks>
        </member>
        <member name="T:DotSpatial.Symbology.MatchableEM">
            <summary>
            MatchableEM
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.MatchableEM.Matches(DotSpatial.Symbology.IMatchable,DotSpatial.Symbology.IMatchable)">
            <summary>
            This tests the public properties from the two objects.  If any properties implement
            the IMatchable interface, and do not match, this returns false.  If any public
            properties are value types, and they are not equal, then this returns false.
            </summary>
            <param name="self">This matchable item </param>
            <param name="other">The other item to compare to this item</param>
            <returns>Boolean, true if there is a match</returns>
        </member>
        <member name="T:DotSpatial.Symbology.TiledImageLayer">
            <summary>
            TiledImageLayer
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.Layer">
            <summary>
            Layer
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.RenderableLegendItem">
            <summary>
            RenderableLegendItem
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.IRenderableLegendItem">
            <summary>
            Items with this setup can both be organized as an item,
            and feature the elemental control methods and properties
            around drawing.  Layers, MapFrames, groups etc can fall in this
            category.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.IRenderable">
            <summary>
            Anything that can draw itself to the map is an IRenderable.  This is implemented by RenderBase.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.IRenderable.Invalidate">
            <summary>
            Invalidates the drawing methods
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.IRenderable.EnvelopeChanged">
            <summary>
            Occurs whenever the geographic bounds for this renderable object have changed
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.IRenderable.Invalidated">
            <summary>
            Occurs when an outside request is sent to invalidate this object
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.IRenderable.VisibleChanged">
            <summary>
            Occurs immediately after the visible parameter has been adjusted.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IRenderable.Extent">
            <summary>
            Obtains an IEnvelope in world coordinates that contains this object
            </summary>
            <returns></returns>
        </member>
        <member name="P:DotSpatial.Symbology.IRenderable.IsInitialized">
            <summary>
            Gets whether or not the unmanaged drawing structures have been created for this item
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IRenderable.IsVisible">
            <summary>
            If this is false, then the drawing function will not render anything.
            Warning!  This will also prevent any execution of calculations that take place
            as part of the drawing methods and will also abort the drawing methods of any
            sub-members to this IRenderable.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.RenderableLegendItem.#ctor">
            <summary>
            Creates a new instance of RenderBase
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.RenderableLegendItem.Invalidate">
            <summary>
            Invalidates the drawing methods
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.RenderableLegendItem.OnEnvelopeChanged(System.Object,DotSpatial.Symbology.EnvelopeArgs)">
            <summary>
            Fires the EnvelopeChanged event.
            </summary>
            <param name="sender">The object sender for this event (this)</param>
            <param name="e">The EnvelopeArgs specifying the envelope</param>
        </member>
        <member name="M:DotSpatial.Symbology.RenderableLegendItem.OnInvalidate(System.Object,System.EventArgs)">
            <summary>
            Fires the Invalidated event
            </summary>
            <param name="sender">The object sender (usually this)</param>
            <param name="e">An EventArgs parameter</param>
        </member>
        <member name="M:DotSpatial.Symbology.RenderableLegendItem.OnVisibleChanged(System.Object,System.EventArgs)">
            <summary>
            Fires the Visible Changed event
            </summary>
            <param name="sender">The object sender (usually this)</param>
            <param name="e">An EventArgs parameter</param>
        </member>
        <member name="E:DotSpatial.Symbology.RenderableLegendItem.EnvelopeChanged">
            <summary>
            Occurs whenever the geographic bounds for this renderable object have changed
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.RenderableLegendItem.Invalidated">
            <summary>
            Occurs when an outside request is sent to invalidate this object
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.RenderableLegendItem.VisibleChanged">
            <summary>
            Occurs immediately after the visible parameter has been adjusted.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.RenderableLegendItem.MyExtent">
            <summary>
            The protected extent is a direct, sealed accessor for the extent variable.
            This is safe to use in constructors.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.RenderableLegendItem.Extent">
            <summary>
            Obtains an IEnvelope in world coordinates that contains this object.  This is virtual, and
            will usually be reconfigured in subclasses to simply show the dataset extent.
            </summary>
            <returns></returns>
        </member>
        <member name="P:DotSpatial.Symbology.RenderableLegendItem.IsInitialized">
            <summary>
            Gets whether or not the unmanaged drawing structures have been created for this item
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.RenderableLegendItem.IsVisible">
            <summary>
            If this is false, then the drawing function will not render anything.
            Warning!  This will also prevent any execution of calculations that take place
            as part of the drawing methods and will also abort the drawing methods of any
            sub-members to this IRenderable.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.ILayer">
            <summary>
            Just specifies the organization of interfaces that make up a layer.
            It is recommended to create derived classes that inherit from an
            abstract layer that implements the majority of this shared functionality
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.ISelectable">
            <summary>
            This supports the FeatureLayer event SelectionChanged, for both groups and feature layers, or
            any other layer that supports both an ISelection and inherits from IFeatureLayer.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ISelectable.ClearSelection(DotSpatial.Topology.IEnvelope@)">
            <summary>
            Removes any members from existing in the selected state
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ISelectable.InvertSelection(DotSpatial.Topology.IEnvelope,DotSpatial.Topology.IEnvelope,DotSpatial.Symbology.SelectionMode,DotSpatial.Topology.IEnvelope@)">
            <summary>
            Inverts the selected state of any members in the specified region.
            </summary>
            <param name="tolerant">The geographic region to invert the selected state of members</param>
            <param name="strict">The geographic region when working with absolutes, without a tolerance</param>
            <param name="mode">The selection mode determining how to test for intersection</param>
            <param name="affectedArea">The geographic region encapsulating the changed members</param>
            <returns>Boolean, true if members were changed by the selection process.</returns>
        </member>
        <member name="M:DotSpatial.Symbology.ISelectable.Select(DotSpatial.Topology.IEnvelope,DotSpatial.Topology.IEnvelope,DotSpatial.Symbology.SelectionMode,DotSpatial.Topology.IEnvelope@)">
            <summary>
            Adds any members found in the specified region to the selected state as long as
            SelectionEnabled is set to true.
            </summary>
            <param name="tolerant">The geographic region where selection occurs</param>
            <param name="strict">The geographic region when working with absolutes, without a tolerance</param>
            <param name="mode">The selection mode</param>
            <param name="affectedArea">The envelope affected area</param>
            <returns>Boolean, true if any members were added to the selection</returns>
        </member>
        <member name="M:DotSpatial.Symbology.ISelectable.UnSelect(DotSpatial.Topology.IEnvelope,DotSpatial.Topology.IEnvelope,DotSpatial.Symbology.SelectionMode,DotSpatial.Topology.IEnvelope@)">
            <summary>
            Removes any members found in the specified region from the selection
            </summary>
            <param name="tolerant">The geographic region to investigate</param>
            <param name="strict">The geographic region when working with absolutes, without a tolerance</param>
            <param name="mode">The selection mode to use for selecting items</param>
            <param name="affectedArea">The geographic region containing all the shapes that were altered</param>
            <returns>Boolean, true if any members were removed from the selection</returns>
        </member>
        <member name="E:DotSpatial.Symbology.ISelectable.SelectionChanged">
            <summary>
            OCcurs after all of the layers have been updated with new selection content.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ISelectable.SelectionEnabled">
            <summary>
            Gets or sets the Boolean indicating whether this item is actively supporting selection
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.IDynamicVisibility">
            <summary>
            An shared interface for members that wish to set dynamic visiblity.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IDynamicVisibility.DynamicVisibilityWidth">
            <summary>
            Dynamic visibility represents layers that only appear when you zoom in close enough.
            This value represents the geographic width where that happens.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IDynamicVisibility.DynamicVisibilityMode">
            <summary>
            This controls whether the layer is visible when zoomed in closer than the dynamic
            visiblity width or only when further away from the dynamic visibility width
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IDynamicVisibility.UseDynamicVisibility">
            <summary>
            Gets or sets a boolean indicating whether dynamic visibility should be enabled.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ILayer.VisibleAtExtent(DotSpatial.Data.Extent)">
            <summary>
            Given a geographic extent, this tests the "IsVisible", "UseDynamicVisibility",
            "DynamicVisibilityMode" and "DynamicVisibilityWidth"
            In order to determine if this layer is visible.
            </summary>
            <param name="geographicExtent">The geographic extent, where the width will be tested.</param>
            <returns>Boolean, true if this layer should be visible for this extent.</returns>
        </member>
        <member name="M:DotSpatial.Symbology.ILayer.Invalidate(DotSpatial.Data.Extent)">
            <summary>
            Notifies the layer that the next time an area that intersects with this region
            is specified, it must first re-draw content to the image buffer.
            </summary>
            <param name="region">The envelope where content has become invalidated.</param>
        </member>
        <member name="M:DotSpatial.Symbology.ILayer.IsWithinLegendSelection">
            <summary>
            Queries this layer and the entire parental tree up to the map frame to determine if
            this layer is within the selected layers.
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.ILayer.ShowProperties">
            <summary>
            Occurs before the properties are actually shown, also allowing the event to be handled.
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.ILayer.ZoomToLayer">
            <summary>
            Occurs if the maps should zoom to this layer.
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.ILayer.LayerSelected">
            <summary>
            Occurs if this layer was selected
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.ILayer.FinishedLoading">
            <summary>
            Occurs when all aspects of the layer finish loading.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILayer.DataSet">
            <summary>
            Gets or sets the core dataset for this layer.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILayer.InvalidRegion">
            <summary>
            Gets the currently invalidated region.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILayer.MapFrame">
            <summary>
            Gets the MapFrame that contains this layer.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILayer.ProgressHandler">
            <summary>
            Gets or sets the progress handler
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.Layer.#ctor">
            <summary>
            Creates a new Layer, but this should be done from the derived classes
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.Layer.#ctor(System.Collections.Generic.ICollection{DotSpatial.Symbology.ILayer})">
            <summary>
            Creates a new Layer, but this should be done from the derived classes
            </summary>
            <param name="container">The container this layer should be a member of</param>
        </member>
        <member name="M:DotSpatial.Symbology.Layer.#ctor(DotSpatial.Data.IProgressHandler)">
            <summary>
            Creates a new layer with only a progress handler
            </summary>
            <param name="progressHandler"></param>
        </member>
        <member name="M:DotSpatial.Symbology.Layer.#ctor(System.Collections.Generic.ICollection{DotSpatial.Symbology.ILayer},DotSpatial.Data.IProgressHandler)">
            <summary>
            Creates a new Layer, but this should be done from the derived classes
            </summary>
            <param name="container">The container this layer should be a member of</param>
            <param name="progressHandler">A progress handler for handling progress messages</param>
        </member>
        <member name="M:DotSpatial.Symbology.Layer.VisibleAtExtent(DotSpatial.Data.Extent)">
            <summary>
            Given a geographic extent, this tests the "IsVisible", "UseDynamicVisibility",
             "DynamicVisibilityMode" and "DynamicVisibilityWidth"
            In order to determine if this layer is visible for the specified scale.
            </summary>
            <param name="geographicExtent">The geographic extent, where the width will be tested.</param>
            <returns>Boolean, true if this layer should be visible for this extent.</returns>
        </member>
        <member name="M:DotSpatial.Symbology.Layer.CanReceiveItem(DotSpatial.Symbology.ILegendItem)">
            <summary>
            Tests the specified legend item.  If the item is another layer or a group or a map-frame, then this
            will return false.  Furthermore, if the parent of the item is not also this object, then it will
            also return false.  The idea is that layers can have sub-nodes move around, but not transport from
            place to place.
            </summary>
            <param name="item">the legend item to test</param>
            <returns>Boolean that if true means that it is ok to insert the specified item into this layer.</returns>
        </member>
        <member name="M:DotSpatial.Symbology.Layer.IsWithinLegendSelection">
            <summary>
            Queries this layer and the entire parental tree up to the map frame to determine if
            this layer is within the selected layers.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.Layer.Invalidate(DotSpatial.Data.Extent)">
            <summary>
            Notifies the layer that the next time an area that intersects with this region
            is specified, it must first re-draw content to the image buffer.
            </summary>
            <param name="region">The envelope where content has become invalidated.</param>
        </member>
        <member name="M:DotSpatial.Symbology.Layer.Invalidate">
            <summary>
            Notifies parent layer that this item is invalid and should be redrawn.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.Layer.OnZoomToLayer">
            <summary>
            Fires the zoom to layer event
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.Layer.OnZoomToLayer(DotSpatial.Topology.IEnvelope)">
            <summary>
            Fires the zoom to layer event, but specifies the extent.
            </summary>
            <param name="env">IEnvelope env</param>
        </member>
        <member name="M:DotSpatial.Symbology.Layer.OnShowProperties(System.ComponentModel.HandledEventArgs)">
            <summary>
            Occurs before showing the properties dialog.  If the handled member
            was set to true, then this class will not show the event args.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DotSpatial.Symbology.Layer.OnCopyProperties(System.Object)">
            <summary>
            This should be overridden to copy the symbolizer properties from editCopy
            </summary>
            <param name="editCopy">The version that went into the property dialog</param>
        </member>
        <member name="M:DotSpatial.Symbology.Layer.ZoomToLayerClick(System.Object,System.EventArgs)">
            <summary>
            Zooms to the specific layer
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DotSpatial.Symbology.Layer.RemoveLayerClick(System.Object,System.EventArgs)">
            <summary>
            Removes this layer from its parent list
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DotSpatial.Symbology.Layer.OnLayerSelected(DotSpatial.Symbology.ILayer,System.Boolean)">
            <summary>
            Fires the LayerSelected event
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.Layer.OnFinishedLoading">
            <summary>
            Fires the OnFinishedLoading event.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.Layer.OnExportData">
            <summary>
            Occurs when instructions are being sent for this layer to export data.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.Layer.OnCopy(DotSpatial.Symbology.Descriptor)">
            <summary>
            special treatment for event handlers during a copy event
            </summary>
            <param name="copy"></param>
        </member>
        <member name="M:DotSpatial.Symbology.Layer.OpenFile(System.String)">
            <summary>
            Opens a fileName using the default layer provider and returns a new layer.  The layer will not automatically have a container or be added to a map.
            </summary>
            <param name="fileName">The string fileName of the layer to open</param>
            <returns>An ILayer interface</returns>
        </member>
        <member name="M:DotSpatial.Symbology.Layer.OpenFile(System.String,DotSpatial.Data.IProgressHandler)">
            <summary>
            Opens a fileName using the default layer provider and returns a new layer.  The layer will not automatically have a container or be added to a map.
            </summary>
            <param name="fileName">The string fileName of the layer to open</param>
            <param name="progressHandler">An IProgresshandler that overrides the Default Layer Manager's progress handler</param>
            <returns>An ILayer interface with the new layer.</returns>
        </member>
        <member name="M:DotSpatial.Symbology.Layer.OpenFile(System.String,System.Collections.Generic.ICollection{DotSpatial.Symbology.ILayer})">
            <summary>
            Opens a new layer and automatically adds it to the specified container.
            </summary>
            <param name="fileName">A String fileName to attempt to open.</param>
            <param name="container">The container (usually a LayerCollection) to add to</param>
            <returns>The layer after it has been created and added to the container</returns>
        </member>
        <member name="M:DotSpatial.Symbology.Layer.OpenLayer(System.String,System.Boolean,System.Collections.Generic.ICollection{DotSpatial.Symbology.ILayer},DotSpatial.Data.IProgressHandler)">
            <summary>
            Attempts to call the open fileName method for any ILayerProvider plugin
            that matches the extension on the string.
            </summary>
            <param name="fileName">A String fileName to attempt to open.</param>
            <param name="inRam">A boolean value that if true will attempt to force a load of the data into memory.  This value overrides the property on this LayerManager.</param>
            <param name="container">A container to open this layer in</param>
            <param name="progressHandler">Specifies the progressHandler to receive progress messages.  This value overrides the property on this LayerManager.</param>
            <returns>An ILayer</returns>
        </member>
        <member name="M:DotSpatial.Symbology.Layer.ClearSelection(DotSpatial.Topology.IEnvelope@)">
            <summary>
            This is overriden in sub-classes
            </summary>
            <param name="affectedArea"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.Layer.Select(DotSpatial.Topology.IEnvelope,DotSpatial.Topology.IEnvelope,DotSpatial.Symbology.SelectionMode,DotSpatial.Topology.IEnvelope@)">
            <summary>
            This is overriden in sub-classes
            </summary>
            <param name="tolerant">The geographic envelope in cases like cliking near points where tolerance is allowed</param>
            <param name="strict">The geographic region when working with absolutes, without a tolerance</param>
            <param name="mode"></param>
            <param name="affectedArea"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.Layer.InvertSelection(DotSpatial.Topology.IEnvelope,DotSpatial.Topology.IEnvelope,DotSpatial.Symbology.SelectionMode,DotSpatial.Topology.IEnvelope@)">
            <summary>
            This is overriden in sub-classes
            </summary>
            <param name="tolerant">The geographic envelope in cases like cliking near points where tolerance is allowed</param>
            <param name="strict">The geographic region when working with absolutes, without a tolerance</param>
            <param name="mode"></param>
            <param name="affectedArea"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.Layer.UnSelect(DotSpatial.Topology.IEnvelope,DotSpatial.Topology.IEnvelope,DotSpatial.Symbology.SelectionMode,DotSpatial.Topology.IEnvelope@)">
            <summary>
            This is overriden in sub-classes
            </summary>
            <param name="tolerant">The geographic envelope in cases like cliking near points where tolerance is allowed</param>
            <param name="strict">The geographic region when working with absolutes, without a tolerance</param>
            <param name="mode"></param>
            <param name="affectedArea"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.Layer.Dispose">
            <summary>
            Disposes the memory objects in this layer.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.Layer.LockDispose">
            <summary>
            Locks dispose.  This typically adds one instance of an internal reference counter.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.Layer.UnlockDispose">
            <summary>
            Unlocks dispose.  This typically removes one instance of an internal reference counter.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.Layer.Reproject(DotSpatial.Projections.ProjectionInfo)">
            <summary>
            Reprojects the dataset for this layer.
            </summary>
            <param name="targetProjection">The target projection to use.</param>
        </member>
        <member name="M:DotSpatial.Symbology.Layer.OnSelectionChanged">
            <summary>
            Fires the SelectionChanged event
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.Layer.Finalize">
            <summary>
            Finalizes an instance of the Layer class.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.Layer.Dispose(System.Boolean)">
            <summary>
            This allows overriding layers to handle any memory cleanup.
            </summary>
            <param name="disposeManagedResources">True if managed resources should be set to null.</param>
        </member>
        <member name="E:DotSpatial.Symbology.Layer.LayerSelected">
            <summary>
            Occurs if this layer was selected
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.Layer.ZoomToLayer">
            <summary>
            Occurs if the maps should zoom to this layer.
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.Layer.ShowProperties">
            <summary>
            Occurs before the properties are actually shown, also allowing the event to be handled.
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.Layer.FinishedLoading">
            <summary>
            Occurs when all aspects of the layer finish loading.
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.Layer.SelectionChanged">
            <summary>
            Occurs after the selection is changed
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.Layer.DataSet">
            <summary>
            Gets or sets the internal data set.  This can be null, as in the cases of groups or map-frames.
            Copying a layer should not create a duplicate of the dataset, but rather it should point to the
            original dataset.  The ShallowCopy attribute is used so even though the DataSet itself may be cloneable,
            cloning a layer will treat the dataset like a shallow copy.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.Layer.DynamicVisibilityWidth">
            <summary>
            Dynamic visibility represents layers that only appear when you zoom in close enough.
            This value represents the geographic width where that happens.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.Layer.DynamicVisibilityMode">
            <summary>
            This controls whether the layer is visible when zoomed in closer than the dynamic
            visibility width or only when further away from the dynamic visibility width
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.Layer.InvalidRegion">
            <summary>
            Gets the currently invalidated region.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.Layer.MapFrame">
            <summary>
            Gets the map frame of the parent LayerCollection.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.Layer.ProgressHandler">
            <summary>
            Gets or sets the ProgressHandler for this layer.  Setting this overrides the default
            behavior which is to use the
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.Layer.UseDynamicVisibility">
            <summary>
            Gets or sets a boolean indicating whether to allow the dynamic visibility
            envelope to control visibility.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.Layer.IsSelected">
            <inheritdoc />
        </member>
        <member name="P:DotSpatial.Symbology.Layer.PropertyDialogProvider">
            <summary>
            Layers launch a "Property Grid" by default.  However, this can be overridden with a different UIEditor by this
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.Layer.ProgressMeter">
            <summary>
            Gets or sets the progress meter being used internally by layer classes.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.Layer.IsDisposed">
            <summary>
            Gets or sets a boolean indicating whether the memory objects have already been disposed of.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.Layer.SelectionEnabled">
            <summary>
            Gets or sets the boolean that controls whether or not items from the layer can be selected
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.Layer.IsDisposeLocked">
            <summary>
            Gets a value indicating whether an existing reference is requesting that the object is not disposed of.
            Automatic disposal, as is the case when a layer is removed from the map, will not take place until
            all the locks on dispose have been removed.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.Layer.CanReproject">
            <summary>
            Gets a Boolean indicating if this layer can be reprojected.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.Layer.Projection">
            <summary>
            Gets the or sets the projection information for the dataset of this layer.
            This only defines the projection information and does not reproject the dataset or the layer.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.Layer.ProjectionString">
            <summary>
            Gets or sets the unmodified projection string that can be used regardless of whether the
            DotSpatial.Projection module is available. This string can be in the Proj4string or in the
            EsriString format. Setting the Projection string only defines projection information.
            Call the Reproject() method to actually reproject the dataset and layer.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.ITiledImageLayer">
            <summary>
            ITiledImageLayer
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ITiledImageLayer.DataSet">
            <summary>
            Gets or sets the TiledImage that supports the tile data for this image.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.TiledImageLayer.#ctor(DotSpatial.Data.ITiledImage)">
            <summary>
            Creates a new instance of TiledImageLayer
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.TiledImageLayer.Extent">
            <summary>
            The bounding envelope of the image layer
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.TiledImageLayer.DataSet">
            <summary>
            The tiled image dataset
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.EnvelopeArgs">
            <summary>
            EnvelopeArgs
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.EnvelopeArgs.#ctor(DotSpatial.Topology.IEnvelope)">
            <summary>
            Creates a new instance of EnvelopeArgs
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.EnvelopeArgs.Envelope">
            <summary>
            Gets the envelope specific to this event.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.DrawWindowArgs">
            <summary>
            The main difference here is that tests against the DrawWindow happen before the nested Draw2D methods.
            The DrawWindow is editable at this stage, but will become read-only during drawing.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.DrawWindowArgs.#ctor(System.Drawing.Graphics,DotSpatial.Symbology.DrawWindow)">
            <summary>
            Creates a new instance of DrawArgs
            </summary>
            <param name="inGraphics">A System.Windows.Drawing.Graphics object</param>
            <param name="inDrawWindow">A DotSpatial.Drawing.DrawWindow to draw to</param>
        </member>
        <member name="P:DotSpatial.Symbology.DrawWindowArgs.Graphics">
            <summary>
            Gets the Graphics device to draw to
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.DrawWindowArgs.DrawWindow">
            <summary>
            Gets or sets the geographic extent for the drawing operation
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.LabelLayerEventArgs">
            <summary>
            An EventArgs specifically tailored to LabelLayerEventArgs.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LabelLayerEventArgs.#ctor(DotSpatial.Symbology.ILabelLayer)">
            <summary>
            Initializes a new instance of the LabelLayerEventArgs class.
            </summary>
            <param name="labelLayer">The ILabelLayer that is involved in this event.</param>
        </member>
        <member name="P:DotSpatial.Symbology.LabelLayerEventArgs.LabelLayer">
            <summary>
            Gets the LabelLayer associated with this event.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.IStroke">
            <summary>
            IStroke
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.IStroke.DrawPath(System.Drawing.Graphics,System.Drawing.Drawing2D.GraphicsPath,System.Double)">
            <summary>
            This is an optional expression that allows drawing to the specified GraphicsPath.
            Overriding this allows for unconventional behavior to be included, such as
            specifying marker decorations, rather than simply returning a pen.  A pen
            is also returned publicly for convenience.
            </summary>
            <param name="g">The Graphics device to draw to</param>
            <param name="path">the GraphicsPath to draw</param>
            <param name="scaleWidth">This is 1 for symbolic drawing, but could be
            any number for geographic drawing.</param>
        </member>
        <member name="M:DotSpatial.Symbology.IStroke.ToPen(System.Double)">
            <summary>
            Casts this stroke to the appropriate pen
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.IStroke.GetColor">
            <summary>
            Gets a color to represent this line.  If the stroke doesn't work as a color,
            then this color will be gray.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.IStroke.SetColor(System.Drawing.Color)">
            <summary>
            Sets the color of this stroke to the specified color if possible.
            </summary>
            <param name="color">The color to assign to this color.</param>
        </member>
        <member name="P:DotSpatial.Symbology.IStroke.StrokeStyle">
            <summary>
            Gets the stroke style for this stroke
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.CartographicStroke">
            <summary>
            CartographicStroke
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.SimpleStroke">
            <summary>
            SimpleStroke
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.Stroke">
             <summary>
             Because we plan on making these XML serializable, the stroke allows us to open from
             a serialized situation without having to know in advance what kind of stroke we
             actually have.  The main idea is to allow something like:
            
             Stroke myStroke = new Stroke();
             myStroke.FromXml(myStream);
             Pen p = myStroke.ToPen();
            
             This allows loading, saving and creating pens from the sub-types without ever
             knowing exactly what they are.  All the basic subtypes can be obtained simply
             by casting this stroke into the appropriate interface.
             </summary>
        </member>
        <member name="M:DotSpatial.Symbology.Stroke.GetColor">
            <summary>
            Gets a color to represent this line.  If the stroke doesn't work as a color,
            then this color will be gray.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.Stroke.SetColor(System.Drawing.Color)">
            <summary>
            Sets the color of this stroke to the specified color if possible.
            </summary>
            <param name="color">The color to assign to this color.</param>
        </member>
        <member name="M:DotSpatial.Symbology.Stroke.DrawPath(System.Drawing.Graphics,System.Drawing.Drawing2D.GraphicsPath,System.Double)">
            <summary>
            This is an optional expression that allows drawing to the specified GraphicsPath.
            Overriding this allows for unconventional behavior to be included, such as
            specifying marker decorations, rather than simply returning a pen.  A pen
            is also returned publicly for convenience.
            </summary>
            <param name="g">The Graphics device to draw to</param>
            <param name="path">the GraphicsPath to draw</param>
            <param name="scaleWidth">This is 1 for symbolic drawing, but could be
            any number for geographic drawing.</param>
        </member>
        <member name="M:DotSpatial.Symbology.Stroke.ToPen(System.Double)">
            <summary>
            Uses the properties specified in this class to generate a pen.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.Stroke.CreateNew(DotSpatial.Symbology.StrokeStyle)">
            <summary>
            Defines this stroke as a new kind of stroke.
            </summary>
            <param name="style"></param>
        </member>
        <member name="P:DotSpatial.Symbology.Stroke.StrokeStyle">
            <summary>
            Gets the stroke style of the inner stroke
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.ISimpleStroke">
            <summary>
            ISimpleStroke
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ISimpleStroke.Color">
            <summary>
            Gets or sets the color for this drawing layer
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ISimpleStroke.DashStyle">
            <summary>
            Gets or sets the DashStyle for this stroke.  (Custom is just solid for simple strokes)
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ISimpleStroke.Opacity">
            <summary>
            gets or sets the opacity of the color.  1 is fully opaque while 0 is fully transparent.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ISimpleStroke.Width">
            <summary>
            Gets or sets the width of this line.  In geographic ScaleMode,
            this width is the actual geographic width of the line.  In Symbolic scale mode
            this is the width of the line in pixels.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.SimpleStroke.#ctor">
            <summary>
            Creates a new instance of SimpleStroke
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.SimpleStroke.#ctor(System.Double)">
            <summary>
            Sets the width of the line as part of the constructor
            </summary>
            <param name="width">The double width of the line to set</param>
        </member>
        <member name="M:DotSpatial.Symbology.SimpleStroke.#ctor(System.Drawing.Color)">
            <summary>
            Creates a new simple stroke with the specified color
            </summary>
            <param name="color">The color to use for the stroke</param>
        </member>
        <member name="M:DotSpatial.Symbology.SimpleStroke.#ctor(System.Double,System.Drawing.Color)">
            <summary>
            Creates a new simple stroke with the specified width and color
            </summary>
            <param name="width"></param>
            <param name="color"></param>
        </member>
        <member name="M:DotSpatial.Symbology.SimpleStroke.GetColor">
            <summary>
            Gets a color to represent this line.  If the stroke doesn't work as a color,
            then this color will be gray.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.SimpleStroke.SetColor(System.Drawing.Color)">
            <summary>
            Sets the color of this stroke to the specified color if possible.
            </summary>
            <param name="color">The color to assign to this color.</param>
        </member>
        <member name="M:DotSpatial.Symbology.SimpleStroke.ToPen(System.Double)">
            <summary>
            Creates a system drawing pen that has all of the symbolic information
            necessary for this stroke.
            </summary>
            <param name="width">The base width.  In symbolic drawing this is 1, but in
            geographic drawing, this will be a number representing the result of a
            transform from projToPixel width.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.SimpleStroke.OnRandomize(System.Random)">
            <summary>
            Handles randomization of simple stroke content
            </summary>
            <param name="generator">The random generator to use for randomizing characteristics.</param>
        </member>
        <member name="P:DotSpatial.Symbology.SimpleStroke.Color">
            <summary>
            Gets or sets the color for this drawing layer
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.SimpleStroke.DashStyle">
            <summary>
            Gets or sets the dash style
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.SimpleStroke.Opacity">
            <summary>
            gets or sets the opacity of the color.  1 is fully opaque while 0 is fully transparent.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.SimpleStroke.Width">
            <summary>
            Gets or sets the width of this line relative to the
            width passed in.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.ICartographicStroke">
            <summary>
            ICartographicStroke
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ICartographicStroke.JoinType">
            <summary>
            Gets or sets the OGC line characteristic that controls how connected segments
            are drawn where they come together.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ICartographicStroke.CompoundArray">
            <summary>
            Gets or sets an array of floating point values ranging from 0 to 1 that
            indicate the start and end point for where the line should draw.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ICartographicStroke.DashCap">
            <summary>
            gets or sets the DashCap for both the start and end caps of the dashes
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ICartographicStroke.DashPattern">
            <summary>
            Gets or sets the DashPattern as an array of floating point values from 0 to 1
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ICartographicStroke.Decorations">
            <summary>
            Gets or sets the line decoration that describes symbols that should
            be drawn along the line as decoration.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ICartographicStroke.EndCap">
            <summary>
            Gets or sets the line cap for both the start and end of the line
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ICartographicStroke.StartCap">
            <summary>
            Gets or sets the line cap for both the start and end of the line
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ICartographicStroke.DashButtons">
            <summary>
            This is a cached version of the horizontal pattern that should appear in the custom dash control.
            This is only used if DashStyle is set to custom, and only controls the pattern control,
            and does not directly affect the drawing pen.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ICartographicStroke.CompoundButtons">
            <summary>
            This is a cached version of the vertical pattern that should appear in the custom dash control.
            This is only used if DashStyle is set to custom, and only controls the pattern control,
            and does not directly affect the drawing pen.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ICartographicStroke.Offset">
            <summary>
            Gets or sets the floating poing offset (in pixels) for the line to be drawn to the left of
            the original line.  (Internally, this will modify the width and compound array for the
            actual pen being used, as Pens do not support an offset property).
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.CartographicStroke.#ctor">
            <summary>
            Creates a new instance of CartographicStroke
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.CartographicStroke.#ctor(System.Drawing.Color)">
            <summary>
            Getnerates a cartographic stroke of the specified color
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:DotSpatial.Symbology.CartographicStroke.ToPen(System.Double)">
             <summary>
             Creates a pen for drawing the non-decorative portion of the line.
             </summary>
            <param name="scaleWidth">The base width in pixels that is equivalent to a width of 1</param>
             <returns>A new Pen</returns>
        </member>
        <member name="M:DotSpatial.Symbology.CartographicStroke.DrawPath(System.Drawing.Graphics,System.Drawing.Drawing2D.GraphicsPath,System.Double)">
            <summary>
            Draws the actual path, overriding the base behavior to include markers.
            </summary>
            <param name="g"></param>
            <param name="path"></param>
            <param name="scaleWidth"></param>
        </member>
        <member name="M:DotSpatial.Symbology.CartographicStroke.OnRandomize(System.Random)">
            <summary>
            Handles the randomization of the cartographic properties of this stroke.
            </summary>
            <param name="generator">The random class that generates the random numbers</param>
        </member>
        <member name="P:DotSpatial.Symbology.CartographicStroke.CompoundArray">
            <summary>
            Gets or sets an array of floating point values ranging from 0 to 1 that
            indicate the start and end point for where the line should draw.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.CartographicStroke.DashCap">
            <summary>
            gets or sets the DashCap for both the start and end caps of the dashes
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.CartographicStroke.DashPattern">
            <summary>
            Gets or sets the DashPattern as an array of floating point values from 0 to 1
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.CartographicStroke.Decorations">
            <summary>
            Gets or sets the line decoration that describes symbols that should
            be drawn along the line as decoration.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.CartographicStroke.EndCap">
            <summary>
            Gets or sets the line cap for both the start and end of the line
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.CartographicStroke.JoinType">
            <summary>
            Gets or sets the OGC line characteristic that controls how connected segments
            are drawn where they come together.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.CartographicStroke.StartCap">
            <summary>
            Gets or sets the line cap for both the start and end of the line
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.CartographicStroke.DashButtons">
            <summary>
            This is a cached version of the horizontal pattern that should appear in the custom dash control.
            This is only used if DashStyle is set to custom, and only controls the pattern control,
            and does not directly affect the drawing pen.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.CartographicStroke.CompoundButtons">
            <summary>
            This is a cached version of the vertical pattern that should appear in the custom dash control.
            This is only used if DashStyle is set to custom, and only controls the pattern control,
            and does not directly affect the drawing pen.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.CartographicStroke.Offset">
            <summary>
            Gets or sets the floating poing offset (in pixels) for the line to be drawn to the left of
            the original line.  (Internally, this will modify the width and compound array for the
            actual pen being used, as Pens do not support an offset property).
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.LineSymbolizerEventArgs">
            <summary>
            LineSymbolizerEventArgs
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.FeatureSymbolizerEventArgs">
            <summary>
            FeatureSymbolizerEventArgs
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureSymbolizerEventArgs.#ctor(DotSpatial.Symbology.IFeatureSymbolizer)">
            <summary>
            Creates a new instance of FeatureSymbolizerEventArgs
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureSymbolizerEventArgs.Symbolizer">
            <summary>
            Gets or sets the feature symbolizer for this event
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LineSymbolizerEventArgs.#ctor(DotSpatial.Symbology.ILineSymbolizer)">
            <summary>
            Creates a new instance of LineSymbolizerEventArgs
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LineSymbolizerEventArgs.Symbolizer">
            <summary>
            Gets or sets the Symbolizer
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.LineScheme">
            <summary>
            PointScheme
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.FeatureScheme">
            <summary>
            FeatureScheme
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.Scheme">
            <summary>
            DrawingScheme
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.Scheme.#ctor">
            <summary>
            Creates a new instance of DrawingScheme
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.Scheme.CreateNewCategory(System.Drawing.Color,System.Double)">
            <summary>
            Creates the category using a random fill color
            </summary>
            <param name="fillColor">The base color to use for creating the category</param>
            <param name="size">For points this is the larger dimension, for lines this is the largest width</param>
            <returns>A new IFeatureCategory that matches the type of this scheme</returns>
        </member>
        <member name="M:DotSpatial.Symbology.Scheme.DrawCategory(System.Int32,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws the regular symbolizer for the specified cateogry to the specified graphics
            surface in the specified bounding rectangle.
            </summary>
            <param name="index">The integer index of the feature to draw.</param>
            <param name="g">The Graphics object to draw to</param>
            <param name="bounds">The rectangular bounds to draw in</param>
        </member>
        <member name="M:DotSpatial.Symbology.Scheme.AddCategory(DotSpatial.Symbology.ICategory)">
            <summary>
            Adds a new scheme, assuming that the new scheme is the correct type.
            </summary>
            <param name="category">The category to add</param>
        </member>
        <member name="M:DotSpatial.Symbology.Scheme.DecreaseCategoryIndex(DotSpatial.Symbology.ICategory)">
            <summary>
            Reduces the index value of the specified category by 1 by
            exchaning it with the category before it.  If there is no
            category before it, then this does nothing.
            </summary>
            <param name="category">The category to decrease the index of</param>
        </member>
        <member name="M:DotSpatial.Symbology.Scheme.RemoveCategory(DotSpatial.Symbology.ICategory)">
            <summary>
            Removes the specified category
            </summary>
            <param name="category">The category to insert</param>
        </member>
        <member name="M:DotSpatial.Symbology.Scheme.InsertCategory(System.Int32,DotSpatial.Symbology.ICategory)">
            <summary>
            Inserts the category at the specified index
            </summary>
            <param name="index">The integer index where the category should be inserted</param>
            <param name="category">The category to insert</param>
        </member>
        <member name="M:DotSpatial.Symbology.Scheme.IncreaseCategoryIndex(DotSpatial.Symbology.ICategory)">
            <summary>
            Re-orders the specified member by attempting to exchange it with the next higher
            index category.  If there is no higher index, this does nothing.
            </summary>
            <param name="category">The category to increase the index of</param>
        </member>
        <member name="M:DotSpatial.Symbology.Scheme.SuspendEvents">
            <summary>
            Suspends the category events
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.Scheme.ResumeEvents">
            <summary>
            Resumes the category events
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.Scheme.ClearCategories">
            <summary>
            Clears the categories
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.Scheme.CreateBreakCategories">
            <summary>
            Generates the break categories for this scheme
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.Scheme.GetSizeSet(System.Int32)">
            <summary>
            THe defaul
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.Scheme.GetColorSet(System.Int32)">
            <summary>
            Creates a list of generated colors according to the convention
            specified in the EditorSettings.
            </summary>
            <param name="count">The integer count of the number of colors to create.</param>
            <returns>The list of colors created.</returns>
        </member>
        <member name="M:DotSpatial.Symbology.Scheme.CreateRandomCategory">
            <summary>
            Uses the settings on this scheme to create a random category.
            </summary>
            <returns>A new ICategory</returns>
        </member>
        <member name="M:DotSpatial.Symbology.Scheme.GetDefaultColors(System.Int32)">
            <summary>
            Creates the colors in the case where the color range controls are not being used.
            This can be overriddend for handling special cases like ponit and line symbolizers
            that should be using the template colors.
            </summary>
            <param name="count">The integer count to use</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.Scheme.CreateUnboundedRampColors(System.Int32)">
            <summary>
            The default behavior for creating ramp colors is to create colors in the mid-range for
            both lightness and saturation, but to have the full range of hue
            </summary>
            <param name="numColors"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.Scheme.CreateRandomColor(System.Random)">
            <summary>
            Creates a random color, but accepts a given random class instead of creating a new one.
            </summary>
            <param name="rnd"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.Scheme.ApplySnapping(DotSpatial.Symbology.ICategory)">
            <summary>
            Applies the snapping rule directly to the categories, based on the most recently
            collected set of values, and the current VectorEditorSettings.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.Scheme.GetEqualBreaks(System.Int32)">
            <summary>
            Uses the currently calculated Values in order to calculate a list of breaks
            that have equal separations.
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.Scheme.ApplyBreakSnapping">
            <summary>
            Applies the snapping type to the given breaks
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.Scheme.NearestValue(System.Double,System.Collections.Generic.List{System.Double})">
            <summary>
            Searches the list and returns the nearest value in the list to the specified value.
            </summary>
            <param name="value"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.Scheme.GetQuantileBreaks(System.Int32)">
            <summary>
            Attempts to create the specified number of breaks with equal numbers of members in each.
            </summary>
            <param name="count">The integer count.</param>
            <returns>A list of breaks.</returns>
        </member>
        <member name="M:DotSpatial.Symbology.Scheme.SetBreakNames(System.Collections.Generic.IList{DotSpatial.Symbology.Scheme.Break})">
            <summary>
            Sets the names for the break categories
            </summary>
            <param name="breaks"></param>
        </member>
        <member name="P:DotSpatial.Symbology.Scheme.EditorSettings">
            <summary>
            Gets or sets the editor settings that control how this scheme operates.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.Scheme.Statistics">
            <summary>
            This is cached until a GetValues call is made, at which time the statistics will
            be re-calculated from the values.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.Scheme.Breaks">
            <summary>
            Gets or sets the list of breaks for this scheme
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.Scheme.Values">
            <summary>
            Gets the current list of values calculated in the case of numeric breaks.
            This includes only members that are not excluded by the exclude expression,
            and have a valid numeric value.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.Scheme.Break">
            <summary>
            Breaks for value ranges
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.Scheme.Break.Maximum">
            <summary>
            A double value for the maximum value for the break
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.Scheme.Break.Name">
            <summary>
            The string name
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.Scheme.Break.#ctor">
            <summary>
             Creates a new instance of a break
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.Scheme.Break.#ctor(System.String)">
            <summary>
            Creates a new instance of a break with a given name
            </summary>
            <param name="name">The string name for the break</param>
        </member>
        <member name="T:DotSpatial.Symbology.IFeatureScheme">
            <summary>
            IFeatureScheme
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.IFeatureScheme.CreateCategories(DotSpatial.Data.IAttributeSource,DotSpatial.Data.ICancelProgressHandler)">
            <summary>
            Creates a list of all 'unique value' categories.  This will use the "VectorEditorSettings"
            to determine how to create the values, so ensure that you update that property first.
            </summary>
            <param name="source">The attribute source that can provide the attribute information.</param>
            <param name="progressHandler">The progress handler for showing progress on what is likely a slow process</param>
        </member>
        <member name="M:DotSpatial.Symbology.IFeatureScheme.CreateCategories(System.Data.DataTable)">
            <summary>
            Creates the categories using the specified data table
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:DotSpatial.Symbology.IFeatureScheme.CreateRandomCategory(System.String)">
            <summary>
            Uses the settings on this scheme to create a random category.
            </summary>
            <returns>A new IFeatureCategory</returns>
            <param name="filterExpression">The filter expression to use</param>
        </member>
        <member name="M:DotSpatial.Symbology.IFeatureScheme.RegenerateColors">
            <summary>
            This keeps the existing categories, but uses the current scheme settings to apply
            a new color to each of the symbols.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.IFeatureScheme.GetCategories">
            <summary>
            When using this scheme to define the symbology, these individual categories will be referenced in order to
            create genuine categories (that will be cached).
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.IFeatureScheme.IsWithinLegendSelection">
            <summary>
            Queries this layer and the entire parental tree up to the map frame to determine if
            this layer is within the selected layers.
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.IFeatureScheme.SelectFeatures">
            <summary>
            Occurs when a category indicates that its filter expression should be used
            to select its members.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IFeatureScheme.EditorSettings">
            <summary>
            Gets or sets the dialog settings
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IFeatureScheme.AppearsInLegend">
            <summary>
            Gets or sets a boolean that indicates whether or not the legend should draw this item as a categorical
            tier in the legend.  If so, it will allow the LegendText to be visible as a kind of group for the
            categories.  If not, the categories will appear directly below the layer.C:\dev\Mapwindow6Dev\DotSpatial\DotSpatial\Drawing\Vectors\Points\PointCategoryCollection.cs
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IFeatureScheme.NumCategories">
            <summary>
            Gets the number of categories of this scheme.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IFeatureScheme.PropertyEditor">
            <summary>
            Gets or sets the UITypeEditor to use for editing this FeatureScheme
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureScheme.#ctor">
            <summary>
            Creates a new instance of FeatureScheme
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureScheme.GetCategories">
            <summary>
            When using this scheme to define the symbology, these individual categories will be referenced in order to
            create genuine categories (that will be cached).
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureScheme.IsWithinLegendSelection">
            <summary>
            Queries this layer and the entire parental tree up to the map frame to determine if
            this layer is within the selected layers.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureScheme.OnCopy(DotSpatial.Symbology.Descriptor)">
            <summary>
            Special handling of not copying the parent during a copy operation
            </summary>
            <param name="copy"></param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureScheme.OnCopyProperties(System.Object)">
            <summary>
            Handles the special case of not copying the parent during an on copy properties operation
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureScheme.OnSetParentItem(DotSpatial.Symbology.ILegendItem)">
            <summary>
            Ensures that the parentage gets set properly in the event that
            this scheme is not appearing in the legend.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureScheme.RegenerateColors">
            <summary>
            This keeps the existing categories, but uses the current scheme settings to apply
            a new color to each of the symbols.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureScheme.CreateCategories(System.Data.DataTable)">
            <summary>
            Creates categories either based on unique values, or classification method.
            If the method is
            </summary>
            <param name="table">The System.DataTable to that has the data values to use</param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureScheme.CreateCategories(DotSpatial.Data.IAttributeSource,DotSpatial.Data.ICancelProgressHandler)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Symbology.FeatureScheme.CreateRandomCategory(System.String)">
            <summary>
            Uses the settings on this scheme to create a random category.
            </summary>
            <returns>A new IFeatureCategory</returns>
            <param name="filterExpression">The filter expression to use</param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureScheme.CreateRandomCategory">
            <summary>
            This simply ensures that we are creating the appropriate empty filter expression version
            of create random category.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureScheme.GetValues(DotSpatial.Data.IAttributeSource,DotSpatial.Data.ICancelProgressHandler)">
            <summary>
            Gets the values from a file based data source rather than an in memory object.
            </summary>
            <param name="source"></param>
            <param name="progressHandler"></param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureScheme.GetValues(System.Data.DataTable)">
            <summary>
            Before attempting to create categories using a color ramp, this must be calculated
            to updated the cache of values that govern statistics and break placement.
            </summary>
            <param name="table">The data Table to use.</param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureScheme.SufficientValues(System.String,DotSpatial.Data.IAttributeSource,System.Int32)">
            <summary>
            Returns
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureScheme.GetUniqueValues(System.String,DotSpatial.Data.IAttributeSource,DotSpatial.Data.ICancelProgressHandler)">
            <summary>
            Gets a list of all unique values of the attribute field.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureScheme.GetUniqueValues(System.String,System.Data.DataTable)">
            <summary>
            Gets a list of all unique values of the attribute field.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureScheme.CheckFieldType(System.String,System.Data.DataTable)">
            <summary>
            This checks the type of the specified field whether it's a string field
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureScheme.CheckFieldType(System.String,DotSpatial.Data.IAttributeSource)">
            <summary>
            This checks the type of the specified field whether it's a string field
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureScheme.OnSelectFeatures(System.Object,DotSpatial.Symbology.ExpressionEventArgs)">
            <summary>
            Instructs the parent layer to select features matching the specified expression.
            </summary>
            <param name="sender">The object sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureScheme.CreateRandomColor">
            <summary>
            Uses the current settings to generate a random color between the start and end color.
            </summary>
            <returns>A Randomly created color that is within the bounds of this scheme.</returns>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureScheme.GetSizeSet(System.Int32)">
            <summary>
            This replaces the constant size calculation with a size
            calculation that is appropriate for features.
            </summary>
            <param name="count">The integer count of the number of sizes to create.</param>
            <returns>A list of double valued sizes.</returns>
        </member>
        <member name="E:DotSpatial.Symbology.FeatureScheme.SelectFeatures">
            <summary>
            Occurs when a category indicates that its filter expression should be used
            to select its members.
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.FeatureScheme.TooManyCategories">
            <summary>
            Occurs when there are more than 1000 unique categories.  If the "Cancel"
            is set to true, then only the first 1000 categories are returned.  Otherwise
            it may allow the application to lock up, but will return all of them.
            If this event is not handled, cancle is assumed to be true.
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.FeatureScheme.NonNumericField">
            <summary>
            Occurs
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureScheme.AppearsInLegend">
            <summary>
            Gets or sets a boolean that indicates whether or not the legend should draw this item as a categorical
            tier in the legend.  If so, it will allow the LegendText to be visible as a kind of group for the
            categories.  If not, the categories will appear directly below the layer.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureScheme.EditorSettings">
            <summary>
            Gets or sets the dialog settings
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureScheme.PropertyEditor">
            <summary>
            Gets or sets the UITypeEditor to use for editing this FeatureScheme
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureScheme.NumCategories">
            <summary>
            Gets the number of categories in this scheme
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureScheme.LegendItems">
            <summary>
            An enumerable of LegendItems allowing the true members to be cycled through.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.ILineScheme">
            <summary>
            IPointScheme
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILineScheme.Categories">
            <summary>
            Gets the list of scheme categories belonging to this scheme.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LineScheme.#ctor">
            <summary>
            Creates a new instance of PointScheme with no categories added to the list yet.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LineScheme.DrawCategory(System.Int32,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws the regular symbolizer for the specified cateogry to the specified graphics
            surface in the specified bounding rectangle.
            </summary>
            <param name="index">The integer index of the feature to draw.</param>
            <param name="g">The Graphics object to draw to</param>
            <param name="bounds">The rectangular bounds to draw in</param>
        </member>
        <member name="M:DotSpatial.Symbology.LineScheme.DecreaseCategoryIndex(DotSpatial.Symbology.ICategory)">
            <summary>
            Reduces the index value of the specified category by 1 by
            exchaning it with the category before it.  If there is no
            category before it, then this does nothing.
            </summary>
            <param name="category">The category to decrease the index of</param>
        </member>
        <member name="M:DotSpatial.Symbology.LineScheme.IncreaseCategoryIndex(DotSpatial.Symbology.ICategory)">
            <summary>
            Re-orders the specified member by attempting to exchange it with the next higher
            index category.  If there is no higher index, this does nothing.
            </summary>
            <param name="category">The category to increase the index of</param>
        </member>
        <member name="M:DotSpatial.Symbology.LineScheme.AddCategory(DotSpatial.Symbology.ICategory)">
            <summary>
            Adds a new scheme, assuming that the new scheme is the correct type.
            </summary>
            <param name="category">The category to add</param>
        </member>
        <member name="M:DotSpatial.Symbology.LineScheme.RemoveCategory(DotSpatial.Symbology.ICategory)">
            <summary>
            Removes the specified category
            </summary>
            <param name="category">The category to insert</param>
        </member>
        <member name="M:DotSpatial.Symbology.LineScheme.InsertCategory(System.Int32,DotSpatial.Symbology.ICategory)">
            <summary>
            Inserts the category at the specified index
            </summary>
            <param name="index">The integer index where the category should be inserted</param>
            <param name="category">The category to insert</param>
        </member>
        <member name="M:DotSpatial.Symbology.LineScheme.SuspendEvents">
            <summary>
            Suspends the category events
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LineScheme.ResumeEvents">
            <summary>
            Resumes the category events
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LineScheme.ClearCategories">
            <summary>
            Clears the categories
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LineScheme.CreateRandomCategory(System.String)">
            <summary>
            Uses the settings on this scheme to create a random category.
            </summary>
            <returns>A new IFeatureCategory</returns>
        </member>
        <member name="M:DotSpatial.Symbology.LineScheme.GetDefaultColors(System.Int32)">
            <summary>
            If possible, use the template to control the colors.  Otherwise, just use the default
            settings for creating "unbounded" colors.
            </summary>
            <param name="count">The integer count.</param>
            <returns>The List of colors</returns>
        </member>
        <member name="M:DotSpatial.Symbology.LineScheme.GenerateUniqueColors(DotSpatial.Data.IFeatureSet,System.String)">
            <summary>
            Calculates the unique colors as a scheme
            </summary>
            <param name="fs">The featureset with the data Table definition</param>
            <param name="uniqueField">The unique field</param>
        </member>
        <member name="M:DotSpatial.Symbology.LineScheme.GetCategories">
            <summary>
            Returns the line scheme as a feature categories collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.LineScheme.CreateNewCategory(System.Drawing.Color,System.Double)">
            <summary>
            Creates the category using a random fill color
            </summary>
            <param name="fillColor">The base color to use for creating the category</param>
            <param name="size">Creates the size</param>
            <returns>A new polygon category</returns>
        </member>
        <member name="M:DotSpatial.Symbology.LineScheme.OnExcludeCategories(DotSpatial.Symbology.LineCategoryCollection)">
            <summary>
            Handle the event un-wiring and scheme update for the old categories
            </summary>
            <param name="categories">The category collection to update.</param>
        </member>
        <member name="M:DotSpatial.Symbology.LineScheme.OnIncludeCategories(DotSpatial.Symbology.LineCategoryCollection)">
            <summary>
            Handle the event wiring and scheme update for the new categories.
            </summary>
            <param name="categories">The category collection to update</param>
        </member>
        <member name="P:DotSpatial.Symbology.LineScheme.Categories">
            <summary>
            Gets or sets the symbolic categories as a valid IPointSchemeCategoryCollection.
            </summary>
            <remarks>
            [TypeConverter(typeof(CategoryCollectionConverter))]
            </remarks>
        </member>
        <member name="P:DotSpatial.Symbology.LineScheme.NumCategories">
            <summary>
            Gets the number of categories in this scheme
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.RasterSymbolizer">
            <summary>
            RasterSymbolizer
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.IRasterSymbolizer">
            <summary>
            IRasterSymbolizer
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.IRasterSymbolizer.CreateBitmap">
            <summary>
            Creates a bmp from the in-memory portion of the raster.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.IRasterSymbolizer.CreateHillShade">
            <summary>
            Causes the raster to calculate a hillshade based on this symbolizer
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.IRasterSymbolizer.CreateHillShade(DotSpatial.Data.IProgressHandler)">
            <summary>
            Causes the raster to calculate a hillshade using the specified progress handler
            </summary>
            <param name="progressHandler">The progress handler to use</param>
        </member>
        <member name="M:DotSpatial.Symbology.IRasterSymbolizer.GetColor(System.Double)">
            <summary>
            Gets the color for a specific row and column.  This does not include any hillshade information.
            </summary>
            <param name="value">The double value to find in the colorbreaks.</param>
            <returns>A Color</returns>
        </member>
        <member name="M:DotSpatial.Symbology.IRasterSymbolizer.PaintShadingToBitmap(System.Drawing.Bitmap,DotSpatial.Data.IProgressHandler)">
            <summary>
            Creates a bitmap based on the specified RasterSymbolizer
            </summary>
            <param name="bitmap"> the bitmap to paint to</param>
            <param name="progressHandler">The progress handler</param>
        </member>
        <member name="M:DotSpatial.Symbology.IRasterSymbolizer.Refresh">
            <summary>
            Sends a symbology updated event, which should cause the layer to be refreshed.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.IRasterSymbolizer.Validate">
            <summary>
            Indicates that the bitmap has been updated and that the colorscheme is currently
            synchronized with the characteristics of this symbolizer.  This also fires the
            ColorSchemeChanged event.
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.IRasterSymbolizer.ColorSchemeUpdated">
            <summary>
            This event occurs after a new bitmap has been created to act as a texture.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IRasterSymbolizer.DrapeVectorLayers">
            <summary>
            If this value is true, whenever a texture is created, the vector layers are drawn onto the texture.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IRasterSymbolizer.EditorSettings">
            <summary>
            Gets or sets the editor settings class to help setup up the symbology controls appropriately.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IRasterSymbolizer.ElevationFactor">
            <summary>
            This is kept separate from extrusion to reduce confusion.  This is a conversion factor that will
            convert the units of elevation into the same units that the latitude and longitude are stored in.
            To convert feet to decimal degrees is around a factor of .00000274.  This is used only in the
            3D-context and does not affect ShadedRelief.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IRasterSymbolizer.Extrusion">
            <summary>
            A float value expression that modifies the "height" of the apparent shaded relief.  A value
            of 1 should show the mountains at their true elevations, presuming the ElevationFactor is
            correct.  A value of 0 would be totally flat, while 2 would be twice the value.  This controls
            the 3D effects and has nothing to do with the creation of shaded releif on the texture.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IRasterSymbolizer.HillShade">
            <summary>
            Gets the calculated hillshade map, or re-calculates it if something has changed
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IRasterSymbolizer.ImageOutline">
            <summary>
            Gets or sets the symbol characteristics for the border of this raster
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IRasterSymbolizer.IsElevation">
            <summary>
            Gets or sets a boolean that determines whether to treat the values as if they are elevation
            in the 3-D context.  If this is true, then it will automatically use this grid for
            calculating elevation values.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IRasterSymbolizer.IsVisible">
            <summary>
            Gets or sets whether or not this raster should render itself
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IRasterSymbolizer.IsSmoothed">
            <summary>
            Gets or sets whether or not htis raster should be anti-alliased
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IRasterSymbolizer.NoDataColor">
            <summary>
            Gets or sets the color to use if the value of the cell corresponds to a No-Data value
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IRasterSymbolizer.Opacity">
            <summary>
            Gets or sets a float value from 0 to 1, where 1 is fully opaque while 0 is fully transparent
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IRasterSymbolizer.Raster">
            <summary>
            Gets or sets the raster that should provide elevation values, but only if "IsElevation" is false.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IRasterSymbolizer.MeshHasChanged">
            <summary>
            This should be set to true if the elevation values have changed
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IRasterSymbolizer.ParentLayer">
            <summary>
            Gets or sets the parent layer.  This is not always used, but can be useful for symbolic editing
            that may require a bitmap to be drawn with draped vector layers.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IRasterSymbolizer.Scheme">
            <summary>
            Gets or sets the coloring scheme for the raster.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IRasterSymbolizer.ShadedRelief">
            <summary>
            Gets or sets the characteristics of the shaded relief.  This only affects the coloring,
            and will not control any 3-D properties.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IRasterSymbolizer.ColorSchemeHasUpdated">
            <summary>
            This should be set to true if the texture needs to be reloaded from a file
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.RasterSymbolizer.#ctor(DotSpatial.Symbology.IRasterLayer)">
            <summary>
            Creates a new instance of the raster symbolizer
            </summary>
            <param name="layer">The parent item</param>
        </member>
        <member name="M:DotSpatial.Symbology.RasterSymbolizer.#ctor">
            <summary>
            Creates a new instance of Raste
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.RasterSymbolizer.CreateHillShade">
            <summary>
            Causes the raster to calculate a hillshade based on this symbolizer
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.RasterSymbolizer.CreateHillShade(DotSpatial.Data.IProgressHandler)">
            <summary>
            Causes the raster to calculate a hillshade using the specified progress handler
            </summary>
            <param name="progressHandler">The progress handler to use</param>
        </member>
        <member name="M:DotSpatial.Symbology.RasterSymbolizer.CreateBitmap">
            <summary>
            Creates a bmp from the in-memory portion of the raster.  This will be stored as a
            fileName with the same name as the current raster, but ends in bmp.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.RasterSymbolizer.GetColor(System.Double)">
            <summary>
            Gets the color information for a specific value.  This does not include any hillshade information.
            </summary>
            <param name="value">Specifies the value to obtain a color for.</param>
            <returns>A Color</returns>
        </member>
        <member name="M:DotSpatial.Symbology.RasterSymbolizer.Refresh">
            <summary>
            Sends a symbology updated event, which should cause the layer to be refreshed.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.RasterSymbolizer.PaintShadingToBitmap(System.Drawing.Bitmap,DotSpatial.Data.IProgressHandler)">
            <summary>
            Creates a bitmap based on the specified RasterSymbolizer
            </summary>
            <param name="bitmap"> the bitmap to paint to</param>
            <param name="progressHandler">The progress handler</param>
        </member>
        <member name="M:DotSpatial.Symbology.RasterSymbolizer.Validate">
            <summary>
            Indicates that the bitmap has been updated and that the colorscheme is currently
            synchronized with the characteristics of this symbolizer.  This also fires the
            ColorSchemeChanged event.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.RasterSymbolizer.OnColorSchemeUpdated">
            <summary>
            Fires the SymbologyUpdated event, which should happen after symbology choices are finalized,
            a new texture has been created and we are ready for an update.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.RasterSymbolizer.OnColorSchemeChanged">
            <summary>
            Fires the on color scheme changed event
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.RasterSymbolizer.OnSymbologyChange">
            <summary>
            Fires the SymbologyChanged event
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.RasterSymbolizer.ColorSchemeUpdated">
            <summary>
            This event occurs after a new bitmap has been created to act as a texture.
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.RasterSymbolizer.SymbologyChanged">
            <summary>
            Occurs when the symbology has been changed
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.RasterSymbolizer.ColorSchemeChanged">
            <summary>
            Occurs if any of the properties that would contribute to bitmap construction have changed
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.RasterSymbolizer.ColorSchemeHasUpdated">
            <summary>
            This should be set to true if the texture needs to be reloaded from a file
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.RasterSymbolizer.MeshHasChanged">
            <summary>
            This should be set to true if the elevation values have changed
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.RasterSymbolizer.ColorSchemeHasChanged">
            <summary>
            Gets or sets a boolean that indicates if the color has changed.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.RasterSymbolizer.DrapeVectorLayers">
            <summary>
            If this value is true, whenever a texture is created, the vector layers are drawn onto the texture.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.RasterSymbolizer.EditorSettings">
            <summary>
            Gets or sets the editor settings class to help setup up the symbology controls appropriately.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.RasterSymbolizer.ElevationFactor">
            <summary>
            This is kept separate from extrusion to reduce confusion.  This is a conversion factor that will
            convert the units of elevation into the same units that the latitude and longitude are stored in.
            To convert feet to decimal degrees is around a factor of .00000274.  This is used only in the
            3D-context and does not affect ShadedRelief.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.RasterSymbolizer.Extrusion">
            <summary>
            A float value expression that modifies the "height" of the apparent shaded relief.  A value
            of 1 should show the mountains at their true elevations, presuming the ElevationFactor is
            correct.  A value of 0 would be totally flat, while 2 would be twice the value.  This controls
            the 3D effects and has nothing to do with the creation of shaded releif on the texture.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.RasterSymbolizer.HillShade">
            <summary>
            Gets the calculated hillshade map, or re-calculates it if something has changed
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.RasterSymbolizer.ImageOutline">
            <summary>
            Gets or sets the symbol characteristics for the border of this raster
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.RasterSymbolizer.IsElevation">
            <summary>
            Gets or sets a boolean that determines whether to treat the values as if they are elevation
            in the 3-D context.  If this is true, then it will automatically use this grid for
            calculating elevation values.  This does not affect ShadedRelief texture creation.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.RasterSymbolizer.IsVisible">
            <summary>
            Gets or sets whether or not this raster should render itself
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.RasterSymbolizer.NoDataColor">
            <summary>
            Gets or sets the color to use if the value of the cell corresponds to a No-Data value
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.RasterSymbolizer.Raster">
            <summary>
            Gets or sets the raster that should provide elevation values, but only if "IsElevation" is false.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.RasterSymbolizer.ParentLayer">
            <summary>
            Gets or sets the parent layer.  This is not always used, but can be useful for symbolic editing
            that may require a bitmap to be drawn with draped vector layers.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.RasterSymbolizer.Opacity">
            <summary>
            Gets or sets a float value from 0 to 1, where 1 is fully opaque while 0 is fully transparent
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.RasterSymbolizer.ShadedRelief">
            <summary>
            Gets or sets the characteristics of the shaded relief.  This is specifically used
            to control HillShade characteristics of the BitMap texture creation.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.RasterSymbolizer.IsSmoothed">
            <summary>
            Gets or sets whether or not htis raster should be anti-alliased
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.RasterSymbolizer.Scheme">
            <summary>
            Gets or sets the raster coloring scheme.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.IColorCategory">
            <summary>
            IColorCategory
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.ICategory">
            <summary>
            ICategory
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ICategory.ApplyMinMax(DotSpatial.Symbology.EditorSettings)">
            <summary>
            Applies the minimum and maximum in order to create the filter expression.  This will also
            count the members that match the specified criteria.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ICategory.ApplySnapping(DotSpatial.Symbology.IntervalSnapMethod,System.Int32,System.Collections.Generic.List{System.Double})">
            <summary>
            Applies the snapping rule directly to the categories, instead of the breaks.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ICategory.Contains(System.Double)">
            <summary>
            For quantitative categories, this simply tests to see if the specified value can be
            found between the minimum and maximum range values.
            </summary>
            <param name="value">The double value to check against the minimum and maximum values.</param>
            <returns>Boolean, true if the value is inside the range.</returns>
        </member>
        <member name="M:DotSpatial.Symbology.ICategory.ToString(DotSpatial.Symbology.IntervalSnapMethod,System.Int32)">
            <summary>
             Returns this Number as a string.
            </summary>
            <param name="method">Specifies how the numbers are modified so that the numeric text can be cleaned up.</param>
            <param name="digits">An integer clarifying digits for rounding or significant figure situations.</param>
            <returns>A string with the formatted number.</returns>
        </member>
        <member name="P:DotSpatial.Symbology.ICategory.Minimum">
            <summary>
            Minimum this is a convenient caching tool only, and doesn't control the filter expression at all.
            Use ApplyMinMax after setting this to update the filter expression.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ICategory.Maximum">
            <summary>
            Maximum this is a convenient caching tool only, and doesn't control the filter expression at all.
            Use ApplyMinMax after setting this to update the filter expression.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ICategory.Range">
            <summary>
            Gets or sets the value range, which overrides any existing min/max setup.
            This is only valid for numeric values that can be expressed as doubles.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ICategory.Status">
            <summary>
            Gets or sets a status message for this string.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ICategory.Tag">
            <summary>
            This is not used by DotSpatial, but is provided for convenient linking for this object
            in plugins or other applications.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.IColorCategory.CalculateColor(System.Double)">
            <summary>
            This is primarilly used in the BiValue situation where a color needs to be generated
            somewhere between the startvalue and the endvalue.
            </summary>
            <param name="value">The integer value to be converted into a color from the range on this colorbreak</param>
            <returns>A color that is selected from the range values.</returns>
        </member>
        <member name="P:DotSpatial.Symbology.IColorCategory.GradientModel">
            <summary>
            Gets or sets how the color changes are distributed across the
            BiValued range.  If IsBiValue is false, this does nothing.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IColorCategory.HighColor">
            <summary>
            Gets or sets the second of two colors to be used.
            This is only used for BiValued breaks.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IColorCategory.IsBiValue">
            <summary>
            This not only indicates that there are two values,
            but that the values are also different from one another.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IColorCategory.LowColor">
            <summary>
            Gets or sets the color to be used for this break.  For
            BiValued breaks, this only sets one of the colors.  If
            this is higher than the high value, both are set to this.
            If this equals the high value, IsBiValue will be false.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.PropertyInfoExt">
            <summary>
            PropertyInfoEM
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.PropertyInfoExt.GetFirst(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},System.String)">
            <summary>
            Gets the first member in the enumerable collection of property info with the specified name.
            </summary>
            <param name="self"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.PropertyInfoExt.Contains(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},System.String)">
            <summary>
            Determines whether there is a member with the specified name
            </summary>
            <param name="self"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:DotSpatial.Symbology.LegendType">
            <summary>
            LegendType
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.LegendType.Scheme">
            <summary>
            Schemes can contain symbols and be contained by layers
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.LegendType.Custom">
            <summary>
            The ability to contain another layer type is controlled by CanReceiveItem instead
            of being specified by these pre-defined criteria.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.LegendType.Group">
            <summary>
            Groups can be contained by groups, and contain groups or layers, but not categories or symbols
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.LegendType.Layer">
            <summary>
            Layers can contain symbols or categories, but not other layers or groups
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.LegendType.Symbol">
            <summary>
            Symbols can't contain anything, but can be contained by layers and categories
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.LayerEventList`1">
            <summary>
            This extends the ChangeEventList by providing methods that allow access by an object Key, and will pass
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.ILayerEventList`1">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.ILayerEvents">
            <summary>
            ILayerEvents
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ILayerEvents.SelectLayer(System.Int32)">
            <summary>
            Selects the layer to use for tools or operations that act on a single layer.
            </summary>
            <param name="index">The integer index indicating the layer to select in this collection.</param>
        </member>
        <member name="E:DotSpatial.Symbology.ILayerEvents.LayerAdded">
            <summary>
            Occurs when a layer is added to this item.
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.ILayerEvents.LayerRemoved">
            <summary>
            Occurs when a layer is removed from this item.
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.ILayerEvents.LayerVisibleChanged">
            <summary>
            Occurs when one of the layers in this collection changes visibility.
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.ILayerEvents.ZoomToLayer">
            <summary>
            Zooms to a layer
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.ILayerEvents.LayerSelected">
            <summary>
            Occurs immediately after the layer is selected.
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.ILayerEvents.SelectionChanging">
            <summary>
            Occurs when the selection on a feature layer changes.
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.ILayerEvents.SelectionChanged">
            <summary>
            Occurs after the selection has been updated for all the layers.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LayerEventList`1.SelectLayer(System.Int32)">
            <summary>
            This selects the layer with the specified integer index
            </summary>
            <param name="index">THe zero based integer index</param>
        </member>
        <member name="M:DotSpatial.Symbology.LayerEventList`1.Dispose">
            <summary>
            Standard Dispose implementation since layers are now disposable.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LayerEventList`1.LockDispose">
            <summary>
            Adds one request to prevent disposal of this object and its children.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LayerEventList`1.UnlockDispose">
            <summary>
            Removes one request to prevent disposal of this object and its children.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LayerEventList`1.OnInclude(`0)">
            <summary>
            Extends the event listeners to include events like ZoomToLayer and VisibleChanged
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:DotSpatial.Symbology.LayerEventList`1.SelectableSelectionChanged(System.Object,System.EventArgs)">
             <summary>
            
             </summary>
             <param name="sender"></param>
             <param name="e"></param>
        </member>
        <member name="M:DotSpatial.Symbology.LayerEventList`1.OnSelectionChanged">
            <summary>
            Occurs when the selection is changed
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LayerEventList`1.OnIncludeComplete(`0)">
            <summary>
            Ensures that we re-draw the content when inserting new layers
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:DotSpatial.Symbology.LayerEventList`1.OnExclude(`0)">
            <summary>
            Removes the extended event listeners once a layer is removed from this list.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:DotSpatial.Symbology.LayerEventList`1.OnLayerRemoved(`0)">
            <summary>
            Fires the LayerRemoved event
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:DotSpatial.Symbology.LayerEventList`1.OnLayerSelected(System.Int32)">
            <summary>
            Handles the default selection behavior and fires the LayerSelected event.
            </summary>
            <param name="index">The integer index of the layer being selected</param>
        </member>
        <member name="M:DotSpatial.Symbology.LayerEventList`1.OnLayerSelected(DotSpatial.Symbology.ILayer,System.Boolean)">
            <summary>
            Fires the LayerSelected event and adjusts the selected state of the layer.
            </summary>
            <param name="layer">The layer to select</param>
            <param name="selected">Boolean, true if the specified layer is selected</param>
        </member>
        <member name="M:DotSpatial.Symbology.LayerEventList`1.OnListChanged">
            <summary>
            Fires the ItemChanged event and the MembersChanged event and resets any cached lists
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LayerEventList`1.OnZoomToLayer(System.Object,DotSpatial.Symbology.EnvelopeArgs)">
            <summary>
            Fires the ZoomToLayer method when one of the layers fires its ZoomTo event
            </summary>
            <param name="sender">The layer to zoom to</param>
            <param name="e">The extent of the layer</param>
        </member>
        <member name="M:DotSpatial.Symbology.LayerEventList`1.OnLayerAdded(System.Object,DotSpatial.Symbology.LayerEventArgs)">
            <summary>
            Fires the LayerAdded event
            </summary>
            <param name="sender">The layer that was added</param>
            <param name="e">LayerEventArgs</param>
        </member>
        <member name="M:DotSpatial.Symbology.LayerEventList`1.OnResumeEvents">
            <summary>
            This occurs when the Resume events method is fired.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LayerEventList`1.OnSelectionChanging(System.Object,DotSpatial.Symbology.FeatureLayerSelectionEventArgs)">
            <summary>
            Fires the selection changed event
            </summary>
            <param name="sender">the object sender of the event</param>
            <param name="args">The FeatureLayerSelectionEventArgs of the layer</param>
        </member>
        <member name="M:DotSpatial.Symbology.LayerEventList`1.Finalize">
            <summary>
            Finalizes an instance of the LayerEventList class.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LayerEventList`1.Dispose(System.Boolean)">
            <summary>
            Overrides the dispose behavior.  If disposeManagedMemory objects is true, then managed objects
            should be set to null, effectively removing reference counts.  If it is false, then only
            unmanaged memory objects should be removed.
            </summary>
            <param name="disposeManagedMemory">Boolean, true if managed memory objects should be set to null, and
            if the Dispose method should be called on contained objects.</param>
        </member>
        <member name="E:DotSpatial.Symbology.LayerEventList`1.ZoomToLayer">
            <summary>
            Occurs if the maps should zoom to this layer.
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.LayerEventList`1.LayerVisibleChanged">
            <summary>
            Occurs when one of the layers in this collection changes visibility.
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.LayerEventList`1.LayerAdded">
            <summary>
            Occurs when a layer is added to this item.
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.LayerEventList`1.LayerRemoved">
            <summary>
            Occurs when a layer is removed from this item.
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.LayerEventList`1.LayerSelected">
            <summary>
            Occurs immediately after a layer is selected.
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.LayerEventList`1.SelectionChanging">
            <summary>
            Occurs when the selection on a feature layer changes.
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.LayerEventList`1.SelectionChanged">
            <summary>
            Occurs after the selection has changed, and all the layers have had their selection information updated.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LayerEventList`1.SelectedLayer">
            <summary>
            Gets the currently selected layer in this collection.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LayerEventList`1.Extent">
            <summary>
            The envelope that contains all of the layers for this data frame.  Essentially this would be
            the extents to use if you want to zoom to the world view.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LayerEventList`1.IsDisposed">
            <summary>
            Gets a value indicating whether dispose has already been called on this object.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LayerEventList`1.IsDisposeLocked">
            <summary>
            Gets a value indicating whether there are requests to prevent disposal of this object.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.LayerLegendEnumerator">
            <summary>
            LayerEnumerator
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LayerLegendEnumerator.#ctor(System.Collections.Generic.IEnumerator{DotSpatial.Symbology.ILayer})">
            <summary>
            Creates a new instance of LayerEnumerator
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LayerLegendEnumerator.Dispose">
            <summary>
            Calls the Dispose method
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LayerLegendEnumerator.MoveNext">
            <summary>
            Moves to the next member
            </summary>
            <returns>boolean, true if the enumerator was able to advance</returns>
        </member>
        <member name="M:DotSpatial.Symbology.LayerLegendEnumerator.Reset">
            <summary>
            Resets to before the first member
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LayerLegendEnumerator.Current">
            <summary>
            Retrieves the current member as an ILegendItem
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LayerLegendEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Returns the current member as an object
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.LabelCategory">
            <summary>
            LabelCategory
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.ILabelCategory">
            <summary>
            ILabelCategory
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ILabelCategory.Copy">
            <summary>
            Returns a shallow copy of this object cast as a LabelCategory.
            </summary>
            <returns>A shallow copy of this object.</returns>
        </member>
        <member name="P:DotSpatial.Symbology.ILabelCategory.Expression">
            <summary>
            Gets or sets the string expression that controls the integration
            of field values into the label text.  This will not do calculations,
            but will allow multiple fields to be conjoined in a string expression,
            substituting a field value where each [FieldName] occurs.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILabelCategory.FilterExpression">
            <summary>
            Gets or sets the string filter expression that controls which features
            that this should apply itself to.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILabelCategory.Name">
            <summary>
            Gets or sets the string name
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILabelCategory.Symbolizer">
            <summary>
            Gets or sets the text symbolizer to use for this category
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILabelCategory.SelectionSymbolizer">
            <summary>
            Gets or sets the text symbolizer to use for this category
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LabelCategory.#ctor">
            <summary>
            Creates a new instance of LabelCategory
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LabelCategory.Clone">
            <summary>
            Returns the Copy() method cast as an object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.LabelCategory.Copy">
            <summary>
            Returns a shallow copy of this category with the exception of
            the TextSymbolizer, which is duplicated.  This uses memberwise
            clone, so sublcasses using this method will return an appropriate
            version.
            </summary>
            <returns>A shallow copy of this object.</returns>
        </member>
        <member name="M:DotSpatial.Symbology.LabelCategory.ToString">
            <summary>
            Returns the name of this category.
            </summary>
            <returns></returns>
        </member>
        <member name="P:DotSpatial.Symbology.LabelCategory.FilterExpression">
            <summary>
            Gets or sets the string filter expression that controls which features
            that this should apply itself to.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LabelCategory.Expression">
            <summary>
            Gets or sets the string expression that controls the integration
            of field values into the label text.  This will not do calculations,
            but will allow multiple fields to be conjoined in a string expression,
            substituting a field value where each [FieldName] occurs.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LabelCategory.Name">
            <summary>
            Gets or sets the string name
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LabelCategory.Symbolizer">
            <summary>
            Gets or sets the text symbolizer to use for this category
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LabelCategory.SelectionSymbolizer">
            <summary>
            Gets or sets the text symbolizer to use for this category
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.ILayerManager">
            <summary>
            IDataManager
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ILayerManager.OpenLayer">
            <summary>
            This launches an open file dialog and attempts to load the specified file.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ILayerManager.OpenLayer(System.Collections.Generic.ICollection{DotSpatial.Symbology.ILayer})">
            <summary>
            This launches an open file dialog and attempts to load the specified file.
            </summary>
            <param name="container">The layer will be created in the specified collection</param>
            <returns>A Layer</returns>
        </member>
        <member name="M:DotSpatial.Symbology.ILayerManager.OpenLayer(DotSpatial.Data.IProgressHandler)">
            <summary>
            This launches an open file dialog and attempts to load the specified file.
            </summary>
            <param name="progressHandler">Specifies the progressHandler to receive progress messages.  This value overrides the property on this DataManager.</param>
            <returns>A Layer</returns>
        </member>
        <member name="M:DotSpatial.Symbology.ILayerManager.OpenLayer(System.String,System.Collections.Generic.ICollection{DotSpatial.Symbology.ILayer})">
            <summary>
            Opens a new layer and automatically adds it to the specified container.
            </summary>
            <param name="fileName">A String fileName to attempt to open.</param>
            <param name="container">The container (usually a LayerCollection) to add to</param>
            <returns>The layer after it has been created and added to the container</returns>
        </member>
        <member name="M:DotSpatial.Symbology.ILayerManager.OpenLayer(System.String,DotSpatial.Data.IProgressHandler)">
            <summary>
            This launches an open file dialog and attempts to load the specified file.
            </summary>
            <param name="fileName">A String fileName to attempt to open.</param>
            <param name="progressHandler">Specifies the progressHandler to receive progress messages.  This value overrides the property on this DataManager.</param>
            <returns>A Layer</returns>
        </member>
        <member name="M:DotSpatial.Symbology.ILayerManager.OpenLayer(System.String)">
            <summary>
            Attempts to call the open fileName method for any IDataProvider plugin
            that matches the extension on the string.
            </summary>
            <param name="fileName">A String fileName to attempt to open.</param>
        </member>
        <member name="M:DotSpatial.Symbology.ILayerManager.OpenLayer(System.String,System.Boolean,System.Collections.Generic.ICollection{DotSpatial.Symbology.ILayer},DotSpatial.Data.IProgressHandler)">
            <summary>
            Attempts to call the open fileName method for any IDataProvider plugin
            that matches the extension on the string.
            </summary>
            <param name="fileName">A String fileName to attempt to open.</param>
            <param name="inRam">A boolean value that if true will attempt to force a load of the data into memory.  This value overrides the property on this DataManager.</param>
            <param name="container">any valid IContainer that this should be added to</param>
            <param name="progressHandler">Specifies the progressHandler to receive progress messages.  This value overrides the property on this DataManager.</param>
        </member>
        <member name="M:DotSpatial.Symbology.ILayerManager.OpenRasterLayer">
            <summary>
            This opens a file, but populates the dialog filter with only raster formats.
            </summary>
            <returns>An IRaster with the data from the file specified in an open file dialog</returns>
        </member>
        <member name="M:DotSpatial.Symbology.ILayerManager.OpenVectorLayer">
            <summary>
            This opens a file, but populates the dialog filter with only raster formats.
            </summary>
            <returns>An IFeatureSet with the data from the file specified in a dialog</returns>
        </member>
        <member name="M:DotSpatial.Symbology.ILayerManager.OpenRasterLayer(System.String)">
            <summary>
            This attempts to open the specified raster file and returns an associated layer
            </summary>
            <param name="fileName">The string fileName to open</param>
            <returns>An IRaster with the data from the file specified in an open file dialog</returns>
        </member>
        <member name="M:DotSpatial.Symbology.ILayerManager.OpenVectorLayer(System.String)">
            <summary>
            This attempts to open the specified vector file and returns an associated layer
            </summary>
            <param name="fileName">the string fileName to open</param>
            <returns>An IFeatureSet with the data from the file specified in a dialog</returns>
        </member>
        <member name="M:DotSpatial.Symbology.ILayerManager.CreateRasterLayer(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Type,System.String[])">
            <summary>
            This create new method implies that this provider has the priority for creating a new file.
            An instance of the dataset should be created and then returned.  By this time, the fileName
            will already be checked to see if it exists, and deleted if the user wants to overwrite it.
            </summary>
            <param name="name">The string fileName for the new instance</param>
            <param name="driverCode">The string short name of the driver for creating the raster</param>
            <param name="xSize">The number of columns in the raster</param>
            <param name="ySize">The number of rows in the raster</param>
            <param name="numBands">The number of bands to create in the raster</param>
            <param name="dataType">The data type to use for the raster</param>
            <param name="options">The options to be used.</param>
            <returns>An IRaster</returns>
        </member>
        <member name="M:DotSpatial.Symbology.ILayerManager.GetSupportedExtensions(System.String)">
            <summary>
            Checks a dialog filter and returns a list of just the extensions.
            </summary>
            <param name="dialogFilter">The Dialog Filter to read extensions from</param>
            <returns>A list of extensions</returns>
        </member>
        <member name="M:DotSpatial.Symbology.ILayerManager.LoadProvidersFromAssembly(System.String)">
            <summary>
            Given a string fileName for the "*.dll" file, this will attempt to load any classes that implement the
            IDataProvder interface.
            </summary>
            <param name="fileName">The string path of the assembly to load from.</param>
            <returns>A list that contains only the providers that were just loaded.  This may be a list of count 0, but shouldn't return null.</returns>
        </member>
        <member name="M:DotSpatial.Symbology.ILayerManager.LoadProvidersFromDirectories">
            <summary>
            This should be called once all the permitted directories have been set in the code.
            This will not affect the PreferredProviders or the general list of Providers.
            These automatically have the lowest priority and will only be used if nothing
            else works.  Use the PreferredProviders to force preferential loading of
            a plugin DataProvider.
            </summary>
            <returns>A list of just the newly added DataProviders from this method.</returns>
        </member>
        <member name="E:DotSpatial.Symbology.ILayerManager.DirectoryProvidersLoaded">
            <summary>
            Occurs after the directory providers have been loaded into the project.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILayerManager.ActiveProjectLayers">
            <summary>
            Gets or sets a temporary list of active project layers.  This is designed to house
            the layers from a map frame when the property grids are shown for layers in that
            map frame.  This list on the DefaultLayerManager is what is used to create the
            list that populates dropdowns that can take a Layer as a parameter.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILayerManager.LayerProviders">
            <summary>
            Gets or sets the list of IDataProviders that should be used in the project.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILayerManager.LayerProviderDirectories">
            <summary>
            Gets or sets the path (either as a full path or as a path relative to
            the DotSpatial.dll) to search for plugins that implement the IDataProvider interface.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILayerManager.DialogReadFilter">
            <summary>
            Gets or sets the dialog read filter to use for opening data files.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILayerManager.DialogWriteFilter">
            <summary>
            Gets or sets the dialog write filter to use for saving data files.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILayerManager.LoadInRam">
            <summary>
            Sets the default condition for how this data manager should try to load layers.
            This will be overridden if the inRam property is specified as a parameter.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILayerManager.RasterReadFilter">
            <summary>
            Gets or sets the dialog read filter to use for opening data files that are specifically raster formats.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILayerManager.RasterWriteFilter">
            <summary>
            Gets or sets the dialog write filter to use for saving raster files.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILayerManager.VectorReadFilter">
            <summary>
            Gets or sets the dialog read filter to use for opening vector files.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILayerManager.VectorWriteFilter">
            <summary>
            Gets or sets the dialog write filter to use for saving vector files.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILayerManager.PreferredProviders">
            <summary>
            Gets or sets a dictionary of IDataProviders keyed by the extension.  The
            standard order is to try to load the data using a PreferredProvider.  If that
            fails, then it will check the list of dataProviders, and finally, if that fails,
            it will check the plugin Data Providers in directories.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILayerManager.ProgressHandler">
            <summary>
            Gets or sets a progress handler for any open operations that are intiated by this
            DataManager.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.GradientModel">
            <summary>
            An enumeration specifying the way that a gradient of color is attributed to the values in the specified range.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.GradientModel.Linear">
            <summary>
            The values are colored in even steps in each of the Red, Green and Blue bands.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.GradientModel.Exponential">
            <summary>
            The even steps between values are used as powers of two, greatly increasing the impact of higher values.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.GradientModel.Logarithmic">
            <summary>
            The log of the values is used, reducing the relative impact of the higher values in the range.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.FileCantBeDeletedException">
            <summary>
            CantBeDeletedException
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.FileCantBeDeletedException.#ctor(System.String)">
            <summary>
            Creates a new instance of CantBeDeletedException
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.FeatureSetApplyEditArgs">
            <summary>
            Feature Set Apply Edit Args.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureSetApplyEditArgs.#ctor(DotSpatial.Data.IFeatureSet,DotSpatial.Symbology.FeatureSetApplyEditArgs.ChangeHandler)">
            <summary>
            Initializes a new instance of the FeatureSetApplyEditArgs class.
            </summary>
            <param name="editCopy">The IFeatureSet edit copy.</param>
            <param name="handler">The delegate should point to a method handler to work with the edit copy.</param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureSetApplyEditArgs.ApplyChanges">
            <summary>
            Invokes the method that will handle changes using the EditCopy.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureSetApplyEditArgs.EditCopy">
            <summary>
            Gets or sets a duplicate of the IFeatureSet being referenced so that
            changes might be applied.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.FeatureSetApplyEditArgs.ChangeHandler">
            <summary>
            Defines the structure of the method that would handle the actual
            changes for an apply changes request.
            </summary>
            <param name="editCopy">The IFeatureSet edit copy being manipulated.</param>
        </member>
        <member name="T:DotSpatial.Symbology.HatchPattern">
            <summary>
            HatchPattern
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.HatchPattern.#ctor">
            <summary>
            Creates a new instance of HatchPattern
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.HatchPattern.#ctor(System.Drawing.Drawing2D.HatchStyle,System.Drawing.Color,System.Drawing.Color)">
             <summary>
             Creates a new HatchPattern with the specified image
             </summary>
             <param name="style">The hatch style to use</param>
            <param name="foreColor">the forecolor to use</param>
            <param name="backColor">the background color to use</param>
        </member>
        <member name="M:DotSpatial.Symbology.HatchPattern.FillPath(System.Drawing.Graphics,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Instructs the drawing code to fill the specified path with the specified pattern
            </summary>
            <param name="g">The Graphics device to draw to</param>
            <param name="gp">The GraphicsPath to fill</param>
        </member>
        <member name="M:DotSpatial.Symbology.HatchPattern.GetFillColor">
            <summary>
            Gets the forecolor
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.HatchPattern.SetFillColor(System.Drawing.Color)">
            <summary>
            Sets the foreColor to the specified color
            </summary>
            <param name="color"></param>
        </member>
        <member name="P:DotSpatial.Symbology.HatchPattern.HatchStyle">
            <summary>
            Gets or sets the hatch style
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.HatchPattern.ForeColor">
            <summary>
            Gets or sets the fore color of the hatch pattern
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.HatchPattern.ForeColorOpacity">
            <summary>
            Sets the opacity of this simple pattern by modifying the alpha channel of the fill color.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.HatchPattern.BackColor">
            <summary>
            Gets or sets the background color of the hatch pattern
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.HatchPattern.BackColorOpacity">
            <summary>
            Sets the opacity of this simple pattern by modifying the alpha channel of the fill color.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.IColorable">
            <summary>
            IColorSymbol
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IColorable.Color">
            <summary>
            Gets or sets the Color
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IColorable.Opacity">
            <summary>
            Gets or sets the opacity
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.StrokeStyle">
            <summary>
            StrokeTypes
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.StrokeStyle.Catographic">
            <summary>
            The most complex form, containing a linear pattern that can have a hash as well as decorations
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.StrokeStyle.Custom">
            <summary>
            This is not directly supported by DotSpatial, but is in fact, some new type that
            will have to be returned.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.StrokeStyle.Marker">
            <summary>
            Draws only the marker symbols where the line occurs, and uses the dash pattern to control placement.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.StrokeStyle.Simple">
            <summary>
            The simplest line, offering the easiest interface to use
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.StrokeStyle.Hash">
            <summary>
            A hash line
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.StrokeStyle.Picture">
            <summary>
            Uses a picture to generate a texture
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.ILineCategory">
            <summary>
            IPointSchemeCategory
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.IFeatureCategory">
            <summary>
            IFeatureCategory
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.IFeatureCategory.IsWithinLegendSelection">
            <summary>
            Queries this layer and the entire parental tree up to the map frame to determine if
            this layer is within the selected layers.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.IFeatureCategory.GetColor">
            <summary>
            This gets a single color that attempts to represent the specified
            category.  For polygons, for example, this is the fill color (or central fill color)
            of the top pattern.  If an image is being used, the color will be gray.
            </summary>
            <returns>The System.Color that can be used as an approximation to represent this category.</returns>
        </member>
        <member name="M:DotSpatial.Symbology.IFeatureCategory.SetColor(System.Drawing.Color)">
            <summary>
            This applies the color to the top symbol stroke or pattern.
            </summary>
            <param name="color">The Color to apply</param>
        </member>
        <member name="M:DotSpatial.Symbology.IFeatureCategory.DisplayExpression">
            <summary>
            In some cases, it is useful to simply be able to show an approximation of the actual expression.
            This also removes brackets from the field names to make it slightly cleaner.
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.IFeatureCategory.SelectFeatures">
            <summary>
            Occurs when the select features context menu is clicked.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IFeatureCategory.Symbolizer">
            <summary>
            Gets or sets the symbolizer used for this category.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IFeatureCategory.SelectionSymbolizer">
            <summary>
            Gets or sets the symbolizer used for this category
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IFeatureCategory.FilterExpression">
            <summary>
            Gets or set the filter expression that is used to add members to generate a category based on this scheme.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILineCategory.Symbolizer">
            <summary>
            Gets or sets the symbolizer for this category
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILineCategory.SelectionSymbolizer">
            <summary>
            Gets or sets the symbolizer to use to draw selected features from this category.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.FeatureLayerExt">
            <summary>
            FeatureLayerEM
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayerExt.InvertSelection(DotSpatial.Symbology.IFeatureLayer)">
            <summary>
            Inverts the selection
            </summary>
            <param name="featureLayer"></param>
        </member>
        <member name="T:DotSpatial.Symbology.TextSymbolChangedEventArgs">
            <summary>
            MemberChangedEventArgs
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.TextSymbolChangedEventArgs.#ctor(DotSpatial.Symbology.ILabel,DotSpatial.Symbology.ILabelSymbolizer,DotSpatial.Symbology.ILabelSymbolizer)">
            <summary>
            Creates a new instance of MemberChangedEventArgs
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.TextSymbolChangedEventArgs.Label">
            <summary>
            Gets the Label that was updated
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.TextSymbolChangedEventArgs.OldSymbolizer">
            <summary>
            Gets the previous symbolizer that this label no longer uses.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.TextSymbolChangedEventArgs.NewSymbolizer">
            <summary>
            Gets the new symbolizer that this label now uses.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.LabelDrawState">
            <summary>
            LabelDrawState
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.LabelDrawState.Category">
            <summary>
            A LabelCategory interface representing the drawing information for this label.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.LabelDrawState.Selected">
            <summary>
            A boolean indicating whether or not this is selected.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.LabelDrawState.Visible">
            <summary>
            A boolean indicating whether the associated feature should be drawn.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LabelDrawState.#ctor(DotSpatial.Symbology.ILabelCategory)">
            <summary>
            Creates a new instance of the LabelDrawState class where selected is false
            but visible is true.
            </summary>
            <param name="category">The category</param>
        </member>
        <member name="M:DotSpatial.Symbology.LabelDrawState.#ctor(DotSpatial.Symbology.ILabelCategory,System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of the LabelDrawState based on the specified parameters.
            </summary>
            <param name="category">The category</param>
            <param name="selected">Boolean, true if the label is selected</param>
            <param name="visible">Boolean, true if the label should be visible</param>
        </member>
        <member name="T:DotSpatial.Symbology.DrawWindow">
            <summary>
            A Draw Window is a special type of envelope that supports some basic transformations
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.DrawWindow.#ctor">
            <summary>
            Creates a new instance of DrawWindow, making the assumption that the map is in Geographic coordinates of decimal degrees
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.DrawWindow.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new draw window with the specified coordinates
            </summary>
            <param name="x1">The first x-value.</param>
            <param name="x2">The second x-value.</param>
            <param name="y1">The first y-value.</param>
            <param name="y2">The second y-value.</param>
            <param name="z1">The first z-value.</param>
            <param name="z2">The second z-value.</param>
        </member>
        <member name="M:DotSpatial.Symbology.DrawWindow.#ctor(DotSpatial.Topology.IEnvelope)">
            <summary>
            Constructs a new DrawWindow based on the specified IEnvelope.  The envelope becomes
            the GeographicView for this DrawWindow.
            </summary>
            <param name="env"></param>
        </member>
        <member name="M:DotSpatial.Symbology.DrawWindow.Copy">
            <summary>
            Replaces the inherited Envelope copy in order to create a copy of the DrawWindow instead
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.DrawWindow.Clone">
            <summary>
            Replaces the inherited clone in order to make a copy of the DrawWindow
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.DrawWindow.ProjToDrawWindow(System.Double,System.Double)">
            <summary>
            Converts two dimensions of the specified coordinate into a two dimensional PointF
            </summary>
            <param name="inX"></param>
            <param name="inY"></param>
            <returns>A PointF</returns>
        </member>
        <member name="M:DotSpatial.Symbology.DrawWindow.ProjToDrawWindow(DotSpatial.Topology.Coordinate)">
            <summary>
            Converts two dimensions of the specified coordinate into a two dimensional PointF
            </summary>
            <param name="inCoord">Any valid ICoordinate</param>
            <returns>A PointF</returns>
        </member>
        <member name="M:DotSpatial.Symbology.DrawWindow.ProjToDrawWindow(System.Collections.Generic.List{DotSpatial.Topology.Coordinate})">
            <summary>
            Converts two dimensions of the specified coordinate into a two dimensional PointF.
            </summary>
            <param name="inCoords"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.DrawWindow.DrawWindowToProj(System.Drawing.PointF)">
            <summary>
            Converts a PointF from the draw window back into the double precision data coordinate.
            </summary>
            <param name="inPoint"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.DrawWindow.DrawWindowToProj(System.Drawing.PointF[])">
            <summary>
            Converts an Array of PointF values from the draw window back into the double precision data coordinates.
            There will be uncertainty based on how zoomed in you are.
            </summary>
            <param name="inPoints"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.DrawWindow.ProjToDrawWindow(DotSpatial.Topology.IEnvelope)">
             <summary>
            
             </summary>
             <param name="env"></param>
             <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.DrawWindow.DrawWindowToProj(System.Drawing.RectangleF)">
            <summary>
            Calculates a geographic envelope from the specified window in the DrawWindow coordinates.
            </summary>
            <param name="window"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.DrawWindow.GetDrawWindowView">
            <summary>
            This calculates the DrawWindowView from the GeographicView
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.DrawWindow.GeographicView">
            <summary>
            This is the the current extent of the map in geographic coordinates.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.DrawWindow.View">
            <summary>
            Retrieves the MinX value of the GeographicView, in DrawWindow coordinates
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.Position2DConverter">
            <summary>
            PointFConverter
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.Position2DConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            True if the source type is a string
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns>Boolean, true if source type is a string</returns>
        </member>
        <member name="M:DotSpatial.Symbology.Position2DConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Uses a string to return a new Position2D
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns>A String</returns>
        </member>
        <member name="M:DotSpatial.Symbology.Position2DConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Creates a string from the specified Position2D
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns>A Position2D</returns>
        </member>
        <member name="T:DotSpatial.Symbology.ImageLayerEventSender">
            <summary>
            When a menu item is clicked, it usually shows a dialog, but the dialog might be
            System.Windows.Forms, which is not known in DotSpatial.Symbology.  Instead,
            the event is tracked to this class, which can be tracked.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.ImageLayerEventSender._instance">
            <summary>
            As part of the singleton pattern the fact that this is static
            allows all the various event throwing options to work through this.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ImageLayerEventSender.#ctor">
            <summary>
            This is private as part of the Singleton pattern so that only using the
            "DefaultManager" appraoch
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ImageLayerEventSender.Raise_ShowProperties(System.Object,DotSpatial.Symbology.ImageLayerEventArgs)">
            <summary>
            Raises the shared ShowPropertiesClicked event
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ImageLayerEventSender.Raise_ExportData(System.Object,DotSpatial.Data.ImageDataEventArgs)">
            <summary>
            Raises the shared ExportDataclicked event
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ImageLayerEventSender.Instance">
            <summary>
            This instance is static member of the singleton.
            SymbologyEvents bob = SymbologyEvents.Instance;
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.ImageLayerEventSender.ShowPropertiesClicked">
            <summary>
            Occurs when the "Properties" menu item is clicked in a feature layer
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.ImageLayerEventSender.ExportDataClicked">
            <summary>
            Occurs when the export data menu item has been clicked
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.ImageLayerEventArgs">
            <summary>
            An EventArgs specifically tailored to ImageLayerEventArgs.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ImageLayerEventArgs.#ctor(DotSpatial.Symbology.IImageLayer)">
            <summary>
            Initializes a new instance of the ImageLayerEventArgs class.
            </summary>
            <param name="imageLayer">The IImageLayer that is involved in this event.</param>
        </member>
        <member name="P:DotSpatial.Symbology.ImageLayerEventArgs.ImageLayer">
            <summary>
            Gets the ImageLayer associated with this event.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.DynamicVisibilityEventArgs">
            <summary>
            An EventArgs specifically tailored to DynamicVisibilityMode.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.DynamicVisibilityEventArgs.#ctor(DotSpatial.Symbology.IDynamicVisibility)">
            <summary>
            Initializes a new instance of the DynamicVisibilityModeEventArgs class.
            </summary>
            <param name="item">The item that supports IDynamicVisibility.</param>
        </member>
        <member name="P:DotSpatial.Symbology.DynamicVisibilityEventArgs.Item">
            <summary>
            Gets the item that supports dynamic visibility.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.WorldFile">
            <summary>
            WorldFile
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.PolygonSymbolizerOld">
            <summary>
            A class that specifically controls the drawing for Polygons
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.FeatureSymbolizerOld">
            <summary>
            This contains the shared symbolizer properties between Points, Lines and Polygons.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.IFeatureSymbolizerOld">
            <summary>
            This contains the set of symbology members that are shared
            between points, lines and polygons.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IFeatureSymbolizerOld.FillColor">
            <summary>
            Gets or sets the color of the brush used to fill the shape.
            Setting this will change the brush to a new SolidBrush.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IFeatureSymbolizerOld.FillBrush">
            <summary>
            Gets or sets the brush used to fill the shape.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IFeatureSymbolizerOld.IsTextured">
            <summary>
            Gets or sets whether or not to use a texture when drawing these lines.  By default, this either
            checks the DefaultLineProvider or else it is false.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IFeatureSymbolizerOld.Name">
            <summary>
            Gets or sets a string name to help identify this Symbolizer
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IFeatureSymbolizerOld.Opacity">
            <summary>
            Gets or sets a float value from 0 to 1 where 0 is completely transparent
            and 1 is completely solid.  Setting an alpha of a specific feature, like
            FillColor, to something less than 255 will control that feature's transparency
            without affecting the others.  The final transparency of the feature will
            be that alpha multiplied by this value and rounded to the nearest byte.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IFeatureSymbolizerOld.TextureFile">
            <summary>
            Gets or sets the string TextureFile to define the fill texture
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IFeatureSymbolizerOld.TextureImage">
            <summary>
            Gets or sets the actual bitmap to use for the texture.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IFeatureSymbolizerOld.ScaleMode">
            <summary>
            Gets or Sets a ScaleModes enumeration that determines whether non-coordinate drawing
            properties like width or size use pixels or world coordinates.  If pixels are
            specified, a back transform is used to approximate pixel sizes.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IFeatureSymbolizerOld.Smoothing">
            <summary>
            Gets or sets the smoothing mode to use that controls advanced features like
            anti-aliasing.  By default this is set to antialias.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureSymbolizerOld.#ctor">
            <summary>
            This constructor takes on some default values, and assumes that it
            has no other underlying symblizer to reference.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureSymbolizerOld.GetLegendSymbolSize">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Symbology.FeatureSymbolizerOld.Draw(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws a basic symbol to the specified rectangle
            </summary>
            <param name="g">The graphics surface to draw on</param>
            <param name="target">The target to draw the symbol to</param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureSymbolizerOld.LegendSymbol_Painted(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Occurs in response to the legend symbol being painted
            </summary>
            <param name="g">The Graphics surface to draw on</param>
            <param name="box">The box to draw to</param>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureSymbolizerOld.IsVisible">
            <summary>
            Gets or sets a boolean indicating whether or not this specific feature should be drawn.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureSymbolizerOld.FillColor">
            <summary>
            Gets or sets the solid color to be used for filling the symbol.
            This will also change the FillBrush to a solid brush of the specified color.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureSymbolizerOld.FillBrush">
            <summary>
            Gets or sets the Brush to be used when filling this point.
            Setting this value will also change the FillColor property, but only if
            the brush is a SolidBrush.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureSymbolizerOld.IsTextured">
            <summary>
            Gets or sets whether to use the specified TextureImage during drawing
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureSymbolizerOld.Name">
            <summary>
            Gets or sets a string name to help identify this Symbolizer
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureSymbolizerOld.Opacity">
            <summary>
            Gets or sets a float value from 0 to 1 where 0 is completely transparent
            and 1 is completely solid.  Setting an alpha of a specific feature, like
            FillColor, to something less than 255 will control that feature's transparency
            without affecting the others.  The final transparency of the feature will
            be that alpha multiplied by this value and rounded to the nearest byte.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureSymbolizerOld.ScaleMode">
            <summary>
            Gets or Sets a ScaleModes enumeration that determines whether non-coordinate drawing
            properties like width or size use pixels or world coordinates.  If pixels are
            specified, a back transform is used to approximate pixel sizes.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureSymbolizerOld.Smoothing">
            <summary>
            Gets or sets the smoothing mode to use that controls advanced features like
            anti-aliasing.  By default this is set to antialias.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureSymbolizerOld.TextureFile">
            <summary>
            Gets or sets the string TextureFile to define the fill texture
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureSymbolizerOld.TextureImage">
            <summary>
            Gets or sets the actual bitmap to use for the texture.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.IPolygonSymbolizerOld">
            <summary>
            An interface for a symbolizer specific to polygons.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IPolygonSymbolizerOld.BorderSymbolizer">
            <summary>
            Gets or sets the border symbolizer
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IPolygonSymbolizerOld.BorderIsVisible">
            <summary>
            Gets or sets a boolean that determines whether or not the polygon border should be drawn.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonSymbolizerOld.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonSymbolizerOld.#ctor(System.Boolean)">
            <summary>
            Gets or sets the polygon symbolizer
            </summary>
            <param name="selected">Boolean, true if this should use a standard selection symbology of light cyan coloring</param>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonSymbolizerOld.#ctor(DotSpatial.Topology.IEnvelope,System.Boolean)">
            <summary>
            Creates a new polygon symbolizer based on the specified parameters.
            </summary>
            <param name="env">The IEnvelope representing the base geometric size of the layer.  This helps to estimate a useful geographic line width</param>
            <param name="selected">Boolean, true if this should use a standard selection symbology of light cyan coloring</param>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonSymbolizerOld.Draw(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Replaces the drawing code so that the polygon characteristics are more evident.
            </summary>
            <param name="g"></param>
            <param name="target"></param>
        </member>
        <member name="P:DotSpatial.Symbology.PolygonSymbolizerOld.BorderSymbolizer">
            <summary>
            Gets or sets the border symbolizer
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.PolygonSymbolizerOld.BorderIsVisible">
            <summary>
            Gets or sets a boolean that determines whether or not the polygon border should be drawn.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.IPicturePattern">
            <summary>
            IPicturePattern
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.IPicturePattern.Open(System.String)">
            <summary>
            Opens the specified image or icon file to a local copy.  Icons are converted into bitmaps.
            </summary>
            <param name="fileName">The string fileName to open.</param>
        </member>
        <member name="P:DotSpatial.Symbology.IPicturePattern.Angle">
            <summary>
            Gets or sets the angle for the texture in degrees.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IPicturePattern.DialogFilter">
            <summary>
            Gets the string dialog filter that represents the supported picture file formats.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IPicturePattern.Picture">
            <summary>
            Gets or sets the image to use as a repeating texture
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IPicturePattern.PictureFilename">
            <summary>
            Gets or sets the picture fileName.  Setting this will load the picture.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IPicturePattern.Scale">
            <summary>
            Gets or sets a multiplier that should be multiplied against the width and height of the
            picture before it is used as a texture in pixel coordinates.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IPicturePattern.WrapMode">
            <summary>
            Gets or sets the wrap mode.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.PointSchemeFactory">
            <summary>
            PointSchemeFactory
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.PointSchemeFactory.#ctor(System.Data.DataTable)">
            <summary>
            Creates a new instance of PointSchemeFactory where the data Table is specified.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.PointSchemeFactory.ColorRamp(System.Drawing.Color,System.Drawing.Color,DotSpatial.Symbology.QuickSchemeType)">
            <summary>
            This causes the creation of a PointScheme
            </summary>
            <param name="startColor"></param>
            <param name="endColor"></param>
            <param name="schemeType"></param>
            <returns></returns>
        </member>
        <member name="P:DotSpatial.Symbology.PointSchemeFactory.Template">
            <summary>
            Gets or sets the template symbol to use.  If using a color gradient, the shape and size will remain the same.
            If using a size gradient, the color and shape will remain the same.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.PointSchemeFactory.Table">
            <summary>
            Gets or sets the data Table that provides necessary information about the attributes for unique values to
            be calculated
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.PointSchemeFactory.ClassificationField">
            <summary>
            Gets or sets the string classification field to use
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.PointSchemeFactory.NormalizationField">
            <summary>
            Gets or sets the string field to use for normalization.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.PointSchemeFactory.NumCategories">
            <summary>
            Gets or sets the number of categories that will be used for classification schemes that don't
            come pre-configured with a given number of categories.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.IPointCategory">
            <summary>
            IPointSchemeCategory
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IPointCategory.Symbolizer">
            <summary>
            Gets or sets the symbolizer for this category
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IPointCategory.SelectionSymbolizer">
            <summary>
            Gets or sets the symbolizer to use to draw selected features from this category.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.LayerEventSender">
            <summary>
            When a menu item is clicked, it usually shows a dialog, but the dialog might be
            System.Windows.Forms, which is not known in DotSpatial.Symbology.  Instead,
            the event is tracked to this class, which can be tracked.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.LayerEventSender._instance">
            <summary>
            As part of the singleton pattern the fact that this is static
            allows all the various event throwing options to work through this.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LayerEventSender.#ctor">
            <summary>
            This is private as part of the Singleton pattern so that only using the
            "DefaultManager" appraoch
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LayerEventSender.Raise_EditColorBreakClicked(System.Object,DotSpatial.Symbology.ColorCategoryEventArgs)">
            <summary>
            Raises the EditColorBreakClicked event handler,
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LayerEventSender.Raise_DynamicVisibilityClicked(System.Object,DotSpatial.Symbology.DynamicVisibilityEventArgs)">
            <summary>
            Raises the EditColorBreakClicked event handler,
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LayerEventSender.Instance">
            <summary>
            This instance is static member of the singleton.
            LayerEvents bob = LayerEvents.Instance;
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.LayerEventSender.EditColorBreakClicked">
            <summary>
            EditColorBreakClicked by default, this should launch the ColorPicker
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.LayerEventSender.EditDynamicVisibilityClicked">
            <summary>
            Occurs when setting up dynamic visiblity.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.IRasterLayer">
            <summary>
            A raster layer describes using a single raster, and the primary application will be using this as a texture.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.IRasterLayer.WriteBitmap">
            <summary>
            Creates a bmp texture and saves it to the same fileName as the raster, but with a bmp ending.
            This also generates a bpw world file for the texture.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.IRasterLayer.WriteBitmap(DotSpatial.Data.IProgressHandler)">
            <summary>
            Creates a bmp texture and saves it to the same fileName as the raster but with a bmp ending.
            This also generates a bpw world file for the texture.
            </summary>
            <param name="progressHandler">An implementation of IProgressHandler to recieve status messages</param>
        </member>
        <member name="M:DotSpatial.Symbology.IRasterLayer.ExportBitmap(System.String,DotSpatial.Data.ImageBandType)">
            <summary>
             Creates a bmp texture and saves it to the specified fileName.  The fileName should end in bmp.
             This also generates a bpw world file for the texture.
            </summary>
            <param name="fileName">The string fileName to write to</param>
            <param name="bandType">The image band type.</param>
        </member>
        <member name="M:DotSpatial.Symbology.IRasterLayer.ExportBitmap(System.String,DotSpatial.Data.IProgressHandler,DotSpatial.Data.ImageBandType)">
            <summary>
            Creates a bmp texture and saves it to the specified fileName.  The fileName should end in bmp.
            This also generates a bpw world file for the texture.
            </summary>
            <param name="fileName">The string fileName to write to</param>
            <param name="progressHandler">The progress handler for creating a new bitmap.</param>
            <param name="bandType">The image band type.</param>
        </member>
        <member name="P:DotSpatial.Symbology.IRasterLayer.Bounds">
            <summary>
            Gets or sets the boundaries of the raster.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IRasterLayer.BitmapGetter">
            <summary>
            Gets or sets the item that controls rendering this raster as a bitmap.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IRasterLayer.CellWidth">
            <summary>
            Gets the geographic width of the cells for this raster (East-West)
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IRasterLayer.CellHeight">
            <summary>
            Gets the geographic height of the cells for this raster (North-South)
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IRasterLayer.DataSet">
            <summary>
            Gets or sets the underlying dataset raster for this object
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IRasterLayer.DataType">
            <summary>
            Gets the data type of the values in this raster.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IRasterLayer.East">
            <summary>
            Gets the eastern boundary of this raster.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IRasterLayer.ElevationFactor">
            <summary>
            This is a conversion factor that is required in order to convert the elevation units into the same units as the geospatial projection for the latitude and logitude values of the grid.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IRasterLayer.Extrusion">
            <summary>
            Gets the exaggeration beyond normal elevation values.  A value of 1 is normal elevation, a vlaue of 0 would be flat,
            while a value of 2 would be twice the normal elevation.  This applies to the three-dimensional rendering and is
            not related to the shaded relief pattern created by the texture.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IRasterLayer.Filename">
            <summary>
            Gets the fileName where this raster is saved.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IRasterLayer.Maximum">
            <summary>
            Gets the maximum value of this raster.  If this is an elevation raster, this is also the top.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IRasterLayer.Minimum">
            <summary>
            Gets the minimum value of this raster.  If this is an elevation raster, this is also the bottom.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IRasterLayer.NoDataValue">
            <summary>
            Gets the value that is used when no actual data exists for the specified location.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IRasterLayer.North">
            <summary>
            Gets the northern boundary of this raster.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IRasterLayer.NumBands">
            <summary>
            Gets the number of bands in this raster.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IRasterLayer.NumColumns">
            <summary>
            Gets the number of columns in this raster.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IRasterLayer.NumRows">
            <summary>
            Gets the number of rows in this raster.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IRasterLayer.South">
            <summary>
            Gets the southern boundary of this raster.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IRasterLayer.Symbolizer">
            <summary>
            Gets or sets the collection of symbolizer properties to use for this raster.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IRasterLayer.West">
            <summary>
            Gets the western boundary of this raster.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.LayerManager">
            <summary>
            This can be used as a component to work as a LayerManager.  This also provides the
            very important DefaultLayerManager property, which is where the developer controls
            what LayerManager should be used for their project.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LayerManager.#ctor">
            <summary>
            Creates a new instance of the LayerManager class.  A data manager is more or less
            just a list of data providers to use.  The very important
            LayerManager.DefaultLayerManager property controls which LayerManager will be used
            to load data.  By default, each LayerManager sets itself as the default in its
            constructor.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LayerManager.GetSupportedExtensions(System.String)">
            <summary>
            Checks a dialog filter and returns a list of just the extensions.
            </summary>
            <param name="dialogFilter">The Dialog Filter to read extensions from</param>
            <returns>A list of extensions</returns>
        </member>
        <member name="M:DotSpatial.Symbology.LayerManager.OpenRasterLayer">
            <summary>
            This opens a file, but populates the dialog filter with only raster formats.
            </summary>
            <returns>An IRaster with the data from the file specified in an open file dialog</returns>
        </member>
        <member name="M:DotSpatial.Symbology.LayerManager.OpenVectorLayer">
            <summary>
            This opens a file, but populates the dialog filter with only raster formats.
            </summary>
            <returns>An IFeatureSet with the data from the file specified in a dialog</returns>
        </member>
        <member name="M:DotSpatial.Symbology.LayerManager.OpenRasterLayer(System.String)">
            <summary>
            This attempts to open the specified raster file and returns an associated layer
            </summary>
            <param name="fileName">The string fileName to open</param>
            <returns>An IRaster with the data from the file specified in an open file dialog</returns>
        </member>
        <member name="M:DotSpatial.Symbology.LayerManager.OpenVectorLayer(System.String)">
            <summary>
            This attempts to open the specified vector file and returns an associated layer
            </summary>
            <param name="fileName">the string fileName to open</param>
            <returns>An IFeatureSet with the data from the file specified in a dialog</returns>
        </member>
        <member name="M:DotSpatial.Symbology.LayerManager.OpenLayer(System.Collections.Generic.ICollection{DotSpatial.Symbology.ILayer})">
            <summary>
            Opens a new layer and automatically adds it to the specified container.
            </summary>
            <param name="container">The container (usually a LayerCollection) to add to</param>
            <returns>The layer after it has been created and added to the container</returns>
        </member>
        <member name="M:DotSpatial.Symbology.LayerManager.OpenLayer(DotSpatial.Data.IProgressHandler)">
            <summary>
            This launches an open file dialog and attempts to load the specified file.
            </summary>
            <param name="progressHandler">Specifies the progressHandler to receive progress messages.  This value overrides the property on this DataManager.</param>
            <returns>A Layer</returns>
        </member>
        <member name="M:DotSpatial.Symbology.LayerManager.OpenLayer">
            <summary>
            This launches an open file dialog and attempts to load the specified file.
            </summary>
            <returns>A Layer created from the file</returns>
        </member>
        <member name="M:DotSpatial.Symbology.LayerManager.OpenLayer(System.String)">
            <summary>
            Attempts to call the open fileName method for any ILayerProvider plugin
            that matches the extension on the string.
            </summary>
            <param name="fileName">A String fileName to attempt to open.</param>
        </member>
        <member name="M:DotSpatial.Symbology.LayerManager.OpenLayer(System.String,System.Collections.Generic.ICollection{DotSpatial.Symbology.ILayer})">
            <summary>
            Opens a new layer and automatically adds it to the specified container.
            </summary>
            <param name="fileName">A String fileName to attempt to open.</param>
            <param name="container">The container (usually a LayerCollection) to add to</param>
            <returns>The layer after it has been created and added to the container</returns>
        </member>
        <member name="M:DotSpatial.Symbology.LayerManager.OpenLayer(System.String,DotSpatial.Data.IProgressHandler)">
            <summary>
            This launches an open file dialog and attempts to load the specified file.
            </summary>
            <param name="fileName">A String fileName to attempt to open.</param>
            <param name="progressHandler">Specifies the progressHandler to receive progress messages.  This value overrides the property on this DataManager.</param>
            <returns>A Layer</returns>
        </member>
        <member name="M:DotSpatial.Symbology.LayerManager.OpenLayer(System.String,System.Boolean,System.Collections.Generic.ICollection{DotSpatial.Symbology.ILayer},DotSpatial.Data.IProgressHandler)">
            <summary>
            Attempts to call the open fileName method for any ILayerProvider plugin
            that matches the extension on the string.
            </summary>
            <param name="fileName">A String fileName to attempt to open.</param>
            <param name="inRam">A boolean value that if true will attempt to force a load of the data into memory.  This value overrides the property on this LayerManager.</param>
            <param name="container">A container to open this layer in</param>
            <param name="progressHandler">Specifies the progressHandler to receive progress messages.  This value overrides the property on this LayerManager.</param>
            <returns>An ILayer</returns>
        </member>
        <member name="M:DotSpatial.Symbology.LayerManager.CreateRasterLayer(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Type,System.String[])">
            <summary>
            This create new method implies that this provider has the priority for creating a new file.
            An instance of the dataset should be created and then returned.  By this time, the fileName
            will already be checked to see if it exists, and deleted if the user wants to overwrite it.
            </summary>
            <param name="name">The string fileName for the new instance.</param>
            <param name="driverCode">The string short name of the driver for creating the raster.</param>
            <param name="xSize">The number of columns in the raster.</param>
            <param name="ySize">The number of rows in the raster.</param>
            <param name="numBands">The number of bands to create in the raster.</param>
            <param name="dataType">The data type to use for the raster.</param>
            <param name="options">The options to be used.</param>
            <returns>A new IRasterLayer.</returns>
        </member>
        <member name="M:DotSpatial.Symbology.LayerManager.OpenImageLayer">
            <summary>
            This opens a file, but populates the dialog filter with only raster formats.
            </summary>
            <returns>for now an ILayerSet</returns>
        </member>
        <member name="M:DotSpatial.Symbology.LayerManager.OnProvidersLoaded(System.Collections.Generic.List{DotSpatial.Symbology.ILayerProvider})">
            <summary>
            Triggers the DirectoryProvidersLoaded event
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LayerManager.LoadProvidersFromDirectories">
            <summary>
            This should be called once all the permitted directories have been set in the code.
            This will not affect the PreferredProviders or the general list of Providers.
            These automatically have the lowest priority and will only be used if nothing
            else works.  Use the PreferredProviders to force preferential loading of
            a plugin LayerProvider.
            </summary>
            <returns>A list of just the newly added LayerProviders from this method.</returns>
        </member>
        <member name="M:DotSpatial.Symbology.LayerManager.LoadProvidersFromAssembly(System.String)">
            <summary>
            Given a string fileName for the "*.dll" file, this will attempt to load any classes that implement the
            ILayerProvder interface.
            </summary>
            <param name="fileName">The string path of the assembly to load from.</param>
            <returns>A list that contains only the providers that were just loaded.  This may be a list of count 0, but shouldn't return null.</returns>
        </member>
        <member name="P:DotSpatial.Symbology.LayerManager.DefaultLayerManager">
            <summary>
            Gets or sets the implemenation of ILayerManager for the project to use when
            accessing data.  This is THE place where the LayerManager can be replaced
            by a different data manager.  If you add this data manager to your
            project, this will automatically set itself as the DefaultLayerManager.
            However, since each DM will do this, you may have to control this manually
            if you add more than one LayerManager to the project in order to set the
            one that will be chosen.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LayerManager.ActiveProjectLayers">
            <summary>
            Gets or sets a temporary list of active project layers.  This is designed to house
            the layers from a map frame when the property grids are shown for layers in that
            map frame.  This list on the DefaultLayerManager is what is used to create the
            list that populates dropdowns that can take a Layer as a parameter.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LayerManager.ImageReadFilter">
            <summary>
            Gets or sets the dialog read filter to use for opening data files.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LayerManager.ImageWriteFilter">
            <summary>
            Gets or sets the dialog write filter to use for saving data files.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LayerManager.LayerProviders">
            <summary>
            Gets or sets the list of ILayerProviders that should be used in the project.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LayerManager.LayerProviderDirectories">
            <summary>
            Gets or sets the path (either as a full path or as a path relative to
            the DotSpatial.dll) to search for plugins that implement the ILayerProvider interface.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LayerManager.DialogReadFilter">
            <summary>
            Gets or sets the dialog read filter to use for opening data files.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LayerManager.DialogWriteFilter">
            <summary>
            Gets or sets the dialog write filter to use for saving data files.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LayerManager.RasterReadFilter">
            <summary>
            Gets or sets the dialog read filter to use for opening data files that are specifically raster formats.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LayerManager.RasterWriteFilter">
            <summary>
            Gets or sets the dialog write filter to use for saving data files.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LayerManager.VectorReadFilter">
            <summary>
            Gets or sets the dialog read filter to use for opening data files.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LayerManager.VectorWriteFilter">
            <summary>
            Gets or sets the dialog write filter to use for saving data files.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LayerManager.LoadInRam">
            <summary>
            Sets the default condition for how this data manager should try to load layers.
            This will be overridden if the inRam property is specified as a parameter.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LayerManager.PreferredProviders">
            <summary>
            Gets or sets a dictionary of ILayerProviders with corresponding extensions.  The
            standard order is to try to load the data using a PreferredProvider.  If that
            fails, then it will check the list of dataProviders, and finally, if that fails,
            it will check the plugin Layer Providers in directories.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LayerManager.ProgressHandler">
            <summary>
            Gets or sets a progress handler for any open operations that are intiated by this
            LayerManager and don't override this value with an IProgressHandler specified in the parameters.
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.LayerManager.DirectoryProvidersLoaded">
            <summary>
            Occurs after the directory providers have been loaded into the project.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.LayerFrame">
            <summary>
            This is a class that organizes a list of renderable layers into a single "view" which might be
            shared by multiple displays.  For instance, if you have a map control and a print preview control,
            you could draw the same data frame property on both, just by passing the graphics object for each.
            Be sure to handle any scaling or translation that you require through the Transform property
            of the graphics object as it will ultimately be that scale which is used to back-calculate the
            appropriate pixel sizes for point-size, line-width and other non-georeferenced characteristics.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.Group">
            <summary>
            Group
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.IGroup">
            <summary>
            Group
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.IGroup.ResumeEvents">
            <summary>
            Resume events will resume events on the layers if all the suspensions are
            canceled out.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.IGroup.SuspendEvents">
            <summary>
            Adds one more increment of suspension which will prevent events from firing
            for the layers.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.IGroup.GetLayers">
            <summary>
            Gets the layers cast as ILayer without any information about the actual drawing methods.
            This is useful for handling methods that my come from various types of maps.
            </summary>
            <returns>An enumerable collection of ILayer</returns>
        </member>
        <member name="M:DotSpatial.Symbology.IGroup.GetLayerCount(System.Boolean)">
            <summary>
            Returns the number of data layers, not counting groups.  If recursive is true, then layers that are within
            groups will be counted, even though the groups themselves are not.
            </summary>
            <param name="recursive">Boolean, if true forces checking even the number of child members.</param>
            <returns>An integer representing the total number of layers in this collection and its children.</returns>
        </member>
        <member name="M:DotSpatial.Symbology.IGroup.LegendSnapShot(System.Int32)">
            <summary>
            Returns a snapshot image of this group
            </summary>
            <param name="imgWidth">Width in pixels of the returned image (height is determined by the number of layers in the group)</param>
            <returns>Bitmap of the group and sublayers (expanded)</returns>
        </member>
        <member name="M:DotSpatial.Symbology.IGroup.LayerHandle(System.Int32)">
            <summary>
            Gets the layer handle of the specified layer
            </summary>
            <param name="positionInGroup">0 based index into list of layers</param>
            <returns>Layer's handle on success, -1 on failure</returns>
        </member>
        <member name="E:DotSpatial.Symbology.IGroup.LayerAdded">
            <summary>
            This occurs when a new layer is added either to this group, or one of the child groups within this group.
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.IGroup.LayerRemoved">
            <summary>
            This occurs when a layer is removed from this group.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IGroup.EventsSuspended">
            <summary>
            Gets whether or not the events are suspended on the layer collection
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IGroup.Handle">
            <summary>
            Gets the integer handle for this group
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IGroup.Icon">
            <summary>
            Gets or sets the icon
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IGroup.LayerCount">
            <summary>
            Gets the integer count of layers.  This can also be accessed through Layers.Count.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IGroup.LayersVisible">
            <summary>
            Gets or sets the visibility of the layers within this group.
            Note: When reading this property, it returns true if any layer is visible within
            this group
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IGroup.ParentGroup">
            <summary>
            Gets the parent group of this group.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IGroup.StateLocked">
            <summary>
            gets or sets the locked property, which prevents the user from changing the visual state
            except layer by layer
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.Group.#ctor">
            <summary>
            Creates a new instance of Group
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.Group.#ctor(DotSpatial.Symbology.IFrame,DotSpatial.Data.IProgressHandler)">
            <summary>
            Creates a group that sits in a layer list and uses the specified progress handler
            </summary>
            <param name="frame"></param>
            <param name="progressHandler">the progress handler</param>
        </member>
        <member name="M:DotSpatial.Symbology.Group.#ctor(System.Collections.Generic.ICollection{DotSpatial.Symbology.ILayer},DotSpatial.Symbology.IFrame,DotSpatial.Data.IProgressHandler)">
            <summary>
            Creates a group that sits in a layer list and uses the specified progress handler
            </summary>
            <param name="container">the layer list</param>
            <param name="frame"></param>
            <param name="progressHandler">the progress handler</param>
        </member>
        <member name="M:DotSpatial.Symbology.Group.Add(DotSpatial.Symbology.ILayer)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Symbology.Group.Remove(DotSpatial.Symbology.ILayer)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Symbology.Group.Insert(System.Int32,DotSpatial.Symbology.ILayer)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Symbology.Group.GetLegendSymbolSize">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Symbology.Group.CanReceiveItem(DotSpatial.Symbology.ILegendItem)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Symbology.Group.LegendSnapShot(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Symbology.Group.Invalidate(DotSpatial.Data.Extent)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Symbology.Group.Invalidate">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Symbology.Group.ClearSelection(DotSpatial.Topology.IEnvelope@)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Symbology.Group.Select(DotSpatial.Topology.IEnvelope,DotSpatial.Topology.IEnvelope,DotSpatial.Symbology.SelectionMode,DotSpatial.Topology.IEnvelope@)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Symbology.Group.GetLayers">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Symbology.Group.GetLayerCount(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Symbology.Group.InvertSelection(DotSpatial.Topology.IEnvelope,DotSpatial.Topology.IEnvelope,DotSpatial.Symbology.SelectionMode,DotSpatial.Topology.IEnvelope@)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Symbology.Group.UnSelect(DotSpatial.Topology.IEnvelope,DotSpatial.Topology.IEnvelope,DotSpatial.Symbology.SelectionMode,DotSpatial.Topology.IEnvelope@)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Symbology.Group.SuspendEvents">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Symbology.Group.ResumeEvents">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Symbology.Group.LayerHandle(System.Int32)">
            <summary>
            Gets the layer handle of the specified layer
            </summary>
            <param name="positionInGroup">0 based index into list of layers</param>
            <returns>Layer's handle on success, -1 on failure</returns>
        </member>
        <member name="M:DotSpatial.Symbology.Group.OnCreateGroup">
            <summary>
            Creates a virtual method when sub-groups are being created
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.Group.Handle_Layer_Events(DotSpatial.Symbology.ILayerEvents)">
            <summary>
            Given a new LayerCollection, we need to be sensitive to certain events
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.Group.OnLayerRemoved(System.Object,DotSpatial.Symbology.LayerEventArgs)">
            <summary>
            Occurs when removing a layer.  This also fires the LayerRemoved event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DotSpatial.Symbology.Group.OnLayerAdded(System.Object,DotSpatial.Symbology.LayerEventArgs)">
            <summary>
            Simply echo this event out to members above this group that might be listening to it.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DotSpatial.Symbology.Group.Ignore_Layer_Events(DotSpatial.Symbology.ILayerEvents)">
            <summary>
            When setting an old layer collection it is advisable to not only add
            new handlers to the new collection, but remove the handlers related
            to the old collection.
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:DotSpatial.Symbology.Group.Dispose(System.Boolean)">
            <summary>
            Disposes the unmanaged resourced of this group.  If disposeManagedResources is true, then this will
            also dispose the resources of the child layers and groups unless they are dispose locked.
            </summary>
            <param name="disposeManagedResources">Boolean, true to dispose child objects and set managed members to null.</param>
        </member>
        <member name="M:DotSpatial.Symbology.Group.IndexOf(DotSpatial.Symbology.ILayer)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Symbology.Group.RemoveAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Symbology.Group.Clear">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Symbology.Group.Contains(DotSpatial.Symbology.ILayer)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Symbology.Group.CopyTo(DotSpatial.Symbology.ILayer[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Symbology.Group.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="E:DotSpatial.Symbology.Group.LayerAdded">
            <summary>
            This occurs when a new layer is added either to this group, or one of the child groups within this group.
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.Group.LayerRemoved">
            <summary>
            This occurs when a layer is removed from this group.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.Group.EventsSuspended">
            <inheritdoc />
        </member>
        <member name="P:DotSpatial.Symbology.Group.Layers">
            <summary>
            gets or sets the list of layers.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.Group.IsVisible">
            <summary>
            Boolean, true if any sub-layers in the group are visible.  Setting this
            will force all the layers in this group to become visible.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.Group.Extent">
            <summary>
            The envelope that contains all of the layers for this data frame.  Essentially this would be
            the extents to use if you want to zoom to the world view.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.Group.Handle">
            <summary>
            Gets the integer handle for this group
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.Group.Icon">
            <summary>
            Gets or sets the icon
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.Group.InvalidRegion">
            <summary>
            Gets the currently invalidated region as a union of all the
            invalidated regions of individual layers in this group.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.Group.LayerCount">
            <summary>
            Returns the count of the layers that are currently stored in this map frame.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.Group.LayersVisible">
            <summary>
            Gets a boolean that is true if any of the immediate layers or groups contained within this
            control are visible.  Setting this will set the visibility for each of the members of this
            map frame.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.Group.LegendItems">
            <summary>
            This is a different view of the layers cast as legend items.  This allows
            easier cycling in recursive legend code.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.Group.ParentGroup">
            <summary>
            Gets the parent group of this group.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.Group.ProgressHandler">
            <summary>
            Gets or sets the progress handler to use.  Setting this will set the progress handler for
            each of the layers in this map frame.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.Group.StateLocked">
            <summary>
            gets or sets the locked property, which prevents the user from changing the visual state
            except layer by layer
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.Group.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:DotSpatial.Symbology.Group.Count">
            <inheritdoc />
        </member>
        <member name="P:DotSpatial.Symbology.Group.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="T:DotSpatial.Symbology.IFrame">
            <summary>
            This interface stores a single extent window describing a view, and also contains
            the list of all the layers associated with that view.  The layers are ordered.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.IFrame.Add(DotSpatial.Data.IFeatureSet)">
            <summary>
            This will create a new layer from the featureset and add it.
            </summary>
            <param name="featureSet">Any valid IFeatureSet that does not yet have drawing characteristics</param>
        </member>
        <member name="E:DotSpatial.Symbology.IFrame.UpdateMap">
            <summary>
            Occurs when some items should no longer render, and the map needs a refresh.
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.IFrame.ViewExtentsChanged">
            <summary>
            Occurs after zooming to a specific location on the map and causes a camera recent.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IFrame.ExtentsInitialized">
            <summary>
            Gets or sets a boolean that controls whether or not a newly added layer
            will also force a zoom to that layer.  If this is true, then nothing
            will happen.  Otherwise, adding layers to this frame or a group in this
            frame will set the extent.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IFrame.DrawingLayers">
            <summary>
            Drawing layers are tracked separately, and do not appear in the legend.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IFrame.SelectedLayer">
            <summary>
            Gets or sets the currently active layer.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IFrame.SmoothingMode">
            <summary>
            Controls the smoothing mode.  Default or None will have faster performance
            at the cost of quality.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IFrame.ViewExtents">
            <summary>
            This is the geographic envelope in view.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LayerFrame.#ctor">
            <summary>
            The Constructor for the MapFrame object
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LayerFrame.#ctor(System.ComponentModel.IContainer)">
             <summary>
            
             </summary>
             <param name="container"></param>
        </member>
        <member name="M:DotSpatial.Symbology.LayerFrame.LegendSymbol_Painted(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws the layers icon to the legend
            </summary>
            <param name="g"></param>
            <param name="box"></param>
        </member>
        <member name="M:DotSpatial.Symbology.LayerFrame.SuspendExtentChanged">
            <summary>
            Suspends firing the ExtentsChanges event.  It only fires if all suspension is gone.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LayerFrame.ResumeExtentChanged">
            <summary>
            Resumes firing the method, and will fire it automatically if any changes have occurred.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LayerFrame.Add(DotSpatial.Data.IFeatureSet)">
            <summary>
            This will create a new layer from the featureset and add it.
            </summary>
            <param name="featureSet">Any valid IFeatureSet that does not yet have drawing characteristics</param>
        </member>
        <member name="M:DotSpatial.Symbology.LayerFrame.Layers_ZoomToLayer(System.Object,DotSpatial.Symbology.EnvelopeArgs)">
            <summary>
            This adjusts the extents when ZoomToLayer is called in one of the internal layers.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DotSpatial.Symbology.LayerFrame.Layers_LayerAdded(System.Object,DotSpatial.Symbology.LayerEventArgs)">
            <summary>
            Zooms to the envelope if no envelope has been established for this frame.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DotSpatial.Symbology.LayerFrame.OnExtentsChanged(DotSpatial.Data.Extent)">
            <summary>
            Fires the ExtentsChanged event
            </summary>
            <param name="ext"></param>
        </member>
        <member name="M:DotSpatial.Symbology.LayerFrame.OnUpdateMap">
            <summary>
            Fires the ExtentsChanged event
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LayerFrame.Handle_Layer_Events(DotSpatial.Symbology.ILayerEvents)">
            <summary>
            This is responsible for wiring the ZoomToLayer event from any layers
            in the map frame whenever the layer collection is changed.
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:DotSpatial.Symbology.LayerFrame.Ignore_Layer_Events(DotSpatial.Symbology.ILayerEvents)">
            <summary>
            This is responsible for unwiring the ZoomToLayer event.
            </summary>
            <param name="collection"></param>
        </member>
        <member name="E:DotSpatial.Symbology.LayerFrame.UpdateMap">
            <summary>
            Occurs when the visible region being displayed on the map should update
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.LayerFrame.ViewExtentsChanged">
            <summary>
            Occurs after zooming to a specific location on the map and causes a camera recent.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LayerFrame.DrawingLayers">
            <summary>
            Drawing layers are tracked separately, and do not appear in the legend.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LayerFrame.Extent">
            <summary>
            Overrides the default behavior for groups, which should return null in the
            event that they have no layers, with a more tolerant, getting started
            behavior where geographic coordinates are assumed.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LayerFrame.Parent">
            <summary>
            Gets the container control that this MapFrame belongs to.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LayerFrame.ExtentsInitialized">
            <inheritdoc />
        </member>
        <member name="P:DotSpatial.Symbology.LayerFrame.IsVisible">
            <summary>
            If this is false, then the drawing function will not render anything.
            Warning!  This will also prevent any execution of calculations that take place
            as part of the drawing methods and will also abort the drawing methods of any
            sub-members to this IRenderable.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LayerFrame.SelectedLayer">
            <summary>
            Gets the currently selected layer.  This will be an active layer that is used for operations.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LayerFrame.SmoothingMode">
            <summary>
            Controls the smoothing mode.  Default or None will have faster performance
            at the cost of quality.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LayerFrame.ViewExtents">
            <summary>
            This should be the geographic extents visible in the map.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.IView">
            <summary>
            A smaller interface that just gives the user enough control to draw on a map surface
            without giving them the ability to change the base control.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.IView.Pan(System.Int32,System.Int32)">
            <summary>
            Causes the view to shift in geographic coordinates by the specified dX and dY.
            The geographic width and height of the Extents will remain the same, as
            will the aspect ratio.
            </summary>
            <param name="dX">Double specifying the pixel change in X position</param>
            <param name="dY">Double specifying the pixel change in Y position</param>
        </member>
        <member name="M:DotSpatial.Symbology.IView.Zoom(System.Double)">
            <summary>
            Expands or shrinks the envelope so that it's new size is the specified
            percent of the previous size.  The aspect ratio will be preserved.
            </summary>
            <param name="percent">The double percentage of the previous size</param>
            <example>
            Zoom in to a geographic extents half as large: Zoom(50);
            Zoom out to a geographic extents twice as large: Zoom(200);
            </example>
        </member>
        <member name="M:DotSpatial.Symbology.IView.PixelToProj(System.Int32,System.Int32,System.Double@,System.Double@)">
            <summary>
            Transforms a valid location on the screen (relative to the upper left corner of
            the map) into world coordinates (like longitude, latitude)
            </summary>
            <param name="pixelX">The integer pixel location relative to the left of the control </param>
            <param name="pixelY">The integer pixel location relative to the top of the control</param>
            <param name="x">The double horizontal or longitude coordinate</param>
            <param name="y">The double vertical or latitude coordinate</param>
        </member>
        <member name="M:DotSpatial.Symbology.IView.PixelToProj(System.Drawing.Point)">
            <summary>
            Transforms a valid location on the screen (relative to the upper left corner of
            the map) into world coordinates (like longitude, latitude)
            </summary>
            <param name="pixelPosition">A Point showing the PixelPosition</param>
            <returns>A Valid ICoordiante showing the location of the point in geographic coordinates</returns>
        </member>
        <member name="M:DotSpatial.Symbology.IView.PixelToProj(System.Drawing.Rectangle)">
            <summary>
            Transforms a valid location on the screen (relative to the upper left corner of
            the map) into world coordinates (like longitude, latitude)
            </summary>
            <param name="window">A Rectangle in pixel coordinates to find the geographic equivalent of</param>
            <returns>A Valid IEnvelope that shows the location on the screen</returns>
        </member>
        <member name="M:DotSpatial.Symbology.IView.ProjToPixel(System.Double,System.Double,System.Int32@,System.Int32@)">
            <summary>
            Transforms the specified world location (like latitude, longitude) into a
            valid screen location (measured in pixels from the upper left corner of the map)
            </summary>
            <param name="x">The double horizontal or longitude coordinate</param>
            <param name="y">The double vertical or latitude coordinate</param>
            <param name="pixelX">The integer pixel location relative to the left of the control </param>
            <param name="pixelY">The integer pixel location relative to the top of the control</param>
        </member>
        <member name="M:DotSpatial.Symbology.IView.ProjToPixel(DotSpatial.Topology.Coordinate)">
            <summary>
            Transforms the specified world location (like latitude, longitude) into a
            valid screen location (measured in pixels from the upper left corner of the map)
            </summary>
            <param name="coord"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.IView.ProjToPixel(DotSpatial.Data.Extent)">
            <summary>
            Transforms the specified world envelope (like latitude, longitude) into a
            valid screen rectangle (measured in pixels from the upper left corner of the map)
            </summary>
            <param name="env">The envelope in geographic coordinates</param>
            <returns>A Rectangle relative to the upper left corner of the control</returns>
        </member>
        <member name="P:DotSpatial.Symbology.IView.Graphics">
            <summary>
            Gets a graphics surface that is essentially the "white box" area of a map to draw on.
            By default the GraphicsUnit should be set to world and the PageScale and PageOffset
            should be set to the appropriate value for world coordinates.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IView.Extents">
            <summary>
            Gets the IEnvelope representing the world coordinate extents of the map
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.IView.ExtentsChanged">
            <summary>
            Occurs when the visible region being displayed on the map changes
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.IPropertyDialogProvider">
            <summary>
            IPropertyDialogProvider
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.IPropertyDialogProvider.ShowDialog(System.Object)">
            <summary>
            Shows a PropertyGrid Dialog and uses the specified object as the edit copy.
            </summary>
            <param name="editCopy">A clone of the actual object to be edited.  This should not be the original object.</param>
        </member>
        <member name="E:DotSpatial.Symbology.IPropertyDialogProvider.ChangesApplied">
            <summary>
            Fires an event signifying that the item has been updated
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IPropertyDialogProvider.ChangeItem">
            <summary>
            Gets the item that was changed by this operation.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.FeatureChangeEnvelopeArgs">
            <summary>
            FeatureChangeEnvelopeArgs
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.FeatureChangeArgs">
            <summary>
            SelectionEventArgs
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureChangeArgs.#ctor(System.Collections.Generic.List{System.Int32})">
            <summary>
            Creates a new instance of SelectionEventArgs
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureChangeArgs.ChangedFeatures">
            <summary>
            Gets the list of features that were changed by this event.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureChangeEnvelopeArgs.#ctor(System.Collections.Generic.List{System.Int32},DotSpatial.Topology.IEnvelope)">
            <summary>
            Creates a new instance of FeatureChangeEnvelopeArgs
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureChangeEnvelopeArgs.Envelope">
            <summary>
            Gets the geographic envelope for the most recent selection event.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.DrawCompletedArgs">
            <summary>
            A set of PaintEventArgs that can be used before a drawing function in order to cancel an event.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.DrawArgs">
            <summary>
            DrawArgs contains the parameters necessary for 2D drawing
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.DrawArgs.#ctor(System.Drawing.Graphics,DotSpatial.Symbology.DrawWindow)">
            <summary>
            Creates a new instance of DrawArgs
            </summary>
            <param name="inGraphics">A System.Windows.Drawing.Graphics object</param>
            <param name="inDrawWindow">A DotSpatial.Drawing.DrawWindow to draw to</param>
        </member>
        <member name="M:DotSpatial.Symbology.DrawArgs.#ctor(System.Drawing.Graphics,DotSpatial.Symbology.DrawWindow,System.Int32)">
            <summary>
            Creates a new instance of DrawArgs
            </summary>
            <param name="inGraphics">A System.Windows.Drawing.Graphics object</param>
            <param name="inDrawWindow">A DotSpatial.Drawing.DrawWindow to draw to</param>
            <param name="inPart">An integer part representing a value from 0 to NumParts being drawn</param>
        </member>
        <member name="M:DotSpatial.Symbology.DrawArgs.#ctor(System.Drawing.Graphics,DotSpatial.Symbology.DrawWindow,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of DrawArgs
            </summary>
            <param name="inGraphics">A System.Windows.Drawing.Graphics object</param>
            <param name="inDrawWindow">A DotSpatial.Drawing.DrawWindow to draw to</param>
            <param name="inPart">An integer part representing a value from 0 to NumParts being drawn</param>
            <param name="inStage">The integer stage representing an object that has several stages, for all of the parts to be passed through</param>
        </member>
        <member name="P:DotSpatial.Symbology.DrawArgs.Graphics">
            <summary>
            Gets the Graphics device to draw to
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.DrawArgs.DrawWindow">
            <summary>
            Gets the geographic extent for the drawing operation
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.DrawArgs.Part">
            <summary>
            Gets the part index being drawn.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.DrawArgs.Stage">
            <summary>
            Gets the integer stage index.  As an example, if all the borders are drawn first, and then all the fillings are drawn,
            but each stage has several parts, the stage gives a way to subdivide a larger object into several drawing passes.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.DrawCompletedArgs.#ctor(System.Drawing.Graphics,DotSpatial.Symbology.DrawWindow,System.Boolean,System.Exception)">
            <summary>
            Creates a new instance of the DrawCompleted Event Arguments
            </summary>
            <param name="inGraphics">A Graphics surface</param>
            <param name="inDrawWindow">An implementation of DotSpatial.Geometries.IEnvelope defining the geographic drawing region</param>
            <param name="inCancelled">True if the draw method was cancelled before any rendering took place.  A Cancel is different from when an acception is thrown.</param>
            <param name="inException">If an exception occured during rendering, this will not be null.</param>
        </member>
        <member name="M:DotSpatial.Symbology.DrawCompletedArgs.#ctor(DotSpatial.Symbology.DrawArgs,System.Boolean)">
            <summary>
            Creates a default DrawCompleted event for the situation where the drawing was successful, not cancelled and no exception occured
            </summary>
            <param name="args">The DrawArgs being used during the drawing, specifying the Graphics device and geographic envelope</param>
            <param name="inCancelled">A boolean parameter specifying whether or not the drawing was cancelled</param>
        </member>
        <member name="M:DotSpatial.Symbology.DrawCompletedArgs.#ctor(DotSpatial.Symbology.DrawArgs,System.Exception)">
            <summary>
            Creates a new DrawCompleted in the case where an exception was thrown
            </summary>
            <param name="args">The drawing arguments for drawing, specifying the Graphics device and the geographic envelope </param>
            <param name="inException">The Exception being thrown</param>
        </member>
        <member name="P:DotSpatial.Symbology.DrawCompletedArgs.Cancelled">
            <summary>
            Boolean, true if the draw method was cancelled before rendering took place.
            This will not be true if visible was false or an exception was thrown.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.DrawCompletedArgs.Exception">
            <summary>
            An Exception object for situations where the drawing threw an exception.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.BitmapFormatException">
            <summary>
            BitmapFormatException
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.SelectionMode">
            <summary>
            SelectionModes
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.SelectionMode.Contains">
            <summary>
            The vertices of the feature are all inside (and not touching the boundary of) the region.
            </summary>
            <remarks>
            Use ContainsExtent for faster selections.
            </remarks>
        </member>
        <member name="F:DotSpatial.Symbology.SelectionMode.ContainsExtent">
            <summary>
            *Faster, the item to be selected must be completely contained by the extent
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.SelectionMode.CoveredBy">
            <summary>
            The entire region is inside the feature and not touching the border.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.SelectionMode.Covers">
            <summary>
            The feature is completely inside the region, but touching the edges is ok (unlike Contains).
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.SelectionMode.Crosses">
            <summary>
            For this to be true the feature must be a point or a curve and must cross
            the specified
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.SelectionMode.Disjoint">
            <summary>
            The interiors and boundaries don't intersect, touch, or overlap, so they are
            completely separate.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.SelectionMode.IntersectsExtent">
            <summary>
            *Faster, the item will be selected if any part of that item is visible in the extent
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.SelectionMode.Intersects">
            <summary>
            The most inclusive possible.  If any element is touching or overlapping the region in any
            way, then this will be true.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.SelectionMode.Overlaps">
            <summary>
            Like intersects, specifically requires that part of the feature is inside
            and part of the feature is outside of the region.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.SelectionMode.Touches">
            <summary>
            The feature has borders or edges in common, but otherwise does not fall inside
            the region.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.SelectionMode.Within">
            <summary>
            The region is found completely inside the specified region to the extent
            that no borders come in contact with the outside edge of the region.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.SelectionEM">
            <summary>
            SelectionEM
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.SelectionEM.InvertSelection(DotSpatial.Symbology.ISelection,DotSpatial.Topology.IEnvelope)">
            <summary>
            Inverts the selection based on the current SelectionMode
            </summary>
            <param name="self">The ISelection to invert</param>
            <param name="region">The geographic region to reverse the selected state</param>
        </member>
        <member name="T:DotSpatial.Symbology.IPolygonScheme">
            <summary>
            IPointScheme
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IPolygonScheme.Categories">
            <summary>
            Gets the list of scheme categories belonging to this scheme.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.LineCategoryCollection">
            <summary>
            This is simply an alias to make things a tad (though not much) more understandable
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LineCategoryCollection.OnSelectFeatures(System.Object,DotSpatial.Symbology.ExpressionEventArgs)">
            <summary>
            Instructs the parent layer to select features matching the specified expression.
            </summary>
            <param name="sender">The object sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DotSpatial.Symbology.LineCategoryCollection.OnInclude(DotSpatial.Symbology.ILineCategory)">
            <summary>
            Ensures that newly added categories can navigate to higher legend items.
            </summary>
            <param name="item">The newly added legend item.</param>
        </member>
        <member name="M:DotSpatial.Symbology.LineCategoryCollection.OnCopy(DotSpatial.Data.CopyList{DotSpatial.Symbology.ILineCategory})">
            <summary>
            Overrides the default OnCopy behavior to remove the duplicte SelectFeatures event handler
            </summary>
            <param name="copy"></param>
        </member>
        <member name="M:DotSpatial.Symbology.LineCategoryCollection.OnExclude(DotSpatial.Symbology.ILineCategory)">
             <summary>
            
             </summary>
             <param name="item"></param>
        </member>
        <member name="M:DotSpatial.Symbology.LineCategoryCollection.UpdateItemParentPointers">
            <summary>
            Cycles through all the categories and resets the parent item.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LineCategoryCollection.Scheme">
            <summary>
            Gets or sets the parent line scheme
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.LineCategoryCollection.SelectFeatures">
            <summary>
            Occurs when a category indicates that its filter expression should be used
            to select its members.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.LineCategory">
            <summary>
            PointSchemeCategory
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.FeatureCategory">
            <summary>
            A Scheme category does not reference individual members or indices, but simply describes a symbolic representation that
            can be used by an actual category.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.Category">
            <summary>
            Category
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.Category.#ctor">
            <summary>
            Creates a new instance of Category
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.Category.#ctor(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Creaates a new instance of this category, and tailors the range to the specifeid values.
            </summary>
            <param name="startValue">The start value</param>
            <param name="endValue">The end value</param>
        </member>
        <member name="M:DotSpatial.Symbology.Category.#ctor(System.Double)">
            <summary>
            Creates a category that has the same value for both minimum and maximum
            </summary>
            <param name="value">The value to use</param>
        </member>
        <member name="M:DotSpatial.Symbology.Category.ApplySnapping(DotSpatial.Symbology.IntervalSnapMethod,System.Int32,System.Collections.Generic.List{System.Double})">
            <summary>
            Applies the snapping rule directly to the categories, instead of the breaks.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.Category.NearestValue(System.Double,System.Collections.Generic.List{System.Double})">
            <summary>
            Searches the list and returns the nearest value in the list to the specified value.
            </summary>
            <param name="value"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.Category.ApplyMinMax(DotSpatial.Symbology.EditorSettings)">
            <summary>
            Since rasters are numeric and not relying on an SQL expression, this allows
            this only sets the legend text using the method and digits to help with
            formatting.
            </summary>
            <param name="settings">An EditorSettings from either a feature scheme or color scheme.</param>
        </member>
        <member name="M:DotSpatial.Symbology.Category.Contains(System.Double)">
            <summary>
            Tests to see if the specified value falls in the range specified by this ColorCategory
            </summary>
            <param name="value">The value of type int to test</param>
            <returns>Boolean, true if the value was found in the range</returns>
        </member>
        <member name="M:DotSpatial.Symbology.Category.ToString">
            <summary>
            Returns this Number as a string.  This uses the DotSpatial.Globalization.CulturePreferences and
            Controls the number type using the NumberFormat enumeration plus the DecimalCount to create
            a number format.
            </summary>
            <returns>The string created using the specified number format and precision.</returns>
        </member>
        <member name="M:DotSpatial.Symbology.Category.ToString(DotSpatial.Symbology.IntervalSnapMethod,System.Int32)">
            <summary>
             Returns this Number as a string.
            </summary>
            <param name="method">Specifies how the numbers are modified so that the numeric text can be cleaned up.</param>
            <param name="digits">An integer clarifying digits for rounding or significant figure situations.</param>
            <returns>A string with the formatted number.</returns>
        </member>
        <member name="P:DotSpatial.Symbology.Category.Maximum">
            <summary>
            Maximum this is a convenient caching tool only, and doesn't control the filter expression at all.
            Use ApplyMinMax after setting this to update the filter expression.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.Category.Minimum">
            <summary>
            Gets or sets the color to be used for this break.  For
            BiValued breaks, this only sets one of the colors.  If
            this is higher than the high value, both are set to this.
            If this equals the high value, IsBiValue will be false.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.Category.Range">
            <summary>
            Gets the numeric Range for this color break.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.Category.Status">
            <summary>
            Gets or sets a status message for this string.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.Category.Tag">
            <summary>
            This is not used by DotSpatial, but is provided for convenient linking for this object
            in plugins or other applications.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureCategory.#ctor">
            <summary>
            Creates a new instance of FeatureSchemeCategory
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureCategory.ApplyMinMax(DotSpatial.Symbology.EditorSettings)">
            <summary>
            Applies the minimum and maximum in order to create the filter expression.  This will also
            count the members that match the specified criteria.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureCategory.LegendSymbol_Painted(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Controls what happens in the legend when this item is instructed to draw a symbol.
            </summary>
            <param name="g"></param>
            <param name="box"></param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureCategory.IsWithinLegendSelection">
            <summary>
            Queries this layer and the entire parental tree up to the map frame to determine if
            this layer is within the selected layers.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureCategory.GetColor">
            <summary>
            This gets a single color that attempts to represent the specified
            category.  For polygons, for example, this is the fill color (or central fill color)
            of the top pattern.  If an image is being used, the color will be gray.
            </summary>
            <returns>The System.Color that can be used as an approximation to represent this category.</returns>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureCategory.SetColor(System.Drawing.Color)">
            <summary>
            This applies the color to the top symbol stroke or pattern.
            </summary>
            <param name="color">The Color to apply</param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureCategory.DisplayExpression">
            <summary>
            In some cases, it is useful to simply be able to show an approximation of the actual expression.
            This also removes brackets from the field names to make it slightly cleaner.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureCategory.OnCopy(DotSpatial.Symbology.Descriptor)">
            <summary>
            Makes it so that if there are any pre-existing listeners to the SelectFeatuers
            event when creating a clone of this object, those listeners are removed.
            They should be added correctly when the cloned item is added to the collection,
            after being cloned.
            </summary>
            <param name="copy"></param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureCategory.CreateContextMenuItems">
            <summary>
            Forces the creation of an entirely new context menu list.  That way, we are not
            pointing to an event handler in the previous parent.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureCategory.OnSelectFeatures">
            <summary>
            Fires the SelectFeatures event
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.FeatureCategory.SelectFeatures">
            <summary>
            Occurs when the select features context menu is clicked.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureCategory.Symbolizer">
            <summary>
            Gets or sets the symbolizer used for this category.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureCategory.SelectionSymbolizer">
            <summary>
            Gets or sets the symbolizer used for this category
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureCategory.FilterExpression">
            <summary>
            Gets or set the filter expression that is used to add members to generate a category based on this scheme.
            </summary>
            <remarks>[Editor(typeof(ExpressionEditor), typeof(UITypeEditor))]</remarks>
        </member>
        <member name="M:DotSpatial.Symbology.LineCategory.#ctor">
            <summary>
            Creates a new instance of PointSchemeCategory
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LineCategory.#ctor(System.Drawing.Color,System.Drawing.Color,System.Double,System.Drawing.Drawing2D.DashStyle,System.Drawing.Drawing2D.LineCap)">
            <summary>
            Creates a new set of cartographic lines that together form a line with a border.  Since a compound
            pen is used, it is possible to use this to create a transparent line with just two border parts.
            The selection symbolizer will be dark cyan bordering light cyan, but use the same dash and cap
            patterns.
            </summary>
            <param name="fillColor">The fill color for the line</param>
            <param name="borderColor">The border color of the line</param>
            <param name="width">The width of the entire line</param>
            <param name="dash">The dash pattern to use</param>
            <param name="caps">The style of the start and end caps</param>
        </member>
        <member name="M:DotSpatial.Symbology.LineCategory.#ctor(System.Drawing.Color,System.Double)">
            <summary>
            Creates a new line category with the specified color and width
            </summary>
            <param name="color">The color of the unselected line</param>
            <param name="width">The width of both the selected and unselected lines.</param>
        </member>
        <member name="M:DotSpatial.Symbology.LineCategory.#ctor(DotSpatial.Topology.IEnvelope)">
            <summary>
            Creates a new instanec of a default point scheme category where the geographic symbol size has been
            scaled to the specified extent.
            </summary>
            <param name="extent">The geographic extent that is 100 times wider than the geographic size of the points.</param>
        </member>
        <member name="M:DotSpatial.Symbology.LineCategory.#ctor(DotSpatial.Symbology.ILineSymbolizer)">
            <summary>
            Creates a new category based on a symbolizer, and uses the same symbolizer, but with a fill and border color of light cyan
            for the selection symbolizer
            </summary>
            <param name="lineSymbolizer">The symbolizer to use in order to create a category</param>
        </member>
        <member name="M:DotSpatial.Symbology.LineCategory.GetColor">
            <summary>
            This gets a single color that attempts to represent the specified
            category.  For polygons, for example, this is the fill color (or central fill color)
            of the top pattern.  If an image is being used, the color will be gray.
            </summary>
            <returns>The System.Color that can be used as an approximation to represent this category.</returns>
        </member>
        <member name="M:DotSpatial.Symbology.LineCategory.SetColor(System.Drawing.Color)">
            <summary>
            Sets the specified color as the color for the top most stroke.
            </summary>
            <param name="color">The color to apply</param>
        </member>
        <member name="P:DotSpatial.Symbology.LineCategory.Symbolizer">
            <summary>
            Gets or sets the symbolizer for this category
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LineCategory.SelectionSymbolizer">
            <summary>
            Gets or sets the symbolizer to use to draw selected features from this category.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.IntervalMethod">
            <summary>
            IntervalMethods
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.IntervalMethod.DefinedInterval">
            <summary>
            A numeric value fixes a constant separation between breaks.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.IntervalMethod.EqualInterval">
            <summary>
            The breaks are set to being evenly spaced.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.IntervalMethod.Geometrical">
            <summary>
            Breaks are calculated according to the following restrictions:
            1) break sizes follow a geometric progression
            2) the number of breaks is specified
            3) the sum of squares of the counts per bin is minimized
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.IntervalMethod.Manual">
            <summary>
            Breaks start equally placed, but can be positioned manually instead.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.IntervalMethod.NaturalBreaks">
            <summary>
            Jenks natural breaks looks for "clumping" in the data and
            attempts to group according to the clumps.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.IntervalMethod.Quantile">
            <summary>
            The breaks are positioned to ensure close to equal quantities
            in each break.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.IntervalMethod.StandardDeviation">
            <summary>
            Not sure how this works yet.  Something to do with standard deviations.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.IIndexSelection">
            <summary>
            IIndexSelection
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.ISelection">
            <summary>
            ISelection
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.IChangeable">
            <summary>
            IChangeable
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.IChangeable.ResumeChanges">
            <summary>
            Resumes the events.  If any changes occured during the period of time when
            the events were suspended, this will automatically fire the chnaged event.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.IChangeable.SuspendChanges">
            <summary>
            Causes this filter collection to suspend the Changed event, so that
            it will only be fired once after a series of updates.
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.IChangeable.Changed">
            <summary>
            Occurs when members are added to or removed from this collection.  If SuspendChanges
            is called, this will temporarilly prevent this event from firing, until ResumeEvents
            has been called.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IChangeable.ChangesSuspended">
            <summary>
            To suspend events, call SuspendChanges.  Then to resume events, call ResumeEvents.  If the
            suspension is greater than 0, then events are suspended.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ISelection.Clear">
            <summary>
            Clears the selection
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ISelection.AddRegion(DotSpatial.Topology.IEnvelope,DotSpatial.Topology.IEnvelope@)">
            <summary>
            Add REgion
            </summary>
            <param name="region"></param>
            <param name="affectedArea"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.ISelection.InvertSelection(DotSpatial.Topology.IEnvelope,DotSpatial.Topology.IEnvelope@)">
             <summary>
            
             </summary>
             <param name="region"></param>
             <param name="affectedArea"></param>
             <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.ISelection.RemoveRegion(DotSpatial.Topology.IEnvelope,DotSpatial.Topology.IEnvelope@)">
             <summary>
            
             </summary>
             <param name="region"></param>
             <param name="affectedArea"></param>
             <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.ISelection.ToFeatureSet">
            <summary>
            Returns a new featureset based on the features in this collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.ISelection.ToFeatureList">
            <summary>
            Generates a list of the features that match this collection
            </summary>
            <returns></returns>
        </member>
        <member name="P:DotSpatial.Symbology.ISelection.Count">
            <summary>
            Gets the integer count of the members in the collection
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ISelection.Envelope">
            <summary>
            Calculates the envelope of this collection
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ISelection.ProgressHandler">
            <summary>
            Gets or sets the handler to use for progress messages during selection.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ISelection.SelectionMode">
            <summary>
            Selection Mode controls how envelopes are treated when working with geometries.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ISelection.SelectionState">
            <summary>
            Gets or sets whether this should work as "Selected" indices (true) or
            "UnSelected" indices (false).
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ISelection.RegionCategory">
            <summary>
            Setting this to a specific category will only allow selection by
            region to affect the features that are within the specified category.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.IIndexSelection.Clear">
            <summary>
            Clears the selection
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.IIndexSelection.AddRange(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Adds a range of indices all at once.
            </summary>
            <param name="indices">The indices to add</param>
        </member>
        <member name="M:DotSpatial.Symbology.IIndexSelection.RemoveRange(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Removes a set of indices all at once
            </summary>
            <param name="indices"></param>
            <returns></returns>
        </member>
        <member name="P:DotSpatial.Symbology.IIndexSelection.Count">
            <summary>
            Gets the integer count of the members in the collection
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.FastDrawnState">
            <summary>
            FastDrawnState uses fields, not properties.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.FastDrawnState.Category">
            <summary>
            The category that describes the symbolic drawing for this item.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.FastDrawnState.Selected">
            <summary>
            Boolean, true if this item should be drawn as being selected
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.FastDrawnState.Visible">
            <summary>
            A Boolean that indicates whether or not this feature should be drawn at all.
            This should default to true.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.FastDrawnState.#ctor">
            <summary>
            Creates a blank fast drawn state
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.FastDrawnState.#ctor(System.Boolean,DotSpatial.Symbology.IFeatureCategory)">
            <summary>
            Creates a new FastDrawnState with the specified parameters
            </summary>
            <param name="sel"></param>
            <param name="cat"></param>
        </member>
        <member name="M:DotSpatial.Symbology.FastDrawnState.ToString">
            <summary>
            Overrides ToString to give a description of the FastDrawnState.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.FastDrawnState.Equals(System.Object)">
            <summary>
            Equality based on the Boolean and category settings
            </summary>
            <param name="obj">The fast drawn state to compare with</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.FastDrawnState.GetHashCode">
            <summary>
            For ordering in a dictionary, if get hash code is the same, then equals is used to test equality.
            For performance, try to make sure that hash codes are different enough for organizing in the
            dictionary, but are the same in cases where Category and Selected are the same.
            </summary>
            <returns>An integer hash code for this item.</returns>
        </member>
        <member name="T:DotSpatial.Symbology.SnapShotEventArgs">
            <summary>
            SnapShotEventArgs
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.SnapShotEventArgs.#ctor(System.Drawing.Bitmap)">
            <summary>
            Creates a new instance of SnapShotEventArgs
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.SnapShotEventArgs.Picture">
            <summary>
            Gets the picture that was taken by the snapshot
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.ShallowCopy">
            <summary>
            Normally, cloning an object starts with MemberwiseClone, which
            creates a shallow copy of the object.  For any members that
            derive from the Descriptor, however, any public properties
            or fields that implement ICloneable are copied (deep copy behavior).
            This is not always desirable, even if the member CAN be copied.
            This attribute causes the deep copy behavior to skip over
            properties marked with this attribute.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.ColorScheme">
            <summary>
            ColorScheme
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ColorScheme.#ctor">
            <summary>
            Creates a new instance of ColorScheme
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ColorScheme.#ctor(DotSpatial.Symbology.ColorSchemeType,DotSpatial.Data.IRaster)">
            <summary>
            Creates a new instance of a color scheme using a predefined color scheme and the minimum and maximum specified
            from the raster itself
            </summary>
            <param name="schemeType">The predefined scheme to use</param>
            <param name="raster">The raster to obtain the minimum and maximum settings from</param>
        </member>
        <member name="M:DotSpatial.Symbology.ColorScheme.#ctor(DotSpatial.Symbology.ColorSchemeType,System.Double,System.Double)">
            <summary>
            This creates a new scheme, applying the specified color scheme, and using the minimum and maximum values indicated.
            </summary>
            <param name="schemeType">The predefined color scheme</param>
            <param name="min">The minimum</param>
            <param name="max">The maximum</param>
        </member>
        <member name="M:DotSpatial.Symbology.ColorScheme.ApplyScheme(DotSpatial.Symbology.ColorSchemeType,DotSpatial.Data.IRaster)">
            <summary>
            Applies the specified color scheme and uses the specified raster to define the
            minimum and maximum to use for the scheme.
            </summary>
            <param name="schemeType"></param>
            <param name="raster"></param>
        </member>
        <member name="M:DotSpatial.Symbology.ColorScheme.CreateNewCategory(System.Drawing.Color,System.Double)">
            <summary>
            Creates the category using a random fill color
            </summary>
            <param name="fillColor">The base color to use for creating the category</param>
            <param name="size">For points this is the larger dimension, for lines this is the largest width</param>
            <returns>A new IFeatureCategory that matches the type of this scheme</returns>
        </member>
        <member name="M:DotSpatial.Symbology.ColorScheme.CreateCategories(DotSpatial.Data.IRaster)">
            <summary>
            Creates the categories for this scheme based on statistics and values
            sampled from the specified raster.
            </summary>
            <param name="raster">The raster to use when creating categories</param>
        </member>
        <member name="M:DotSpatial.Symbology.ColorScheme.GetValues(DotSpatial.Data.IRaster)">
            <summary>
            Gets the values from the raster.  If MaxSampleCount is less than the
            number of cells, then it randomly samples the raster with MaxSampleCount
            values.  Otherwise it gets all the values in the raster.
            </summary>
            <param name="raster">The raster to sample</param>
        </member>
        <member name="M:DotSpatial.Symbology.ColorScheme.ApplyScheme(DotSpatial.Symbology.ColorSchemeType,System.Double,System.Double)">
            <summary>
            Applies the specified color scheme and uses the specified raster to define the
            minimum and maximum to use for the scheme.
            </summary>
            <param name="schemeType"></param>
            <param name="min">THe minimum value to use for the scheme</param>
            <param name="max">THe maximum value to use for the scheme</param>
        </member>
        <member name="M:DotSpatial.Symbology.ColorScheme.CreateRandomCategory">
            <summary>
            Uses the settings on this scheme to create a random category.
            </summary>
            <returns>A new IFeatureCategory</returns>
        </member>
        <member name="M:DotSpatial.Symbology.ColorScheme.OnSetParentItem(DotSpatial.Symbology.ILegendItem)">
            <summary>
            Occurs when setting the parent item and updates the parent item pointers
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:DotSpatial.Symbology.ColorScheme.DrawCategory(System.Int32,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws the category in the specified location.
            </summary>
            <param name="index"></param>
            <param name="g"></param>
            <param name="bounds"></param>
        </member>
        <member name="M:DotSpatial.Symbology.ColorScheme.AddCategory(DotSpatial.Symbology.ICategory)">
            <summary>
            Adds the specified category
            </summary>
            <param name="category"></param>
        </member>
        <member name="M:DotSpatial.Symbology.ColorScheme.DecreaseCategoryIndex(DotSpatial.Symbology.ICategory)">
            <summary>
            Attempts to decrease the index value of the specified category, and returns
            true if the move was successful.
            </summary>
            <param name="category">The category to decrease the index of</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.ColorScheme.RemoveCategory(DotSpatial.Symbology.ICategory)">
            <summary>
            Removes the specified category
            </summary>
            <param name="category"></param>
        </member>
        <member name="M:DotSpatial.Symbology.ColorScheme.InsertCategory(System.Int32,DotSpatial.Symbology.ICategory)">
            <summary>
            Inserts the item at the specified index
            </summary>
            <param name="index"></param>
            <param name="category"></param>
        </member>
        <member name="M:DotSpatial.Symbology.ColorScheme.IncreaseCategoryIndex(DotSpatial.Symbology.ICategory)">
            <summary>
            Attempts to increase the position of the specified category, and returns true
            if the index increase was successful.
            </summary>
            <param name="category">The category to increase the position of</param>
            <returns>Boolean, true if the item's position was increased</returns>
        </member>
        <member name="M:DotSpatial.Symbology.ColorScheme.SuspendEvents">
            <summary>
            Suspends the change item event from firing as the list is being changed
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ColorScheme.ResumeEvents">
            <summary>
            Allows the ChangeItem event to get passed on when changes are made
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ColorScheme.ClearCategories">
            <summary>
            Clears the categories
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ColorScheme.Opacity">
            <summary>
            Gets or sets the floating point value for the opacity
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ColorScheme.Categories">
            <summary>
            Gets or sets the raster categories
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ColorScheme.EditorSettings">
            <summary>
            Gets or sets the raster editor settings associated with this scheme.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.IVectorLayerProvider">
            <summary>
            IFeatureProvider
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.IVectorLayerProvider.CreateNew(System.String,DotSpatial.Topology.FeatureType,System.Boolean,System.Collections.Generic.ICollection{DotSpatial.Symbology.ILayer},DotSpatial.Data.IProgressHandler)">
             <summary>
             This create new method implies that this provider has the priority for creating a new file.
             An instance of the dataset should be created and then returned.  By this time, the fileName
             will already be checked to see if it exists, and deleted if the user wants to overwrite it.
             </summary>
             <param name="fileName">The string fileName for the new instance</param>
             <param name="featureType">Point, Line, Polygon etc.  Sometimes this will be specified, sometimes it will be "Unspecified"</param>
             <param name="inRam">Boolean, true if the dataset should attempt to store data entirely in ram</param>
            <param name="container">The container for this layer.  This can be null.</param>
             <param name="progressHandler">An IProgressHandler for status messages.</param>
             <returns>An IRaster</returns>
        </member>
        <member name="T:DotSpatial.Symbology.LayerSelectedEventArgs">
            <summary>
            LayerEventArgs
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.LayerEventArgs">
            <summary>
            LayerEventArgs
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LayerEventArgs.#ctor(DotSpatial.Symbology.ILayer)">
            <summary>
            Creates a new instance of LayerEventArgs
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LayerEventArgs.Layer">
            <summary>
            Gets a layer
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LayerSelectedEventArgs.#ctor(DotSpatial.Symbology.ILayer,System.Boolean)">
            <summary>
            Creates a new instance of LayerEventArgs
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LayerSelectedEventArgs.IsSelected">
            <summary>
            Gets a boolean that indicates whether or not the layer is selected
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.ISymbolRange">
            <summary>
            Characterizes
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ISymbolRange.IsInRange(System.IComparable)">
            <summary>
            Boolean Tests a value against the minimum and maximum values.
            If the value is greater than or equal to the MinValue and
            is less than or equal to the MaxValue then it will be included.
            </summary>
            <param name="value">The IComparable value to test.  This is usually a numeric value.</param>
            <returns>True if value is between MinValue and MaxValue</returns>
        </member>
        <member name="M:DotSpatial.Symbology.ISymbolRange.MatchesClassification(System.IComparable)">
            <summary>
            The classification must implement IComparable.  The normal value types like
            strings, doubles and integers already do this.  If the CompareTo method
            on value returns 0 when compared to the Classification property of this
            instance, this method will return true.  Otherwise, it returns false.
            </summary>
            <param name="value">Any valid implementation of IComparable.  This can be either
            the default value types like integer or string, or else it can be a custom
            implementation of IComparable.</param>
            <returns>Boolean, true if value.CompareTo returns 0 when compared against this classification.</returns>
        </member>
        <member name="P:DotSpatial.Symbology.ISymbolRange.Minimum">
            <summary>
            The minimum value, inclusive, in a range of values.  If
            the value being tested is less than this value,
            then these properties should not be applied.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ISymbolRange.Maximum">
            <summary>
            Describes the maximum value, inclusive, in a range of values.  If
            the value being tested is greater than this value, then these
            properties should not be applied.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ISymbolRange.Classification">
            <summary>
            The classification for this symbol.  This is the same as
            specifying the MinValue and MaxValue to be equal and testing
            the IsInRange property.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.EditorSettings">
            <summary>
            EditorSettings
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.EditorSettings.#ctor">
            <summary>
            Creates a new instance of EditorSettings
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.EditorSettings.EndColor">
            <summary>
            Gets or sets the characteristics of the "right" color.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.EditorSettings.ExcludeExpression">
            <summary>
            Gets or sets a string that allows the user to use any of the
            data fields to eliminate values from being considered as part
            of the histogram for statistical interval calculations.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.EditorSettings.HueSatLight">
            <summary>
            Gets or sets a boolean indicating to display
            the hue, saturation, lightness as bounds
            instead of start-color, end-color.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.EditorSettings.HueShift">
            <summary>
            Gets or sets the hue shift.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.EditorSettings.IntervalMethod">
            <summary>
            Gets or sets the interval method
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.EditorSettings.MaxSampleCount">
            <summary>
            Gets or sets the maximum sample count.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.EditorSettings.NumBreaks">
            <summary>
            Gets or sets the integer count if equal breaks are used
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.EditorSettings.RampColors">
            <summary>
            Gets or sets whether this editor should ramp the colors,
            or use randomly generated colors.  The default is random.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.EditorSettings.StartColor">
            <summary>
            Gets or sets the characteristics of the "left" color.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.EditorSettings.UseColorRange">
            <summary>
            Gets or sets whether to use the color specifications
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.EditorSettings.IntervalSnapMethod">
            <summary>
            Gets or sets how intervals like equal breaks choose the
            actual values, and whether they are rounded or snapped.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.EditorSettings.IntervalRoundingDigits">
            <summary>
            Gets or sets the number of digits to preserve when IntervalSnapMethod is set to Rounding
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.DrawVerifyArgs">
            <summary>
            A set of PaintEventArgs that can be used before a drawing function in order to cancel an event.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.DrawVerifyArgs.#ctor(System.Drawing.Graphics,DotSpatial.Symbology.DrawWindow,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a new instance of the CancelPaint Event Arguments.
            </summary>
            <param name="inGraphics">The device that contains the drawing information for the event to determine whether or not to cancel.</param>
            <param name="inDrawWindow">The geographic bounds of the draw event</param>
            <param name="inPart">The part being drawn.  This is usually 0, unless NumParts is greater than 1.</param>
            <param name="inStage">The 0-based integer index indicating the stage of the drawing.</param>
            <param name="inCancel">A boolean specifying the default setting for the draw args.</param>
        </member>
        <member name="M:DotSpatial.Symbology.DrawVerifyArgs.#ctor(DotSpatial.Symbology.DrawArgs)">
            <summary>
            Constructs a new instance with cancel set to false using an Existing DrawArgs
            </summary>
            <param name="args"></param>
        </member>
        <member name="P:DotSpatial.Symbology.DrawVerifyArgs.Cancel">
            <summary>
            Returns a boolean specifying whether the action that caused the default drawing
            for this event should be prevented.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.ColorSchemeType">
            <summary>
            RasterColorSchemes
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.ColorSchemeType.DeadSea">
            <summary>
            DeadSea
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.ColorSchemeType.Desert">
            <summary>
            Desert
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.ColorSchemeType.FallLeaves">
            <summary>
            Fall Leaves
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.ColorSchemeType.Glaciers">
            <summary>
            Glacier
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.ColorSchemeType.Highway">
            <summary>
            Highway
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.ColorSchemeType.Meadow">
            <summary>
            Meadow
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.ColorSchemeType.Summer_Mountains">
            <summary>
            Summer Mountains
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.ColorSchemeType.Valley_Fires">
            <summary>
            Valley Fires
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.ISimplePattern">
            <summary>
            ISimplePattern
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ISimplePattern.FillColor">
            <summary>
            Gets or sets solid Color used for filling this pattern.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ISimplePattern.Opacity">
            <summary>
            Sets the opacity of this simple pattern by modifying the alpha channel of the fill color.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.FeatureSelection">
            <summary>
            FilterCollection
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.Changeable">
            <summary>
            ChangeBase
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.Changeable.ForceChange">
            <summary>
            Forces the Changed event to fire.  If events are suspended,
            then this simply will mark the changes so that when
            the ResumeChanges is called it will automatically fire
            the Changed events.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.Changeable.ResumeChanges">
            <summary>
            Resumes the events.  If any changes occured during the period of time when
            the events were suspended, this will automatically fire the chnaged event.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.Changeable.SuspendChanges">
            <summary>
            Causes this filter collection to suspend the Changed event, so that
            it will only be fired once after a series of updates.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.Changeable.OnChanged">
            <summary>
            Fires the Changed event as long as ChangesSuspended is not true.
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.Changeable.Changed">
            <summary>
            Occurs when members are added to or removed from this collection.  If SuspendChanges
            is called, this will temporarilly prevent this event from firing, until ResumeEvents
            has been called.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.Changeable.ChangesSuspended">
            <summary>
            To suspend events, call SuspendChanges.  Then to resume events, call ResumeEvents.  If the
            suspension is greater than 0, then events are suspended.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.IFeatureSelection">
            <summary>
            IFilterCollection
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.IFeatureSelection.Clear">
            <summary>
            Clears the selection
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IFeatureSelection.Count">
            <summary>
            Gets the integer count of the members in the collection
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IFeatureSelection.Filter">
            <summary>
            Gets the drawing filter used by this collection.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureSelection.#ctor(DotSpatial.Data.IFeatureSet,DotSpatial.Symbology.IDrawingFilter,DotSpatial.Symbology.FilterType)">
            <summary>
            Creates a new instance of FilterCollection, where the current state of the filter is
            recorded as the kind of "collection" that this item belongs to.  The filter can be
            altered later, and this will retain the original state.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureSelection.#ctor(DotSpatial.Data.IFeatureSet,DotSpatial.Symbology.IDrawingFilter,DotSpatial.Symbology.FilterType,System.Boolean)">
             <summary>
            
             </summary>
             <param name="featureSet"></param>
             <param name="inFilter"></param>
             <param name="activeType"></param>
             <param name="isReadOnly"></param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureSelection.Add(DotSpatial.Data.IFeature)">
            <summary>
            Adding a feature state sets the drawing state of the item to be
            </summary>
            <param name="item">The item to add to this category</param>
            <exception cref="T:DotSpatial.Serialization.ReadOnlyException">Occurs if this list is set to read-only in the constructor</exception>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureSelection.AddRegion(DotSpatial.Topology.IEnvelope,DotSpatial.Topology.IEnvelope@)">
            <summary>
            This uses extent checking (rather than full polygon intersection checking).  It will add
            any members that are either contained by or intersect with the specified region
            depending on the SelectionMode property.  The order of operation is the region
            acting on the feature, so Contains, for instance, would work with points.
            </summary>
            <param name="region"></param>
            <param name="affectedArea">The affected area of this addition</param>
            <returns>True if any item was actually added to the collection</returns>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureSelection.InvertSelection(DotSpatial.Topology.IEnvelope,DotSpatial.Topology.IEnvelope@)">
            <summary>
            Inverts the selection based on the current SelectionMode
            </summary>
            <param name="region">The geographic region to reverse the selected state</param>
            <param name="affectedArea">The affected area to invert</param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureSelection.Clear">
            <summary>
            This cycles through all the members in the current grouping and re-sets the current category
            back to the default setting.  In other words, if the active type is selection, then this
            will unselect all the features, but won't adjust any of the other categories.
            </summary>
            <exception cref="T:System.Data.ReadOnlyException">Occurs if this list is set to read-only in the constructor</exception>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureSelection.Contains(DotSpatial.Data.IFeature)">
            <summary>
            Tests to see if the item is contained in this collection.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureSelection.CopyTo(DotSpatial.Data.IFeature[],System.Int32)">
            <summary>
            Copies each of the members of this group to the specified array
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureSelection.GetEnumerator">
            <summary>
            Gets the enumerator for this collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureSelection.Remove(DotSpatial.Data.IFeature)">
            <summary>
            Removes the specified item from the subset of this classification if that category is used.
            Selected -&gt; !Selected
            Category[&gt;0] -&gt; Category[0]
            Category[0] -&gt; Null
            Visible -&gt; !Visible
            Chunk -&gt; -1  or basically a chunk index that is never drawn.
            </summary>
            <param name="item">The item to change the drawing state of</param>
            <returns>Boolean, false if the item does not match the current grouping</returns>
            <exception cref="T:System.Data.ReadOnlyException">Occurs if this list is set to read-only in the constructor</exception>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureSelection.RemoveRegion(DotSpatial.Topology.IEnvelope,DotSpatial.Topology.IEnvelope@)">
            <summary>
            Tests each member currently in the selected features based on
            the SelectionMode.  If it passes, it will remove the feature from
            the selection.
            </summary>
            <param name="region">The geographic region to remove</param>
            <param name="affectedArea">A geographic area that was affected by this change.</param>
            <returns>Boolean, true if the collection was changed</returns>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureSelection.ToFeatureSet">
            <summary>
            As an example, choosing myFeatureLayer.SelectedFeatures.ToFeatureSet creates a new set.
            </summary>
            <returns>An in memory featureset that has not yet been saved to a file in any way.</returns>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureSelection.ToFeatureList">
            <summary>
            Exports the members of this collection as a list of IFeature.
            </summary>
            <returns>A List of IFeature</returns>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureSelection.GetAttributes(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Symbology.FeatureSelection.GetAttributes(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureSelection.SetAttributes(System.Int32,System.Data.DataTable)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Symbology.FeatureSelection.NumRows">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Symbology.FeatureSelection.GetColumn(System.String)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Symbology.FeatureSelection.GetColumns">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Symbology.FeatureSelection.AddRow(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            The new row will be added to the underlying featureset, and this selection will not be updated
            in any way, as that row is not associated with a featureset here.
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureSelection.AddRow(System.Data.DataRow)">
            <summary>
            The new row will be added to the underlying featureset, and this selection will not be updated
            in any way, as that row is not associated with a featureset here.
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureSelection.Edit(System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Symbology.FeatureSelection.Edit(System.Int32,System.Data.DataRow)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Symbology.FeatureSelection.GetCounts(System.String[],DotSpatial.Data.ICancelProgressHandler,System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:DotSpatial.Symbology.FeatureSelection.ActiveType">
            <summary>
            Collections can be nested, but for instance if you have gone into category[2].SelectedFeatures and want to
            remove an item, then we would expect it to show up in Category[2].UnSelectedFeatures, not in
            Category[0].UnselectedFeatures.  So while add necessarilly acts on every filter constraint, remove or clear only
            operates on the most intimate.  The ActiveType records which criteria that is.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureSelection.FeatureList">
            <summary>
            Gets the feature list of underlying features that the filter is using
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureSelection.Count">
            <summary>
            This cycles through the entire enumeration, so don't access this in every loop.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureSelection.Envelope">
            <summary>
            Gets the envelope that represents the features in this collection.
            If the collection changes, this will be invalidated automatically,
            and the next envelope request will re-calcualte the envelope.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureSelection.Filter">
            <summary>
            Gets the drawing filter used by this collection.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureSelection.IsReadOnly">
            <summary>
            Gets whether or not this collection can be edited with add, remove, or clear.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureSelection.ProgressHandler">
            <summary>
            Gets or sets the handler to use for progress messages during selection.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureSelection.RegionCategory">
            <summary>
            Setting this to a specific category will only allow selection by
            region to affect the features that are within the specified category.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureSelection.Category">
            <summary>
            Gets or sets the scheme category to use
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureSelection.Chunk">
            <summary>
            Gets the integer chunk that the filter should use
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureSelection.Selected">
            <summary>
            If UseSelection is true, this will get or set the boolean selection state
            that will be used to select values.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureSelection.UseCategory">
            <summary>
            Gets or sets a boolean that indicates whether the filter should subdivide based on category.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureSelection.UseChunks">
            <summary>
            Gets or sets a boolean that indicates whether we should use the chunk
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureSelection.UseSelection">
            <summary>
            Gets or sets a boolean that indicates whether this filter should use the Selected
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureSelection.UseVisibility">
            <summary>
            Gets or sets the boolean indicating whether or not this feature should be drawn.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureSelection.Visible">
            <summary>
            Gets or sets a boolean that specifies whether to return visible, or hidden features if UseVisibility is true.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureSelection.SelectionState">
            <summary>
            True if members of this collection are considered selected, false otherwise.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureSelection.SelectionMode">
            <summary>
            Gets or sets the selection mode to use when Adding or Removing features
            from a specified envelope region.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.DrawnState">
            <summary>
            DrawFeatures simply group the feature with characteristics like selected and category for easier tracking.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.IDrawnState">
            <summary>
            IDrawnFeature
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IDrawnState.Chunk">
            <summary>
            Gets or sets the integer chunk that this item belongs to.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IDrawnState.SchemeCategory">
            <summary>
            Gets or sets the scheme category
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IDrawnState.IsSelected">
            <summary>
            Gets or sets a boolean, true if this feature is currently selected
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IDrawnState.IsVisible">
            <summary>
            Gets or sets whether this feature is currently being drawn.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.DrawnState.#ctor">
            <summary>
            Creates a new instance of DrawnState class that helps to narrow down the features to be drawn.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.DrawnState.#ctor(DotSpatial.Symbology.IFeatureCategory,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Creates a new instance of a DrawnState class for subdividing features.
            </summary>
            <param name="category">A category that the feature belongs to</param>
            <param name="selected">Boolean, true if the feature is currently selected</param>
            <param name="chunk">An integer chunk that this feature should belong to</param>
            <param name="visible">A boolean indicating whether this feature is visible or not</param>
        </member>
        <member name="M:DotSpatial.Symbology.DrawnState.GetHashCode">
            <summary>
            Not entirely sure about using these features this way.  It might not work well with interfaces.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.DrawnState.Equals(System.Object)">
            <summary>
            Takes any object, but attempts to compare it with values as an IDrawnState.  If it can satisfy
            the IDrawnState interface and all the values are the same then this returns true.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.DrawnState.op_Equality(DotSpatial.Symbology.DrawnState,DotSpatial.Symbology.IDrawnState)">
            <summary>
            Overrides the standard equal operator
            </summary>
            <param name="u"></param>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.DrawnState.op_Inequality(DotSpatial.Symbology.DrawnState,DotSpatial.Symbology.IDrawnState)">
            <summary>
            Overrides the not-equal to operator
            </summary>
            <param name="u"></param>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="P:DotSpatial.Symbology.DrawnState.SchemeCategory">
            <summary>
            Gets or sets the scheme category
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.DrawnState.IsSelected">
            <summary>
            Gets or sets a boolean, true if this feature is currently selected
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.DrawnState.IsVisible">
            <summary>
            Gets or sets whether this feature is currently being drawn.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.DrawnState.Chunk">
            <summary>
            Gets or sets the integer chunk that this item belongs to.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.ILabelScheme">
            <summary>
            ILabelScheme
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ILabelScheme.AddCategory">
            <summary>
            Adds a category to the scheme, and also names the category with an integer that has not yet been used.
            </summary>
            <returns>A new category with a name that has not yet been used</returns>
        </member>
        <member name="M:DotSpatial.Symbology.ILabelScheme.Copy">
            <summary>
            returns a duplicate scheme, where the categories are copied, but
            the underlying featureset is not duplicated.
            </summary>
            <returns>A copy of this label scheme</returns>
        </member>
        <member name="M:DotSpatial.Symbology.ILabelScheme.Demote(DotSpatial.Symbology.ILabelCategory)">
            <summary>
            Attempts to reduce the integer index representing this categories rank in the
            list.  By doing this, it will be drawn sooner, and therefore subsequent
            layers will be drawn on top of this layer, and so it reduces the categories
            priority.  If this collection does not contain the category or it is already
            at index 0, this will return false.
            </summary>
            <param name="category">The ILabelCategory to demote</param>
            <returns>Boolean, true if the demotion was successful</returns>
        </member>
        <member name="M:DotSpatial.Symbology.ILabelScheme.Promote(DotSpatial.Symbology.ILabelCategory)">
            <summary>
            This attempts to increase the numeric index, which will cause it to be drawn later,
            or higher up on the cue, which means it will be drawn AFTER the previous layers,
            and therefore is a higher priority.  If the category does not exist in the collection
            or the category is already at the highest value, this returns false.
            </summary>
            <param name="category">The category to promote if possible.</param>
            <returns>Boolean, true if the promotion was successful</returns>
        </member>
        <member name="P:DotSpatial.Symbology.ILabelScheme.Categories">
            <summary>
            Gets or sets the list of categories that make up this label scheme
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.FastLabelDrawnState">
            <summary>
            FastLabelDrawnState
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.FastLabelDrawnState.Category">
            <summary>
            Gets or sets the category
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.FastLabelDrawnState.Selected">
            <summary>
            Gets or sets whether the label is selected
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.FastLabelDrawnState.#ctor(DotSpatial.Symbology.ILabelCategory)">
            <summary>
            Creates a new drawn state with the specified category
            </summary>
            <param name="category">The category</param>
        </member>
        <member name="T:DotSpatial.Symbology.ILabel">
            <summary>
            ILabel
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.ILabel.SymbolChanged">
            <summary>
            Occurs when the Symbolizer for this label is changed.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILabel.AnchorPoint">
            <summary>
            Gets or sets the geographic position for the anchoring the label.  The relationship
            between this and the text depends on the horizontal alignment.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILabel.Index">
            <summary>
            Gets the integer index for this label
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILabel.Parent">
            <summary>
            Gets the Symbol group that currently contains this label.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILabel.Text">
            <summary>
            Gets or sets the text that appears on this layer.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILabel.Symbolizer">
            <summary>
            Gets or sets the symbolizer for this specific label.  This allows customization for
            individual labels, but at the same time can allow many labels to point to one set
            of symbolic characteristics.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILabel.SelectionSymbolizer">
            <summary>
            Gets or sets the symbolizer that is being used.  Symbol groups are defined by the
            original symbolizer, and there is only one selection symbolizer per group.  This
            simply is a shortcut to accessing the symbolgroup's selection symbolizer.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.ColorExt">
            <summary>
            ColorEM
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ColorExt.Lighter(System.Drawing.Color,System.Single)">
            <summary>
            Creates a color with the same hue and saturation but that is slightly brighter than this color.
            </summary>
            <param name="self">The starting color</param>
            <param name="brightness">The floating point value of brightness to add to this color.
            If the combined result is greater than 1, the result will equal one.</param>
            <returns>A color lighter than this color</returns>
        </member>
        <member name="M:DotSpatial.Symbology.ColorExt.Darker(System.Drawing.Color,System.Single)">
            <summary>
            Creates a color with the same hue and saturation but that is slightly darker than this color.
            </summary>
            <param name="self">The starting color</param>
            <param name="brightness">The floating point value of brightness to add to this color.</param>
            if the combined result is less than 0, the result will equal 0.
            <returns>A color darker than this color.</returns>
        </member>
        <member name="M:DotSpatial.Symbology.ColorExt.GetOpacity(System.Drawing.Color)">
            <summary>
            Calculates the opacity as a function of the Alpha channel.
            </summary>
            <param name="self">The color to determine the opacity for</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.ColorExt.ToTransparent(System.Drawing.Color,System.Single)">
            <summary>
            Given a floating point opacity, where 0 is fully transparent and 1 is fully opaque,
            this will generate a new color that is the transparent version.
            </summary>
            <param name="self"></param>
            <param name="opacity"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.ColorExt.ToOpaque(System.Drawing.Color)">
            <summary>
            Returns an equivalent version of this color that is fully opaque (having an alpha value of 255)
            </summary>
            <param name="self">The transparent color</param>
            <returns>The new Color</returns>
        </member>
        <member name="M:DotSpatial.Symbology.ColorExt.BlendWith(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            uses a linear ramp to extrapolate the midpoint between the specified color and the new color
            as defined by ARGB values independantly
            </summary>
            <param name="self">This color</param>
            <param name="other">The color to blend with this color</param>
            <returns>A color that is midway between this color and the specified color</returns>
        </member>
        <member name="T:DotSpatial.Symbology.BackBuffer">
            <summary>
            This class contains two separate layers.  The first is the BackImage where features that don't change
            over time are drawn.  This way if heavy calculations are required to draw the background, you don't
            have to re-draw the background over and over again every time a sprite moves.  The Front image is
            for small sprites that change rapidly, but
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.BackBuffer._extents">
            <summary>
            The real world extents for the entire buffer
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.BackBuffer._image">
            <summary>
            The image being shown
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.BackBuffer.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new BackBuffer bitmap that is the specified size.
            </summary>
            <param name="width">The width of the bitmap</param>
            <param name="height">The height of the bitmap</param>
        </member>
        <member name="M:DotSpatial.Symbology.BackBuffer.Clear">
            <summary>
            Clears the back buffer.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.BackBuffer.PixelToProj(System.Drawing.PointF)">
             <summary>
            
             </summary>
             <param name="testPoint"></param>
             <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.BackBuffer.PixelToProj(System.Drawing.RectangleF)">
             <summary>
            
             </summary>
             <param name="testExtents"></param>
             <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.BackBuffer.ProjToPixel(DotSpatial.Data.Extent)">
            <summary>
            Calculates a system.Drawing rectangle that corresponds to the specified real world
            envelope if it were drawn in pixels on the background image.
            </summary>
            <param name="testExtents"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.BackBuffer.ProjToPixel(DotSpatial.Topology.Coordinate)">
             <summary>
            
             </summary>
             <param name="coord"></param>
             <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.BackBuffer.OnExtentsChanged">
            <summary>
            Fires the ExtentsChanged event
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.BackBuffer.ExtentsChanged">
            <summary>
            Occurs after something changes the geographic extents.  This refers to the outer
            geographic extents, not the view extents.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.BackBuffer.Extents">
            <summary>
            Gets or sets the geographic extents for the entire back buffer.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.BackBuffer.Graphics">
            <summary>
            Gets the graphics drawing surface for the BackBuffer
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.BackBuffer.Height">
            <summary>
            Gets or sets the height of this backbuffer in pixels
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.BackBuffer.Image">
            <summary>
            Gets or sets the actual Bitmap being used as the back buffer.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.BackBuffer.InvokeRequired">
            <summary>
            Boolean, true if the current thread is different from the original thread, indicating
            that cross-threading is taking place.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.BackBuffer.Width">
            <summary>
            Gets or sets the width of the back buffer in pixels.  This will copy
            the old back buffer to a new bitmap with the new width/height
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.BackBuffer.WorldGraphics">
            <summary>
            Obtains a graphics object already organized into world coordinates.
            The client rectangle and world coordinates are used in order to determine
            the scale and translation of the transform necessary in the graphics object.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.BackBuffer.Envelope">
            <summary>
            The envelope bounds in geographic coordinates.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.GradientType">
            <summary>
            GradientTypes
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.GradientType.Circular">
            <summary>
            Draws the gradient with the start color for the center of the circle
            and the end color for the surround color
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.GradientType.Contour">
            <summary>
            Draws the gradient with the start color for the center of the circle
            and the end color for the color at the contour.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.GradientType.Linear">
            <summary>
            Draws the gradient in a line with a specified direction
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.GradientType.Rectangular">
            <summary>
            Draws the gradient in a rectangular path with the start color
            at the center and the end color for the surround color
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.PointSymbolizerEventArgs">
            <summary>
            PointSymbolizerEventArgs
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.PointSymbolizerEventArgs.#ctor(DotSpatial.Symbology.IPointSymbolizer)">
            <summary>
            Creates a new instance of PointSymbolizerEventArgs
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.PointSymbolizerEventArgs.Symbolizer">
            <summary>
            Gets the symbolizer cast as an IPointSymbolizer
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.IFeatureLayer">
            <summary>
            This is should not be instantiated because it cannot in itself perform the necessary functions.
            Instead, most of the specified functionality must be implemented in the more specific classes.
            This is also why there is no direct constructor for this class.  You can use the static
            "FromFile" or "FromFeatureLayer" to create FeatureLayers from a file.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.IFeatureLayer.ApplyScheme(DotSpatial.Symbology.IFeatureScheme)">
            <summary>
            Applies the specified scheme to this layer, applying the filter constraints in the scheme.
            It is at this time when features are grouped as a one-time operation into their symbol
            categories, so that this doesn't have to happen independently each drawing cycle.
            </summary>
            <param name="inScheme">
            The scheme to be applied to this layer.
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.IFeatureLayer.AssignFastDrawnStates">
            <summary>
            Assigns the fast drawn states based on the latest feature setup.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.IFeatureLayer.DrawSnapShot(System.Drawing.Graphics,DotSpatial.Data.IProj)">
            <summary>
            This method actually draws the image to the snapshot using the graphics object.  This should be
            overridden in sub-classes because the drawing methods are very different.
            </summary>
            <param name="g">
            A graphics object to draw to
            </param>
            <param name="p">
            A projection handling interface designed to translate geographic coordinates to screen
            coordinates
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.IFeatureLayer.ExportSelection(System.String)">
            <summary>
            Saves a featureset with only the selected features to the specified fileName.
            </summary>
            <param name="fileName">
            The string fileName to export features to.
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.IFeatureLayer.GetCategory(System.Int32)">
            <summary>
            Gets the visible characteristic for an individual feature, regardless of whether
            this layer is in edit mode.
            </summary>
            <param name="index">
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.IFeatureLayer.GetCategory(DotSpatial.Data.IFeature)">
            <summary>
            Gets the visible characteristic for a given feature, rather than using the index,
            regardless of whether this layer is in edit mode.
            </summary>
            <param name="feature">
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.IFeatureLayer.GetVisible(System.Int32)">
            <summary>
            Gets the visible characteristic for an individual feature
            </summary>
            <param name="index">
            </param>
            <returns>
            The get visible.
            </returns>
        </member>
        <member name="M:DotSpatial.Symbology.IFeatureLayer.GetVisible(DotSpatial.Data.IFeature)">
            <summary>
            Gets the visible characteristic for a given feature, rather than using the index.
            </summary>
            <param name="feature">
            </param>
            <returns>
            The get visible.
            </returns>
        </member>
        <member name="M:DotSpatial.Symbology.IFeatureLayer.RemoveFeaturesAt(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            This method will remove the in ram features from the underlying dataset.
            This will not affect the data source.  Beware!  Removing features
            without populating the DataTable first will almost assuredly mean
            indexing failures if you choose to load it later.
            </summary>
            <param name="indexValues">The list or array of integer index values.</param>
        </member>
        <member name="M:DotSpatial.Symbology.IFeatureLayer.RemoveSelectedFeatures">
            <summary>
            This forces the removal of all the selected features.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.IFeatureLayer.Select(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Selects the specified list of features.  If the specified feature is already selected,
            this method will not alter it.
            </summary>
            <param name="featureIndices">
            A List of integers representing the zero-based feature index values
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.IFeatureLayer.Select(System.Int32)">
            <summary>
            Selects a single feature specified by the integer index in the Features list.
            </summary>
            <param name="featureIndex">
            The zero-based integer index of the feature.
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.IFeatureLayer.Select(DotSpatial.Data.IFeature)">
            <summary>
            Selects the specified feature.
            </summary>
            <param name="feature">
            The feature.
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.IFeatureLayer.SelectAll">
            <summary>
            Cycles through all the features and selects them
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.IFeatureLayer.SelectByAttribute(System.String)">
            <summary>
            Selects all the features in this layer that are associated
            with the specified attribute, clearing the selection first.
            </summary>
            <param name="filterExpression">
            The string expression to
            identify based on attributes the features to select.
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.IFeatureLayer.SelectByAttribute(System.String,DotSpatial.Symbology.ModifySelectionMode)">
            <summary>
            Modifies the features with a new selection based on the modifyMode.
            </summary>
            <param name="filterExpression">
            The string filter expression to use
            </param>
            <param name="modifyMode">
            Determines how the newly chosen features should interact with the existing
            selection
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.IFeatureLayer.SetCategory(System.Int32,DotSpatial.Symbology.IFeatureCategory)">
            <summary>
            Sets the category for the specified shape index regardless of whether this layer is in edit mode.
            </summary>
            <param name="index">
            The 0 based integer shape index
            </param>
            <param name="category">
            The category for this feature.  The exact kind of category depends on the
            feature type.
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.IFeatureLayer.SetCategory(DotSpatial.Data.IFeature,DotSpatial.Symbology.IFeatureCategory)">
            <summary>
            Sets the visible characteristic for a given feature, rather than using the index
            regardless of whether this layer is in edit mode.
            </summary>
            <param name="feature">
            The actual reference to the feature object to update
            </param>
            <param name="category">
            The new category to use for the specified feature
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.IFeatureLayer.SetShapeSymbolizer(System.Int32,DotSpatial.Symbology.IFeatureSymbolizer)">
            <summary>
            This forces the creation of a category for the specified symbolizer, if it doesn't exist.
            This will add the specified feature to the category.  Be sure that the symbolizer type
            matches the feature type.
            </summary>
            <param name="index">
            The integer index of the shape to control.
            </param>
            <param name="symbolizer">
            The symbolizer to assign.
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.IFeatureLayer.SetVisible(System.Int32,System.Boolean)">
            <summary>
            Sets the visible characteristic for an individual feature
            </summary>
            <param name="index">
            </param>
            <param name="visible">
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.IFeatureLayer.SetVisible(DotSpatial.Data.IFeature,System.Boolean)">
            <summary>
            Sets the visible characteristic for a given feature, rather than using the index.
            </summary>
            <param name="feature">
            </param>
            <param name="visible">
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.IFeatureLayer.ShowAttributes">
            <summary>
            Displays a form with the attributes for this shapefile.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.IFeatureLayer.SnapShot(DotSpatial.Data.Extent,System.Int32)">
            <summary>
            Creates a bitmap of the requested size that covers the specified geographic extent using
            the current symbolizer for this layer.  This does not have any drawing optimizations,
            or techniques to speed up performance and should only be used in special cases like
            draping of vector content onto a texture.  It also doesn't worry about selections.
            </summary>
            <param name="geographicExtent">
            The extent to use when computing the snapshot.
            </param>
            <param name="width">
            The integer height of the bitmap
            </param>
            <returns>
            A Bitmap object
            </returns>
        </member>
        <member name="M:DotSpatial.Symbology.IFeatureLayer.UnSelect(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Unselects the specified features.  If any features already unselected, they are ignored.
            </summary>
            <param name="featureIndices">
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.IFeatureLayer.UnSelect(System.Int32)">
            <summary>
            Unselects the specified feature.
            </summary>
            <param name="featureIndex">
            The integer representing the feature to unselect.
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.IFeatureLayer.UnSelect(DotSpatial.Data.IFeature)">
            <summary>
            Removes the specified feature from the selection
            </summary>
            <param name="feature">
            The feature to remove
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.IFeatureLayer.UnSelectAll">
            <summary>
            Unselects all the features that are currently selected
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.IFeatureLayer.ZoomToSelectedFeatures">
            <summary>
            Zooms to the envelope of the selected features.
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.IFeatureLayer.ViewAttributes">
            <summary>
            Occurs before the attribute Table is displayed, also allowing this event to be handled.
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.IFeatureLayer.SnapShotTaken">
            <summary>
            Occurs after a snapshot is taken, and contains an event argument with the bitmap
            to be displayed.
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.IFeatureLayer.SchemeApplied">
            <summary>
            Occurs after a new symbolic scheme has been applied to the layer.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IFeatureLayer.DataSet">
            <summary>
            Gets or sets the base FeatureSet
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IFeatureLayer.DrawnStates">
            <summary>
            Controls the drawn states according to a feature index.  This is used if the EditMode is
            false.  When EditMode is true, then drawn states are tied to the features instead.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IFeatureLayer.DrawnStatesNeeded">
            <summary>
            Gets or sets the Boolean flag that controls whether the DrawnStates are needed.  If nothing is selected,
            and there is only one category, and there is no filter expression on that category, then this should be false.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IFeatureLayer.EditMode">
            <summary>
            Gets or sets a Boolean.  If edit mode is true, feature index is ignored, and features
            are assumed to be entirely loaded into ram.  If edit mode is false, then index
            is used instead and features are not assumed to be loaded into ram.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IFeatureLayer.LabelLayer">
            <summary>
            Gets or sets the label layer
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IFeatureLayer.Selection">
            <summary>
            Gets a Selection class that is allows the user to cycle through all the unselected features with
            a for each method, even if the features are in many categories.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IFeatureLayer.SelectionSymbolizer">
            <summary>
            Gets or sets the shared characteristics to use with the selected features.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IFeatureLayer.ShowLabels">
            <summary>
            Gets or sets whether labels should be drawn.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IFeatureLayer.Symbolizer">
            <summary>
            Gets or sets and interface for the shared symbol characteristics between point, line and polygon features
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IFeatureLayer.Symbology">
            <summary>
            Gets the current feature scheme, but to change it ApplyScheme should be called, so that
            feature categories are updated as well.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.SelectableExt">
            <summary>
            Extends the ISelectable interface with some overloads that ignore the output affected areas
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.SelectableExt.ClearSelection(DotSpatial.Symbology.ISelectable)">
            <summary>
            Clears the selection, and ignores the affected area.
            </summary>
            <param name="self">This selectable item</param>
            <returns>Boolean, true if members were removed from the selection</returns>
        </member>
        <member name="M:DotSpatial.Symbology.SelectableExt.InvertSelection(DotSpatial.Symbology.ISelectable,DotSpatial.Topology.IEnvelope,DotSpatial.Topology.IEnvelope)">
            <summary>
            This ignores the affected region and assumes that you want to use a selection based on
            the Intersects selection mode.
            </summary>
            <param name="self">The ISelectable object</param>
            <param name="tolerant">The region where selection should take place</param>
            <param name="strict">The region in cases where tolerance is not used</param>
            <returns>Boolean, true if the selected state of any members of this item were altered</returns>
        </member>
        <member name="M:DotSpatial.Symbology.SelectableExt.InvertSelection(DotSpatial.Symbology.IFeatureLayer,DotSpatial.Topology.IEnvelope,DotSpatial.Topology.IEnvelope,DotSpatial.Topology.IEnvelope@)">
            <summary>
            Inverts the selection state of members that intersect the specified region.
            The affected area will be returned.
            </summary>
            <param name="self">The IFeatureLayer to modify the selection for</param>
            <param name="tolerant">The geographic envelope in cases like cliking near points where tolerance is allowed</param>
            <param name="strict">The geographic region when working with absolutes, without a tolerance</param>
            <param name="affectedArea">The affected area to modify</param>
            <returns>Boolean, true if the selection state was modified by this action</returns>
        </member>
        <member name="M:DotSpatial.Symbology.SelectableExt.Select(DotSpatial.Symbology.ISelectable,DotSpatial.Topology.IEnvelope,DotSpatial.Topology.IEnvelope)">
            <summary>
            This ignores the affected region and assumes that you want to use a selection based on
            the Intersects selection mode.
            </summary>
            <param name="self">This ISelectable</param>
            <param name="tolerant">The geographic envelope in cases like cliking near points where tolerance is allowed</param>
            <param name="strict">The geographic region when working with absolutes, without a tolerance</param>
            <returns>Boolean, true if any items were added to the selection</returns>
        </member>
        <member name="M:DotSpatial.Symbology.SelectableExt.Select(DotSpatial.Symbology.IFeatureLayer,DotSpatial.Topology.IEnvelope,DotSpatial.Topology.IEnvelope,DotSpatial.Topology.IEnvelope@)">
            <summary>
            Highlights the values in the specified region, and returns the affected area from the selection,
            which should allow for slightly faster drawing in cases where only a small area is changed.
            </summary>
            <param name="self">The IFeatureLayer from which to select features</param>
            <param name="tolerant">The geographic envelope in cases like cliking near points where tolerance is allowed</param>
            <param name="strict">The geographic region when working with absolutes, without a tolerance</param>
            <param name="affectedArea">The geographic envelope of the region impacted by the selection.</param>
            <returns>True if any members were added to the current selection.</returns>
        </member>
        <member name="M:DotSpatial.Symbology.SelectableExt.UnSelect(DotSpatial.Symbology.ISelectable,DotSpatial.Topology.IEnvelope,DotSpatial.Topology.IEnvelope)">
            <summary>
            This ignores the affected region and assumes that you want to use a selection based on
            the Intersects selection mode.
            </summary>
            <param name="self">This ISelectable</param>
            <param name="tolerant">The geographic envelope in cases like cliking near points where tolerance is allowed</param>
            <param name="strict">The geographic region when working with absolutes, without a tolerance</param>
            <returns>Boolean, true if any items were added to the selection</returns>
        </member>
        <member name="M:DotSpatial.Symbology.SelectableExt.UnSelect(DotSpatial.Symbology.IFeatureLayer,DotSpatial.Topology.IEnvelope,DotSpatial.Topology.IEnvelope,DotSpatial.Topology.IEnvelope@)">
            <summary>
            Un-highlights or returns the features that intersect with the specified region.
            </summary>
            <param name="self">The IFeatureLayer from which to unselect features.</param>
            <param name="tolerant">The geographic envelope in cases like cliking near points where tolerance is allowed.</param>
            <param name="strict">The geographic region when working with absolutes, without a tolerance.</param>
            <param name="affectedArea">The geographic envelope that will be visibly impacted by the change.</param>
            <returns>Boolean, true if members were removed from the selection.</returns>
        </member>
        <member name="T:DotSpatial.Symbology.ColorCategory">
            <summary>
            ColorCategory
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ColorCategory.#ctor">
            <summary>
            Creates a new instance of ColorCategory
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ColorCategory.#ctor(System.Double)">
            <summary>
            Creates a ColorBreak that has a single value, which can be an object of any type.
            The LowValue field will contain this single value.
            </summary>
            <param name="value">The value to test.</param>
        </member>
        <member name="M:DotSpatial.Symbology.ColorCategory.#ctor(System.Double,System.Drawing.Color)">
            <summary>
            Creates a ColorBreak that has a single value, which can be an object of any type.
            The LowValue field will contain this single value.
            </summary>
            <param name="value">The value to test.</param>
            <param name="color">The color to use as the low value.</param>
        </member>
        <member name="M:DotSpatial.Symbology.ColorCategory.#ctor(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Creates a new color category, but doesn't specify the colors themselves.
            </summary>
            <param name="startValue">The start value</param>
            <param name="endValue">The end value</param>
        </member>
        <member name="M:DotSpatial.Symbology.ColorCategory.#ctor(System.Nullable{System.Double},System.Nullable{System.Double},System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Creates a bi-valued colorbreak that will automatically test which of the specified values is higher
            and use that as the high value.  The other will become the low value.  This will be set to a
            bi-value colorbreak.
            </summary>
            <param name="startValue">One of the values to use in this colorbreak.</param>
            <param name="endValue">The other value to use in this colorbreak.</param>
            <param name="lowColor">The color to assign to the higher of the two values</param>
            <param name="highColor">The color to assign to the lower of the two values</param>
        </member>
        <member name="M:DotSpatial.Symbology.ColorCategory.OnEditItem(System.ComponentModel.HandledEventArgs)">
            <summary>
            Fires the EditItem event.  If e returns handled, then this will not launch the default editor
            </summary>
            <param name="e">The HandledEventArgs</param>
        </member>
        <member name="M:DotSpatial.Symbology.ColorCategory.OnCopyProperties(System.Object)">
            <inheritdocs/>
        </member>
        <member name="M:DotSpatial.Symbology.ColorCategory.CalculateColor(System.Double)">
            <summary>
            This is primarily used in the BiValue situation where a color needs to be generated
            somewhere between the start value and the end value.
            </summary>
            <param name="value">The value to be converted into a color from the range on this color break</param>
            <returns>A color that is selected from the range values.</returns>
        </member>
        <member name="M:DotSpatial.Symbology.ColorCategory.LegendSymbol_Painted(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Paints legend symbol
            </summary>
            <param name="g"></param>
            <param name="box"></param>
        </member>
        <member name="E:DotSpatial.Symbology.ColorCategory.EditItem">
            <summary>
            Occurs when this ColorBreak received instructions to show an editor.  If this is
            handled, then no action will be taken.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ColorCategory.GradientModel">
            <summary>
            Gets or sets how the color changes are distributed across the
            BiValued range.  If IsBiValue is false, this does nothing.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ColorCategory.HighColor">
            <summary>
            Gets or sets the second of two colors to be used.
            This is only used for BiValued breaks.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ColorCategory.IsBiValue">
            <summary>
            This not only indicates that there are two values,
            but that the values are also different from one another.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ColorCategory.LowColor">
            <summary>
            Gets or sets the color to be used for this break.  For
            BiValued breaks, this only sets one of the colors.  If
            this is higher than the high value, both are set to this.
            If this equals the high value, IsBiValue will be false.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.SymbologyMessageStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.SymbologyMessageStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.SymbologyMessageStrings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.SymbologyMessageStrings.DesktopRasterExt_CreatingShadedRelief">
            <summary>
              Looks up a localized string similar to Creating Shaded Relief.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.SymbologyMessageStrings.DesktopRasterExt_PaintingColorScheme">
            <summary>
              Looks up a localized string similar to Painting color scheme to bitmap..
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.SymbologyMessageStrings.DesktopRasterExt_PaintingHillshade">
            <summary>
              Looks up a localized string similar to Painting Hillshade To Bitmap.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.SymbologyMessageStrings.ExportData">
            <summary>
              Looks up a localized string similar to Export Data.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.SymbologyMessageStrings.FeatureLayer_Create_Layer_From_Selected_Features">
            <summary>
              Looks up a localized string similar to Create Layer from Selected Features.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.SymbologyMessageStrings.FeatureLayer_Join_Excel_File">
            <summary>
              Looks up a localized string similar to Join Excel file &apos;Data&apos; Label.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.SymbologyMessageStrings.FeatureLayer_Label_Setup">
            <summary>
              Looks up a localized string similar to Label Setup.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.SymbologyMessageStrings.FeatureLayer_Labeling">
            <summary>
              Looks up a localized string similar to Labeling.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.SymbologyMessageStrings.FeatureLayer_Selection">
            <summary>
              Looks up a localized string similar to Selection.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.SymbologyMessageStrings.FeatureLayer_UnselectAll">
            <summary>
              Looks up a localized string similar to Unselect All.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.SymbologyMessageStrings.FeatureLayer_Zoom_To_Selected">
            <summary>
              Looks up a localized string similar to Zoom to Selected Features.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.SymbologyMessageStrings.FileCantBeDeletedException_S">
            <summary>
              Looks up a localized string similar to The file %S can&apos;t be deleted, probably because it is currently in use by another application..
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.SymbologyMessageStrings.Layer_Properties">
            <summary>
              Looks up a localized string similar to Properties.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.SymbologyMessageStrings.LayerFrame_CreateGroup">
            <summary>
              Looks up a localized string similar to Create Group.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.SymbologyMessageStrings.LayerFrame_Map_Layers">
            <summary>
              Looks up a localized string similar to Map Layers.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.SymbologyMessageStrings.LayerFrame_RemoveMapFrame">
            <summary>
              Looks up a localized string similar to Remove Map Frame.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.SymbologyMessageStrings.LayerFrame_ZoomToMapFrame">
            <summary>
              Looks up a localized string similar to Zoom to Map Frame.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.SymbologyMessageStrings.LayerManager_FileTypeNotSupported">
            <summary>
              Looks up a localized string similar to The specified file type is not supported..
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.SymbologyMessageStrings.LineFeatureTypeException">
            <summary>
              Looks up a localized string similar to An incompatible feature type was supplied and was not of type Line..
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.SymbologyMessageStrings.NullLogException_S">
            <summary>
              Looks up a localized string similar to The argument %S cannot be null..
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.SymbologyMessageStrings.PointFeatureTypeException">
            <summary>
              Looks up a localized string similar to An incompatible feature type was supplied and was not of type Point..
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.SymbologyMessageStrings.PolygonFeatureTypeException">
            <summary>
              Looks up a localized string similar to An incompatible feature type was supplied and was not of type polygon..
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.SymbologyMessageStrings.Properties">
            <summary>
              Looks up a localized string similar to Properties.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.SymbologyMessageStrings.RemoveLayer">
            <summary>
              Looks up a localized string similar to Remove Layer.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.SymbologyMessageStrings.SetDynamicVisibilityScale">
            <summary>
              Looks up a localized string similar to Set Dynamic Visibility Scale.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.SymbologyMessageStrings.ZoomToLayer">
            <summary>
              Looks up a localized string similar to Zoom to Layer.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.LegendItemExt">
            <summary>
            Contains extension methods for ILegendItems
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LegendItemExt.GetValidContainerFor(DotSpatial.Symbology.ILegendItem,DotSpatial.Symbology.ILegendItem)">
            <summary>
            This method starts with this legend item and tests to see if it can contain
            the specified target.  As it moves up the
            </summary>
            <param name="startItem">This legend item</param>
            <param name="dropItem">The target legend item to test</param>
            <returns>An ILegendItem that is one of the parent items of this item, but that can receive the target.</returns>
        </member>
        <member name="M:DotSpatial.Symbology.LegendItemExt.InsertIndex(DotSpatial.Symbology.ILegendItem,DotSpatial.Symbology.ILegendItem)">
            <summary>
            Given the starting position, which might not be able to contain the drop item,
            determine the index in the valid container where this item should end up.
            </summary>
            <param name="startItem">The legend item that may not be a sibling or be able to contain the drop item</param>
            <param name="dropItem">The item being added to the legend</param>
            <returns>The integer index of the valid container where insertion should occur when dropping onto this item.</returns>
        </member>
        <member name="M:DotSpatial.Symbology.LegendItemExt.BottomMember(DotSpatial.Symbology.ILegendItem)">
            <summary>
            Searches through the LegendItems recursively, looking for the 0 index
            member of the deepest part of the tree.
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.LegendItemExt.ParentMapFrame(DotSpatial.Symbology.ILegendItem)">
            <summary>
            This method starts with this legend item and searches through the
            parent groups until it finds a valid mapframe.
            </summary>
            <param name="self">The ILegendItem to start from</param>
            <returns>The IMapFrame that contains this item.</returns>
        </member>
        <member name="T:DotSpatial.Symbology.LegendIcon">
            <summary>
            LegendIcon
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LegendIcon.#ctor">
            <summary>
            Creates a new instance of LegendIcon
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LegendIcon.GetLegendSymbolSize">
            <summary>
            Gets the legend symbol size (as an icon size)
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.LegendIcon.LegendSymbol_Painted(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws the icon to the legend
            </summary>
            <param name="g"></param>
            <param name="box"></param>
        </member>
        <member name="P:DotSpatial.Symbology.LegendIcon.Icon">
            <summary>
            The icon to draw for this legend item
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.ImageLayer">
            <summary>
            GeoImageLayer
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.IImageLayer">
            <summary>
            IImageLayer
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IImageLayer.Symbolizer">
            <summary>
            Gets or sets a class that has some basic parameters that control how the image layer
            is drawn.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IImageLayer.DataSet">
            <summary>
            Gets or sets the dataset specifically as an IImageData object
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IImageLayer.Image">
            <summary>
            Gets or sets the image being drawn by this layer
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ImageLayer.#ctor">
            <summary>
            Creates a blank image layer that needs to be configured later.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ImageLayer.#ctor(System.String)">
            <summary>
            Creates a new instance of the ImageLayer by opening the specified fileName
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:DotSpatial.Symbology.ImageLayer.#ctor(System.String,DotSpatial.Data.IProgressHandler,System.Collections.Generic.ICollection{DotSpatial.Symbology.ILayer})">
            <summary>
            Creates a new instance of the ImageLayer by opening the specified fileName, relaying progress to the
            specified handler, and automatically adds the new layer to the specified container.
            </summary>
            <param name="fileName">The fileName to open</param>
            <param name="progressHandler">A ProgressHandler that can receive progress updates</param>
            <param name="container">The layer list that should contain this image layer</param>
        </member>
        <member name="M:DotSpatial.Symbology.ImageLayer.#ctor(System.String,DotSpatial.Data.IProgressHandler)">
            <summary>
            Creates a new instance of the image layer by opening the specified fileName and
            relaying progress to the specified handler.
            </summary>
            <param name="fileName">The fileName to open</param>
            <param name="progressHandler">The progressHandler</param>
        </member>
        <member name="M:DotSpatial.Symbology.ImageLayer.#ctor(DotSpatial.Data.IImageData)">
            <summary>
            Creates a new instance of GeoImageLayer
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ImageLayer.#ctor(DotSpatial.Data.IImageData,System.Collections.Generic.ICollection{DotSpatial.Symbology.ILayer})">
            <summary>
            Creates a new instance of a GeoImageLayer
            </summary>
            <param name="baseImage">The image to draw as a layer</param>
            <param name="container">The Layers collection that keeps track of the image layer</param>
        </member>
        <member name="M:DotSpatial.Symbology.ImageLayer.OnShowProperties(System.ComponentModel.HandledEventArgs)">
            <summary>
            Handles when this layer should show its properties by firing the event on the shared event sender
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DotSpatial.Symbology.ImageLayer.Dispose(System.Boolean)">
            <summary>
            Dispose memory objects.
            </summary>
            <param name="disposeManagedResources">True if managed memory objects should be set to null.</param>
        </member>
        <member name="P:DotSpatial.Symbology.ImageLayer.DataSet">
            <summary>
            Gets or sets the underlying data for this object
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ImageLayer.Extent">
            <summary>
            Gets the geographic bounding envelope for the image
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ImageLayer.Symbolizer">
            <summary>
            Gets or sets a class that has some basic parameters that control how the image layer
            is drawn.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ImageLayer.Image">
            <summary>
            Gets or sets the image being drawn by this layer
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.PicturePattern">
            <summary>
            PicturePattern
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.PicturePattern.#ctor">
            <summary>
            Creates a new instance of PicturePattern
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.PicturePattern.#ctor(System.Drawing.Image,System.Drawing.Drawing2D.WrapMode,System.Double)">
            <summary>
            Creates a new PicturePattern with the specified image
            </summary>
            <param name="picture">The picture to draw</param>
            <param name="wrap">The way to wrap the picture</param>
            <param name="angle">The angle to rotate the image</param>
        </member>
        <member name="M:DotSpatial.Symbology.PicturePattern.Open(System.String)">
            <summary>
            Opens the specified image or icon file to a local copy.  Icons are converted into bitmaps.
            </summary>
            <param name="fileName">The string fileName to open.</param>
        </member>
        <member name="M:DotSpatial.Symbology.PicturePattern.Dispose">
            <summary>
            Disposes the image picture for this PicturePattern.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.PicturePattern.FillPath(System.Drawing.Graphics,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Instructs the drawing code to fill the specified path with the specified image.
            </summary>
            <param name="g">The Graphics device to draw to</param>
            <param name="gp">The GraphicsPath to fill</param>
        </member>
        <member name="P:DotSpatial.Symbology.PicturePattern.Angle">
            <summary>
            Gets or sets the angle for the texture in degrees.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.PicturePattern.DialogFilter">
            <summary>
            Gets the string dialog filter that represents the supported picture file formats.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.PicturePattern.Picture">
            <summary>
            Gets or sets the image to use as a repeating texture
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.PicturePattern.PictureFilename">
            <summary>
            Gets or sets the picture fileName.  Setting this will load the picture.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.PicturePattern.Scale">
            <summary>
            Gets or sets a multiplier that should be multiplied against the width and height of the
            picture before it is used as a texture in pixel coordinates.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.PicturePattern.WrapMode">
            <summary>
            Gets or sets the wrap mode.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.PointSymbolizer">
            <summary>
            PointSymbolizer
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.IPointSymbolizer">
            <summary>
            IPointSymbolizer
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.IPointSymbolizer.Draw(System.Drawing.Graphics,System.Double)">
            <summary>
            Draws the symbol to the specified graphics object.
            </summary>
            <param name="g"></param>
            <param name="scaleSize"></param>
        </member>
        <member name="M:DotSpatial.Symbology.IPointSymbolizer.Scale(System.Double)">
            <summary>
            Multiplies all the linear measurements, like width, height, and offset values by the specified value.
            </summary>
            <param name="value">The double precision value to multiply all of the values against.</param>
        </member>
        <member name="M:DotSpatial.Symbology.IPointSymbolizer.GetSize">
            <summary>
            Gets the maximum size for all of the layers, modified by the offsets.  This, in essence, represents the bounds
            for the entire symbol.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.IPointSymbolizer.SetSize(DotSpatial.Symbology.Size2D)">
            <summary>
            This assumes that you wish to simply scale the various sizes.
            It will adjust all of the sizes so that the maximum size is
            the same as the specified size.
            </summary>
            <param name="value">The Size2D of the new maximum size</param>
        </member>
        <member name="M:DotSpatial.Symbology.IPointSymbolizer.GetFillColor">
            <summary>
            Gets the color of the top-most symbol
            </summary>
            <returns>The color of the top-most symbol</returns>
        </member>
        <member name="M:DotSpatial.Symbology.IPointSymbolizer.SetFillColor(System.Drawing.Color)">
            <summary>
            Sets the color of the top-most layer symbol
            </summary>
            <param name="color">The color to assign to the top-most layer.</param>
        </member>
        <member name="P:DotSpatial.Symbology.IPointSymbolizer.Symbols">
            <summary>
            Gets or sets the list of symbols.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.PointSymbolizer.#ctor">
            <summary>
            Creates a new instance of PointSymbolizer
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.PointSymbolizer.#ctor(DotSpatial.Symbology.ISymbol)">
            <summary>
            Generates a new symbolizer with only one symbol.
            </summary>
            <param name="symbol">The symbol to use for creating this symbolizer</param>
        </member>
        <member name="M:DotSpatial.Symbology.PointSymbolizer.#ctor(System.Collections.Generic.IEnumerable{DotSpatial.Symbology.ISymbol})">
            <summary>
            Builds the new list of symbols from the symbols in the preset list or array of symbols.
            </summary>
            <param name="presetSymbols"></param>
        </member>
        <member name="M:DotSpatial.Symbology.PointSymbolizer.#ctor(System.Drawing.Color,DotSpatial.Symbology.PointShape,System.Double)">
            <summary>
            Creates a point symbolizer with one member, and that member is constructed
            based on the values specified.
            </summary>
            <param name="color"></param>
            <param name="shape"></param>
            <param name="size"></param>
        </member>
        <member name="M:DotSpatial.Symbology.PointSymbolizer.#ctor(System.Drawing.Image,System.Double)">
            <summary>
            Creates a point symbolizer with one memberw, and that member is constructed
            from the specified image.
            </summary>
            <param name="image">The image to use as a point symbol</param>
            <param name="size">The desired output size of the larger dimension of the image.</param>
        </member>
        <member name="M:DotSpatial.Symbology.PointSymbolizer.#ctor(System.Char,System.String,System.Drawing.Color,System.Double)">
            <summary>
            Creates a new point symbolizer that has a character symbol based on the specified characteristics.
            </summary>
            <param name="character">The character to draw</param>
            <param name="fontFamily">The font family to use for rendering the font</param>
            <param name="color">The font color</param>
            <param name="size">The size of the symbol</param>
        </member>
        <member name="M:DotSpatial.Symbology.PointSymbolizer.#ctor(System.Boolean)">
            <summary>
            Creates a new PointSymbolizer
            </summary>
            <param name="selected"></param>
        </member>
        <member name="M:DotSpatial.Symbology.PointSymbolizer.#ctor(System.Boolean,DotSpatial.Topology.IRectangle)">
            <summary>
            Sets the symbol type to geographic and generates a size that is 1/100 the width of the specified extents.
            </summary>
            <param name="selected"></param>
            <param name="extents"></param>
        </member>
        <member name="M:DotSpatial.Symbology.PointSymbolizer.SetOutline(System.Drawing.Color,System.Double)">
            <summary>
            Sets the outline, assuming that the symbolizer either supports outlines, or
            else by using a second symbol layer.
            </summary>
            <param name="outlineColor">The color of the outline</param>
            <param name="width">The width of the outline in pixels</param>
        </member>
        <member name="M:DotSpatial.Symbology.PointSymbolizer.GetSize">
            <summary>
            Returns the encapsulating size when considering all of the symbol layers that make up this symbolizer.
            </summary>
            <returns>A Size2D</returns>
        </member>
        <member name="M:DotSpatial.Symbology.PointSymbolizer.SetSize(DotSpatial.Symbology.Size2D)">
            <summary>
            This assumes that you wish to simply scale the various sizes.
            It will adjust all of the sizes so that the maximum size is
            the same as the specified size.
            </summary>
            <param name="value">The Size2D of the new maximum size</param>
        </member>
        <member name="M:DotSpatial.Symbology.PointSymbolizer.GetLegendSymbolSize">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Symbology.PointSymbolizer.GetFillColor">
            <summary>
            Returns the color of the top-most layer symbol
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.PointSymbolizer.SetFillColor(System.Drawing.Color)">
            <summary>
            Sets the color of the top-most layer symbol
            </summary>
            <param name="color">The color to assign to the top-most layer.</param>
        </member>
        <member name="M:DotSpatial.Symbology.PointSymbolizer.Draw(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws the specified value
            </summary>
            <param name="g">The Graphics object to draw to</param>
            <param name="target">The Rectangle defining the bounds to draw in</param>
        </member>
        <member name="M:DotSpatial.Symbology.PointSymbolizer.Draw(System.Drawing.Graphics,System.Double)">
            <summary>
            Draws the point symbol to the specified graphics object by cycling through each of the layers and
            drawing the content.  This assumes that the graphics object has been translated to the specified point.
            </summary>
            <param name="g"></param>
            <param name="scaleSize">Scale size represents the constant to multiply to the geographic measures in order to turn them into pixel coordinates </param>
        </member>
        <member name="M:DotSpatial.Symbology.PointSymbolizer.Scale(System.Double)">
            <summary>
            Multiplies all the linear measurements, like width, height, and offset values by the specified value.
            </summary>
            <param name="value">The double precision value to multiply all of the values against.</param>
        </member>
        <member name="M:DotSpatial.Symbology.PointSymbolizer.OnRandomize(System.Random)">
            <summary>
            This controls randomly creating a single random symbol from the symbol types, and randomizing it.
            </summary>
            <param name="generator"></param>
        </member>
        <member name="P:DotSpatial.Symbology.PointSymbolizer.Symbols">
            <summary>
            Gets or sets the set of layered symbols.  The symbol with the highest index is drawn on top.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.ModifySelectionMode">
            <summary>
            ModifySelectionModes
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.ModifySelectionMode.Append">
            <summary>
            Appends the newly selected features to the existing selection
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.ModifySelectionMode.Subtract">
            <summary>
            Subtracts the newly selected features from the existing features.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.ModifySelectionMode.Replace">
            <summary>
            Clears the current selection and selects the new features
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.ModifySelectionMode.SelectFrom">
            <summary>
            Selects the new features only from the existing selection
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.ILineSymbolizer">
            <summary>
            ILineSymbolizer
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ILineSymbolizer.DrawPath(System.Drawing.Graphics,System.Drawing.Drawing2D.GraphicsPath,System.Double)">
            <summary>
            Sequentially draws all of the strokes using the specified graphics path.
            </summary>
            <param name="g">The graphics device to draw to</param>
            <param name="gp">The graphics path that describes the pathway to draw</param>
            <param name="scaleWidth">The double scale width that when multiplied by the width gives a measure in pixels</param>
        </member>
        <member name="M:DotSpatial.Symbology.ILineSymbolizer.GetFillColor">
            <summary>
            Gets the color of the top-most stroke.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ILineSymbolizer.SetFillColor(System.Drawing.Color)">
            <summary>
            Sets the fill color fo the top-most stroke, and forces the top-most stroke
            to be a type of stroke that can accept a fill color if necessary.
            </summary>
            <param name="fillColor"></param>
        </member>
        <member name="M:DotSpatial.Symbology.ILineSymbolizer.GetWidth">
            <summary>
            This gets the largest width of all the strokes.
            Setting this will change the width of all the strokes to the specified width, and is not recommended
            if you are using thin lines drawn over thicker lines.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ILineSymbolizer.SetWidth(System.Double)">
            <summary>
            This forces the width to exist across all the strokes in this symbolizer.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILineSymbolizer.Strokes">
            <summary>
            Gets or sets the list of strokes that will be combined to make up a single drawing pass for this line.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.IDrawingFilter">
            <summary>
            IDrawingFilter
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.IDrawingFilter.ApplyScheme(DotSpatial.Symbology.IFeatureScheme)">
            <summary>
            This will set all values to the default (0) category.  Then, it will use the filter
            expressions on the remaining categories to change the categories for those members.
            This means that an item will be classified as the last filter that it qualifies for.
            </summary>
            <param name="scheme">The scheme of categories to apply to the drawing states</param>
        </member>
        <member name="M:DotSpatial.Symbology.IDrawingFilter.Invalidate">
            <summary>
            Invalidates this drawing filter, forcing a re-creation
            of the entire dictionary from the source featureset.
            This should only be done if changes are made to the
            feature list while SuspendChanges on the list is true.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.IDrawingFilter.GetDefaultState(System.Int32)">
            <summary>
            If UseChunks is true, this uses the index value combined with the chunk size
            to calculate the chunk, and also sets the category to the [0] category and the
            selection state to unselected.  This can be overridden in sub-classes to come up
            with a different default state.
            </summary>
            <param name="index">The integer index to get the default state of</param>
            <returns>An IDrawnState</returns>
        </member>
        <member name="E:DotSpatial.Symbology.IDrawingFilter.Initialized">
            <summary>
            Occurs after this filter has built its internal list of items.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IDrawingFilter.Category">
            <summary>
            Gets or sets the scheme category to use
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IDrawingFilter.Chunk">
            <summary>
            Gets the integer chunk that the filter should use
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IDrawingFilter.ChunkSize">
            <summary>
            Gets or sets the integer size of each chunk.  Setting this to
            a new value will cycle through and update the chunk on all
            the features.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IDrawingFilter.Count">
            <summary>
            If the drawing state for any features has changed, or else if
            the state of any members has changed, this will cycle through
            the filter members and cache a new count.  If nothing has
            changed, then this will simply return the cached value.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IDrawingFilter.DefaultCategory">
            <summary>
            Gets the default category for the scheme.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IDrawingFilter.DrawnStates">
            <summary>
            Gets the dictionary of drawn states that this drawing filter uses.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IDrawingFilter.FeatureList">
            <summary>
            Gets the underlying list of features that this drawing filter
            is ultimately based upon.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IDrawingFilter.NumChunks">
            <summary>
            If chunks are being used, then this indicates the total count of chunks.
            Otherwise, this returns 1 as everything is effectively in one chunk.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IDrawingFilter.Selected">
            <summary>
            If UseSelection is true, this will get or set the boolean selection state
            that will be used to select values.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IDrawingFilter.Item(DotSpatial.Data.IFeature)">
            <summary>
            This uses the feature as the key and attempts to find the specified drawn state
            that describes selection, chunk and category.
            </summary>
            <param name="key">The feature</param>
            <remarks>The strength is that if someone inserts a new member or re-orders
            the features in the featureset, we don't forget which ones are selected.
            The disadvantage is that duplicate features in the same featureset
            will cause an exception.</remarks>
            <returns></returns>
        </member>
        <member name="P:DotSpatial.Symbology.IDrawingFilter.Item(System.Int32)">
            <summary>
            This is less direct as it requires searching two indices rather than one, but
            allows access to the drawn state based on the feature ID.
            </summary>
            <param name="index">The integer index in the underlying featureSet.</param>
            <returns>The current IDrawnState for the current feature.</returns>
        </member>
        <member name="P:DotSpatial.Symbology.IDrawingFilter.UseChunks">
            <summary>
            Gets or sets a boolean that indicates whether we should use the chunk
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IDrawingFilter.UseSelection">
            <summary>
            Gets or sets a boolean that indicates whether this filter should use the Selected
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IDrawingFilter.UseCategory">
            <summary>
            Gets or sets a boolean that indicates whether the filter should subdivide based on category.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IDrawingFilter.UseVisibility">
            <summary>
            Gets or sets a boolean that indicates whether the filter should consider the IsVisible property
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IDrawingFilter.Visible">
            <summary>
            Gets or sets a boolean that specifies whether to return visible, or hidden features if UseVisibility is true.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.FeatureEditorSettings">
            <summary>
            VectorEditorSettings
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureEditorSettings.#ctor">
            <summary>
            Creates a new instance of VectorEditorSettings
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureEditorSettings.ClassificationType">
            <summary>
            Gets or sets the unique values.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureEditorSettings.EndSize">
            <summary>
            Gets or sets the double size for the last item in the range
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureEditorSettings.FieldName">
            <summary>
            Gets or sets the field name that categories are based on
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureEditorSettings.NormField">
            <summary>
            Gets or sets the normalization field
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureEditorSettings.GradientAngle">
            <summary>
            Gets or sets the gradient angle if use gradient is true
            and the shape is a polygon shape.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureEditorSettings.StartSize">
            <summary>
            Gets or sets the double start size for point or line size ranges
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureEditorSettings.TemplateSymbolizer">
            <summary>
            Gets or sets the feature symbolizer that acts as a template for
            any characteristics not covered by the size and color ranges.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureEditorSettings.UseGradient">
            <summary>
            Gets or sets a boolean indicating whether or not to
            use a gradient when randomly calculating polygon
            forms.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureEditorSettings.UseSizeRange">
            <summary>
            Gets or sets a boolean indicating whether the size range should be used instead of
            the size specified by the template.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.ExpressionEventArgs">
            <summary>
            StringEventArgs
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ExpressionEventArgs.#ctor(System.String)">
            <summary>
            Creates a new instance of StringEventArgs
            </summary>
            <param name="expression">The string expression for this event args</param>
        </member>
        <member name="P:DotSpatial.Symbology.ExpressionEventArgs.Expression">
            <summary>
            The string expression for this event.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.SymbologyGlobal">
            <summary>
            Global has some basic methods that may be useful in lots of places.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.SymbologyGlobal._defaultRandom">
            <summary>
            An instance of Random that is created when needed and sits around so we don't keep creating new ones.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.SymbologyGlobal.HighlightBrush(System.Drawing.Rectangle,System.Drawing.Color)">
            <summary>
            Gets a cool Highlight brush for highlighting things
            </summary>
            <param name="box">The rectangle in the box</param>
            <param name="selectionHighlight">The color to use for the higlight</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.SymbologyGlobal.DrawRoundedRectangle(System.Drawing.Graphics,System.Drawing.Pen,System.Drawing.Rectangle)">
            <summary>
            Draws a rectangle with ever so slightly rounded edges.  Good for selection borders.
            </summary>
            <param name="g">The Graphics object</param>
            <param name="pen">The pen to draw with</param>
            <param name="rect">The rectangle to draw to.</param>
        </member>
        <member name="M:DotSpatial.Symbology.SymbologyGlobal.GetRectangle(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Obtains a system.Drawing.Rectangle based on the two points, using them as
            opposite extremes for the rectangle.
            </summary>
            <param name="a">one corner point of the rectangle.</param>
            <param name="b">The opposing corner of the rectangle.</param>
            <returns>A System.Draing.Rectangle</returns>
        </member>
        <member name="M:DotSpatial.Symbology.SymbologyGlobal.RandomColor">
            <summary>
            Returns a completely random opaque color.
            </summary>
            <returns>A random color.</returns>
        </member>
        <member name="M:DotSpatial.Symbology.SymbologyGlobal.RandomTranslucent(System.Single)">
            <summary>
            This allows the creation of a transparent color with the specified opacity.
            </summary>
            <param name="opacity">A float ranging from 0 for transparent to 1 for opaque</param>
            <returns>A Color</returns>
        </member>
        <member name="M:DotSpatial.Symbology.SymbologyGlobal.RandomLightColor(System.Single)">
            <summary>
            This allows the creation of a transparent color with the specified opacity.
            </summary>
            <param name="opacity">A float ranging from 0 for transparent to 1 for opaque</param>
            <returns>A Color</returns>
        </member>
        <member name="M:DotSpatial.Symbology.SymbologyGlobal.RandomDarkColor(System.Single)">
            <summary>
            This allows the creation of a transparent color with the specified opacity.
            </summary>
            <param name="opacity">A float ranging from 0 for transparent to 1 for opaque</param>
            <returns>A Color</returns>
        </member>
        <member name="M:DotSpatial.Symbology.SymbologyGlobal.ColorFromHsl(System.Double,System.Double,System.Double)">
             <summary>
            Converts a colour from HSL to RGB
            </summary>
            <remarks>Adapted from the algoritm in Foley and Van-Dam</remarks>
            <param name="hue">A double representing degrees ranging from 0 to 360 and is equal to the GetHue() on a Color structure.</param>
            <param name="saturation">A double value ranging from 0 to 1, where 0 is gray and 1 is fully saturated with color.</param>
            <param name="brightness">A double value ranging from 0 to 1, where 0 is black and 1 is white.</param>
            <returns>A Color structure with the equivalent hue saturation and brightness</returns>
        </member>
        <member name="T:DotSpatial.Symbology.IShadedRelief">
            <summary>
            IShadedRelief
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.IShadedRelief.GetLightDirection">
            <summary>
            Returns the normalized light direction in X, Y, Z format
            </summary>
            <returns></returns>
        </member>
        <member name="E:DotSpatial.Symbology.IShadedRelief.ShadingChanged">
            <summary>
            Occurs when the shading for this object has been altered.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IShadedRelief.AmbientIntensity">
            <summary>
            Gets or sets a float specifying how strong the ambient directional light is.  This should probably be about 1.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IShadedRelief.ElevationFactor">
            <summary>
            This is kept separate from extrusion to reduce confusion.  This is a conversion factor that will
            convert the units of elevation into the same units that the latitude and longitude are stored in.
            To convert feet to decimal degrees is around a factor of .00000274
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IShadedRelief.Extrusion">
            <summary>
            A float value expression that modifies the "height" of the apparent shaded relief.  A value
            of 1 should show the mountains at their true elevations, presuming the ElevationFactor is
            correct.  A value of 0 would be totally flat, while 2 would be twice the value.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IShadedRelief.IsUsed">
            <summary>
            Gets or sets a boolean value indicating whether the ShadedRelief should be used or not.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IShadedRelief.LightIntensity">
            <summary>
            This specifies a float that should probably be around 1, which controls the light intensity.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IShadedRelief.ZenithAngle">
            <summary>
            Gets the zenith angle in degrees measured with 0 at the horizon and 90 vertically up
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IShadedRelief.LightDirection">
            <summary>
            The Azimuth light direction in degrees measured clockwise from North
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IShadedRelief.HasChanged">
            <summary>
            Gets whether or not the values have been changed on this ShadedRelief more recently than
            a HillShade map has been calculated from it.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.Range">
            <summary>
            Numeric range using doubles
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.Range._maxIsInclusive">
            <summary>
            Boolean, true if the upper bounds includes the maximum value.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.Range._maximum">
            <summary>
            The maximum value.  If this is null, the upper range is unbounded.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.Range._minIsInclusive">
            <summary>
            Boolean, true if the the lower bounds includes the minimum value.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.Range._minimum">
            <summary>
            The minimum value.  If this is null, the lower range is unbounded.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.Range.#ctor">
            <summary>
            Creates a new instance of Range (with undefined interval)
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.Range.#ctor(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Creates a new instance of Range
            </summary>
            <param name="value1">Either bound of the range</param>
            <param name="value2">The other bound of the range</param>
        </member>
        <member name="M:DotSpatial.Symbology.Range.#ctor(System.Double)">
            <summary>
            Creates an equality type range where both the minimum and maximum are the
            same value and both are inclusive.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:DotSpatial.Symbology.Range.#ctor(System.String)">
            <summary>
            A string expression that can be two separate numbers separated by a dash,
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:DotSpatial.Symbology.Range.ToString">
            <summary>
            Expresses this range in string form.  By default, ranges include the maximum,
            and exclude the minimum.  A null value for one expression will result in a
            a semi-unbounded range using the greater than or less than symbols.  A null
            expression for both values is completely unbounded and will result in a string
            that reads like [All Values].
            </summary>
            <returns>A string representing the range.</returns>
        </member>
        <member name="M:DotSpatial.Symbology.Range.ToString(DotSpatial.Symbology.IntervalSnapMethod,System.Int32)">
            <summary>
            This is a slightly more complex specification where the numeric formatting
            controls how the generated string will appear.
            </summary>
            <param name="method">The interval snap method</param>
            <param name="digits">This is only used for rounding or significant figures, but controls those options</param>
            <returns>A string equivalent of this range, but using a number format.</returns>
        </member>
        <member name="M:DotSpatial.Symbology.Range.ToExpression(System.String)">
            <summary>
            Generates a valid SQL query expression for this range, using the field string
            as the member being compared.  The field string should already be bound in
            brackets, or put together as a normal composit like "[males]/[pop1990]"
            </summary>
            <param name="field">The field name to build into an expression.  This should already be wrapped in square brackets.</param>
            <returns>The string SQL query expression.</returns>
        </member>
        <member name="M:DotSpatial.Symbology.Range.Contains(System.Double)">
            <summary>
            Tests to determine if this range contains the specified double value.
            </summary>
            <param name="value">the double value to test</param>
            <returns>Boolean, true if the value is within the current bounds.</returns>
        </member>
        <member name="M:DotSpatial.Symbology.Range.FixOrder">
            <summary>
            If the minimum and maximum are out of order, this reverses them.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.Range.Minimum">
            <summary>
            Gets or sets teh Minimum value.  If this is null, the lower range is unbounded.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.Range.Maximum">
            <summary>
            The maximum value.  If this is null, the upper range is unbounded.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.Range.MinIsInclusive">
            <summary>
            Boolean, true if the the lower bounds includes the minimum value.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.Range.MaxIsInclusive">
            <summary>
            Boolean, true if the upper bounds includes the maximum value.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.CustomSymbolProvider">
            <summary>
            This class returns a list of predefined symbolizers.
            In the current implementation the symbolizers are 'hard-coded'.
            In other implementations they will be loaded from a xml resource file.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.CustomSymbolProvider.#ctor">
            <summary>
            Creates a new instance of PredefinedLineSymbolProvider
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.CustomSymbolProvider.GetAvailableCategories(DotSpatial.Symbology.SymbolizerType)">
            <summary>
            Gets a string array of all available categories (groups) of custom predefined symbols
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.GeoReferenceType">
            <summary>
            World or pixel coordinates
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.GeoReferenceType.Empty">
            <summary>
            No referencing was specified so the default will be used
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.GeoReferenceType.GeoReferenced">
            <summary>
            The coordinates are given relative to the geographic locations, rather than pixel coordinates
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.GeoReferenceType.Pixels">
            <summary>
            The coordinates are given in pixels
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.PictureType">
            <summary>
            An enumeration showing whetehr this item should use a picture or an image
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.PictureType.Empty">
            <summary>
            No specification was set, so use the default
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.PictureType.Icon">
            <summary>
            Specifies to use an icon
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.PictureType.Image">
            <summary>
            Specifies to use an image
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.LineStyle">
            <summary>
            Gives an enumeration for several different line styles
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.LineStyle.Empty">
            <summary>
            Specifies that none of the normal options were chosen so a default should be used.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.LineStyle.ClosedCurve">
            <summary>
            This will draw the specified line so that the curve joins itself
            at the ends.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.LineStyle.Curve">
            <summary>
            Draws a cardinal spline through the points of this feature
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.LineStyle.Lines">
            <summary>
            Draws a set of line segments through the points of this feature
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.TrueFalse">
            <summary>
            This is like a boolean, but with a "default" of empty.  Empty signifies
            that the value is not specified.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.TrueFalse.Empty">
            <summary>
            Not specified
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.TrueFalse.True">
            <summary>
            Specified as true
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.TrueFalse.False">
            <summary>
            Specified as false
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.LineJoinType">
            <summary>
            Specifies the OGC type of connection that can occur between two segments
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.LineJoinType.Mitre">
            <summary>
            Flat?
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.LineJoinType.Round">
            <summary>
            Rounded
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.LineJoinType.Bevel">
            <summary>
            Beveled
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.LineCapType">
            <summary>
            Specifies the OGC treatment to give the line at the end-points
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.LineCapType.Butt">
            <summary>
            Flat?
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.LineCapType.Round">
            <summary>
            Round
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.LineCapType.Square">
            <summary>
            flat but a little outwards
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.ItemEventArgs`1">
            <summary>
            A generic event argument that also allows sending the strong typed item.
            </summary>
            <typeparam name="T">The generic item associated with the event.</typeparam>
        </member>
        <member name="M:DotSpatial.Symbology.ItemEventArgs`1.#ctor(`0)">
            <summary>
            Creates a new instance of hte LegendItemEventArgs
            </summary>
            <param name="item">The item associated with the event.  This is not necessarilly the sender.</param>
        </member>
        <member name="P:DotSpatial.Symbology.ItemEventArgs`1.Item">
            <summary>
            The item associated with this event.  This is not necessarilly the sender.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.PolygonCategoryCollection">
            <summary>
            This is simply an alias to make things a tad (though not much) more understandable
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonCategoryCollection.#ctor">
            <summary>
            Initializes a new PolygonCategoryCollection instance with the supplied scheme.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonCategoryCollection.#ctor(DotSpatial.Symbology.IPolygonScheme)">
            <summary>
            Initializes a new PolygonCategoryCollection instance with the supplied scheme.
            </summary>
            <param name="scheme">The scheme to use ofr this collection.</param>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonCategoryCollection.OnSelectFeatures(System.Object,DotSpatial.Symbology.ExpressionEventArgs)">
            <summary>
            Instructs the parent layer to select features matching the specified expression.
            </summary>
            <param name="sender">The object sender where features were selected.</param>
            <param name="e">The event args describing the expression used for selection.</param>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonCategoryCollection.OnInclude(DotSpatial.Symbology.IPolygonCategory)">
            <summary>
            Ensures that newly added categories can navigate to higher legend items.
            </summary>
            <param name="item">The newly added legend item.</param>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonCategoryCollection.OnCopy(DotSpatial.Data.CopyList{DotSpatial.Symbology.IPolygonCategory})">
            <summary>
            Overrides the copy behavior to remove the now unnecessary SelecTFeatures event handler.
            </summary>
            <param name="copy"></param>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonCategoryCollection.OnExclude(DotSpatial.Symbology.IPolygonCategory)">
            <summary>
            Changes the parent item of the specified category
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:DotSpatial.Symbology.PolygonCategoryCollection.Scheme">
            <summary>
            Gets or sets the parent scheme for this collection
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.PolygonCategoryCollection.SelectFeatures">
            <summary>
            Occurs when a category indicates that its filter expression should be used
            to select its members.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.CharacterSymbol">
            <summary>
            CharacterSymbol
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.ICharacterSymbol">
            <summary>
            ICharacterSymbol
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ICharacterSymbol.ToString">
            <summary>
            Gets the string equivalent of the specified character code.
            </summary>
            <returns>A string version of the character</returns>
        </member>
        <member name="P:DotSpatial.Symbology.ICharacterSymbol.Category">
            <summary>
            Gets the unicode category for this character.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ICharacterSymbol.Character">
            <summary>
            Gets or sets the character that this represents.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ICharacterSymbol.CharacterSet">
            <summary>
            Unicode characters consist of 2 bytes.  This represents the first byte,
            which can be thought of as specifying a typeset.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ICharacterSymbol.Code">
            <summary>
            Gets or sets the byte code for the lower 256 values.  This represents the
            specific character in a given "typeset" range.
            </summary>
            <remarks>
            [Editor(typeof(CharacterCodeEditor), typeof(UITypeEditor))]
            </remarks>
        </member>
        <member name="P:DotSpatial.Symbology.ICharacterSymbol.FontFamilyName">
            <summary>
            Gets or sets the string font family name to use for this character set.
            </summary>
            <remarks>[Editor(typeof(FontFamilyNameEditor), typeof(UITypeEditor))]</remarks>
        </member>
        <member name="P:DotSpatial.Symbology.ICharacterSymbol.Style">
            <summary>
            Gets or sets the font style to use for this character layer.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.CharacterSymbol.#ctor">
            <summary>
            Creates a new instance of CharacterSymbol
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.CharacterSymbol.#ctor(System.Char)">
            <summary>
            Creates a new instance of CharacterSymbol
            </summary>
            <param name="character">The character to use for the symbol</param>
        </member>
        <member name="M:DotSpatial.Symbology.CharacterSymbol.#ctor(System.Char,System.String)">
            <summary>
            Creates a new instance of CharacterSymbol
            </summary>
            <param name="character">The character to use for the symbol</param>
            <param name="fontFamily">The font family for the character</param>
        </member>
        <member name="M:DotSpatial.Symbology.CharacterSymbol.#ctor(System.Char,System.String,System.Drawing.Color)">
            <summary>
            Creates a new instance of CharacterSymbol
            </summary>
            <param name="character">The character to use for the symbol</param>
            <param name="fontFamily">The font family for the character</param>
            <param name="color">The color for the character</param>
        </member>
        <member name="M:DotSpatial.Symbology.CharacterSymbol.#ctor(System.Char,System.String,System.Drawing.Color,System.Double)">
            <summary>
            Creates a new instance of CharacterSymbol
            </summary>
            <param name="character">The character to use for the symbol</param>
            <param name="fontFamily">The font family for the character</param>
            <param name="color">The color for the character</param>
            <param name="size">The size for the symbol</param>
        </member>
        <member name="M:DotSpatial.Symbology.CharacterSymbol.GetColor">
            <summary>
            Gets the font color of this symbol to represent the color of this symbol
            </summary>
            <returns>The color of this symbol as a font</returns>
        </member>
        <member name="M:DotSpatial.Symbology.CharacterSymbol.SetColor(System.Drawing.Color)">
            <summary>
            Sets the fill color of this symbol to the specified color
            </summary>
            <param name="color">The Color</param>
        </member>
        <member name="M:DotSpatial.Symbology.CharacterSymbol.Select">
            <summary>
            Modifies this symbol in a way that is appropriate for indicating a selected symbol.
            This could mean drawing a cyan outline, or changing the color to cyan.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.CharacterSymbol.ToString">
            <summary>
            Gets the string equivalent of the specified character code.
            </summary>
            <returns>A string version of the character</returns>
        </member>
        <member name="M:DotSpatial.Symbology.CharacterSymbol.GetSupportedSubsets">
            <summary>
            Because there is no easy range calculation supported in dot net
            (as compared to GDI32) that I can find, I assume that the
            unsupported values will come back as an open box, or at least
            identical in glyph form to a known unsupported like Arial 1024.
            (Not to be confused with Arial Unicode MS, which has basically
            everything.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.CharacterSymbol.OnDraw(System.Drawing.Graphics,System.Double)">
            <summary>
            Overrides the default behavior and attempts to draw the specified symbol
            </summary>
            <param name="g"></param>
            <param name="scaleSize"></param>
        </member>
        <member name="M:DotSpatial.Symbology.CharacterSymbol.OnRandomize(System.Random)">
            <summary>
            Extends the randomize code to include the character aspects, creating a random character.
            However, since most fonts don't support full unicode values, a character from 0 to 255 is
            chosen.
            </summary>
            <param name="generator">The random class generator</param>
        </member>
        <member name="P:DotSpatial.Symbology.CharacterSymbol.XmlColor">
            <summary>
            Supports serialization even though Colors can't be serialized
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.CharacterSymbol.Category">
            <summary>
            Gets the unicode category for this character.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.CharacterSymbol.Character">
            <summary>
            Gets or sets the character that this represents.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.CharacterSymbol.CharacterSet">
            <summary>
            Unicode characters consist of 2 bytes.  This represents the first byte,
            which can be thought of as specifying a typeset.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.CharacterSymbol.Code">
            <summary>
            Gets or sets the byte code for the lower 256 values.  This represents the
            specific character in a given "typeset" range.
            </summary>
            <remarks>
            //Editor(typeof(CharacterCodeEditor), typeof(UITypeEditor))
            </remarks>
        </member>
        <member name="P:DotSpatial.Symbology.CharacterSymbol.Color">
            <summary>
            Gets or sets the color
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.CharacterSymbol.FontFamilyName">
            <summary>
            Gets or sets the string font family name to use for this character set.
            </summary>
            <remarks>
            //Editor(typeof(FontFamilyNameEditor), typeof(UITypeEditor)),
            </remarks>
        </member>
        <member name="P:DotSpatial.Symbology.CharacterSymbol.Opacity">
            <summary>
            Gets or sets the opacity as a floating point value ranging from 0 to 1, where
            0 is fully transparent and 1 is fully opaque.  This actually adjusts the alpha of the color value.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.CharacterSymbol.Style">
            <summary>
            Gets or sets the font style to use for this character layer.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.PointCategory">
            <summary>
            PointSchemeCategory
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.PointCategory.#ctor">
            <summary>
            Creates a new instance of PointSchemeCategory
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.PointCategory.#ctor(DotSpatial.Topology.IRectangle)">
            <summary>
            Creates a new instanec of a default point scheme category where the geographic symbol size has been
            scaled to the specified extent.
            </summary>
            <param name="extent">The geographic extent that is 100 times wider than the geographic size of the points.</param>
        </member>
        <member name="M:DotSpatial.Symbology.PointCategory.#ctor(DotSpatial.Symbology.IPointSymbolizer)">
            <summary>
            Creates a new category based on a symbolizer, and uses the same symbolizer, but with a fill and border color of light cyan
            for the selection symbolizer
            </summary>
            <param name="pointSymbolizer">The symbolizer to use in order to create a category</param>
        </member>
        <member name="M:DotSpatial.Symbology.PointCategory.#ctor(System.Drawing.Color,DotSpatial.Symbology.PointShape,System.Double)">
            <summary>
            Creates a simple point category where the symbolizer is based on the simple characteristics.
            The selection symbolizer has the same shape and size, but will be colored cyan.
            </summary>
            <param name="color">The color of the regular symbolizer</param>
            <param name="shape">The shape of the regular symbolizer</param>
            <param name="size">the size of the regular symbolizer</param>
        </member>
        <member name="M:DotSpatial.Symbology.PointCategory.#ctor(System.Char,System.String,System.Drawing.Color,System.Double)">
            <summary>
            Creates a new Point Category based on the specified character
            </summary>
            <param name="character">The character to use for the symbol</param>
            <param name="fontFamilyName">The font family name to use as the font</param>
            <param name="color">The color of the character</param>
            <param name="size">The size of the symbol</param>
        </member>
        <member name="M:DotSpatial.Symbology.PointCategory.#ctor(System.Drawing.Image,System.Double)">
            <summary>
            Creates a category where the picture is used for the symbol, and a selected
            symbol is created as the same symbol but with a cyan border.
            </summary>
            <param name="picture">The image to use</param>
            <param name="size">The size of the symbol</param>
        </member>
        <member name="M:DotSpatial.Symbology.PointCategory.#ctor(DotSpatial.Symbology.ISymbol)">
            <summary>
            Creates a category from the single symbol specified.  If the symbol is colorable,
            the color of the selection symbol will be duplicated, but set to cyan.
            </summary>
            <param name="symbol"></param>
        </member>
        <member name="M:DotSpatial.Symbology.PointCategory.#ctor(System.Collections.Generic.IEnumerable{DotSpatial.Symbology.ISymbol})">
            <summary>
            Creates a new Point Category from the list of symbols
            </summary>
            <param name="symbols"></param>
        </member>
        <member name="M:DotSpatial.Symbology.PointCategory.GetColor">
            <summary>
            This gets a single color that attempts to represent the specified
            category.  For polygons, for example, this is the fill color (or central fill color)
            of the top pattern.  If an image is being used, the color will be gray.
            </summary>
            <returns>The System.Color that can be used as an approximation to represent this category.</returns>
        </member>
        <member name="M:DotSpatial.Symbology.PointCategory.SetColor(System.Drawing.Color)">
            <summary>
            Sets the Color of the top symbol in the symbols.
            </summary>
            <param name="color">The color to set the point.</param>
        </member>
        <member name="M:DotSpatial.Symbology.PointCategory.GetLegendSymbolSize">
            <summary>
            Gets the legend symbol size of the symbolizer for this category
            </summary>
            <returns></returns>
        </member>
        <member name="P:DotSpatial.Symbology.PointCategory.Symbolizer">
            <summary>
            Gets or sets the symbolizer for this category
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.PointCategory.SelectionSymbolizer">
            <summary>
            Gets or sets the symbolizer to use to draw selected features from this category.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.IndexSelection">
            <summary>
            IndexSelection
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.IndexSelection.AddRange(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Adds all of the specified index values to the selection
            </summary>
            <param name="indices">The indices to add</param>
        </member>
        <member name="M:DotSpatial.Symbology.IndexSelection.AddRegion(DotSpatial.Topology.IEnvelope,DotSpatial.Topology.IEnvelope@)">
            <summary>
            Add REgion
            </summary>
            <param name="region"></param>
            <param name="affectedArea"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.IndexSelection.InvertSelection(DotSpatial.Topology.IEnvelope,DotSpatial.Topology.IEnvelope@)">
             <summary>
            
             </summary>
             <param name="region"></param>
             <param name="affectedArea"></param>
             <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.IndexSelection.RemoveRange(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Attempts to remove all the members from the collection.  If
            one of the specified indices is outside the range of possible
            values, this returns false, even if others were successfully removed.
            This will also return false if none of the states were changed.
            </summary>
            <param name="indices">The indices to remove</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.IndexSelection.RemoveRegion(DotSpatial.Topology.IEnvelope,DotSpatial.Topology.IEnvelope@)">
             <summary>
            
             </summary>
             <param name="region"></param>
             <param name="affectedArea"></param>
             <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.IndexSelection.ToFeatureSet">
            <summary>
            Returns a new featureset based on the features in this collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.IndexSelection.ToFeatureList">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.IndexSelection.GetAttributes(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Symbology.IndexSelection.GetAttributes(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Symbology.IndexSelection.SetAttributes(System.Int32,System.Data.DataTable)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Symbology.IndexSelection.NumRows">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Symbology.IndexSelection.GetColumns">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Symbology.IndexSelection.GetColumn(System.String)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Symbology.IndexSelection.Add(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Symbology.IndexSelection.Clear">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Symbology.IndexSelection.Contains(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Symbology.IndexSelection.CopyTo(System.Int32[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Symbology.IndexSelection.Remove(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Symbology.IndexSelection.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Symbology.IndexSelection.AddRow(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Symbology.IndexSelection.AddRow(System.Data.DataRow)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Symbology.IndexSelection.Edit(System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Symbology.IndexSelection.Edit(System.Int32,System.Data.DataRow)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Symbology.IndexSelection.GetCounts(System.String[],DotSpatial.Data.ICancelProgressHandler,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Symbology.IndexSelection.#ctor(DotSpatial.Symbology.IFeatureLayer)">
            <summary>
            Creates a new instance of IndexSelection
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IndexSelection.Envelope">
            <summary>
            Calculates the envelope of this collection
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IndexSelection.SelectionMode">
            <summary>
            Selection Mode controls how envelopes are treated when working with geometries.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IndexSelection.SelectionState">
            <summary>
            Gets or sets whether this should work as "Selected" indices (true) or
            "UnSelected" indices (false).
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IndexSelection.ProgressHandler">
            <summary>
            Gets or sets the handler to use for progress messages during selection.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IndexSelection.Count">
            <inheritdoc />
        </member>
        <member name="P:DotSpatial.Symbology.IndexSelection.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="P:DotSpatial.Symbology.IndexSelection.RegionCategory">
            <summary>
            Setting this to a specific category will only allow selection by
            region to affect the features that are within the specified category.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.IndexSelection.IndexSelectionEnumerator">
            <summary>
            This class cycles through the members
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.IndexSelection.IndexSelectionEnumerator.#ctor(DotSpatial.Symbology.FastDrawnState[],System.Boolean)">
            <summary>
            Creates a new instance of IndexSelectionEnumerator
            </summary>
            <param name="states"></param>
            <param name="selectionState"></param>
        </member>
        <member name="M:DotSpatial.Symbology.IndexSelection.IndexSelectionEnumerator.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Symbology.IndexSelection.IndexSelectionEnumerator.MoveNext">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Symbology.IndexSelection.IndexSelectionEnumerator.Reset">
            <inheritdoc />
        </member>
        <member name="P:DotSpatial.Symbology.IndexSelection.IndexSelectionEnumerator.Current">
            <inheritdoc />
        </member>
        <member name="T:DotSpatial.Symbology.RasterLayerEventSender">
            <summary>
            When a menu item is clicked, it usually shows a dialog, but the dialog might be
            System.Windows.Forms, which is not known in DotSpatial.Symbology.  Instead,
            the event is tracked to this class, which can be tracked.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.RasterLayerEventSender._instance">
            <summary>
            As part of the singleton pattern the fact that this is static
            allows all the various event throwing options to work through this.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.RasterLayerEventSender.#ctor">
            <summary>
            This is private as part of the Singleton pattern so that only using the
            "DefaultManager" appraoch
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.RasterLayerEventSender.Raise_ShowProperties(System.Object,DotSpatial.Symbology.RasterLayerEventArgs)">
            <summary>
            Raises the shared ShowPropertiesClicked event
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.RasterLayerEventSender.Raise_ExportData(System.Object,DotSpatial.Data.RasterEventArgs)">
            <summary>
            Raises the shared ExportDataclicked event
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.RasterLayerEventSender.Instance">
            <summary>
            This instance is static member of the singleton.
            SymbologyEvents bob = SymbologyEvents.Instance;
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.RasterLayerEventSender.ShowPropertiesClicked">
            <summary>
            Occurs when the "Properties" menu item is clicked in a feature layer
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.RasterLayerEventSender.ExportDataClicked">
            <summary>
            Occurs when the export data menu item has been clicked
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.PolygonScheme">
            <summary>
            PointScheme
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonScheme.#ctor">
            <summary>
            Creates a new instance of PointScheme with no categories added to the list yet.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonScheme.#ctor(DotSpatial.Data.IFeatureSet,System.String)">
            <summary>
            Initializes a new instance of the PolygonScheme class.
            </summary>
            <param name="fs">THe featureset with the data Table definition to use for symbolizing.</param>
            <param name="uniqueField">The string name of the field to use
            when calculating separate color codes.  Unique entries will be
            assigned a random color.</param>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonScheme.GenerateUniqueColors(DotSpatial.Data.IFeatureSet,System.String)">
            <summary>
            Calculates the unique colors as a scheme.
            </summary>
            <param name="fs">The featureset with the data Table definition.</param>
            <param name="uniqueField">The unique field.</param>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonScheme.DrawCategory(System.Int32,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws the regular symbolizer for the specified cateogry to the specified graphics
            surface in the specified bounding rectangle.
            </summary>
            <param name="index">The integer index of the feature to draw.</param>
            <param name="g">The Graphics object to draw to</param>
            <param name="bounds">The rectangular bounds to draw in</param>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonScheme.AddCategory(DotSpatial.Symbology.ICategory)">
            <summary>
            Adds a new scheme, assuming that the new scheme is the correct type.
            </summary>
            <param name="category">The category to add</param>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonScheme.DecreaseCategoryIndex(DotSpatial.Symbology.ICategory)">
            <summary>
            Reduces the index value of the specified category by 1 by
            exchaning it with the category before it.  If there is no
            category before it, then this does nothing.
            </summary>
            <param name="category">The category to decrease the index of</param>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonScheme.IncreaseCategoryIndex(DotSpatial.Symbology.ICategory)">
            <summary>
            Re-orders the specified member by attempting to exchange it with the next higher
            index category.  If there is no higher index, this does nothing.
            </summary>
            <param name="category">The category to increase the index of</param>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonScheme.InsertCategory(System.Int32,DotSpatial.Symbology.ICategory)">
            <summary>
            Inserts the category at the specified index
            </summary>
            <param name="index">The integer index where the category should be inserted</param>
            <param name="category">The category to insert</param>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonScheme.RemoveCategory(DotSpatial.Symbology.ICategory)">
            <summary>
            Removes the specified category
            </summary>
            <param name="category">The category to remove</param>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonScheme.SuspendEvents">
            <summary>
            Suspends the category events
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonScheme.ResumeEvents">
            <summary>
            Resumes the category events
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonScheme.ClearCategories">
            <summary>
            Clears the categories
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonScheme.GetDefaultColors(System.Int32)">
            <summary>
            If possible, use the template to control the colors.  Otherwise, just use the default
            settings for creating "unbounded" colors.
            </summary>
            <param name="count">The integer count.</param>
            <returns>The List of colors</returns>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonScheme.GetCategories">
            <summary>
            Gets teh categories as an IEnumerable of type IFeatureCategory
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonScheme.CreateNewCategory(System.Drawing.Color,System.Double)">
            <summary>
            Creates the category using a random fill color
            </summary>
            <param name="fillColor">The base color to use for creating the category</param>
            <param name="size">This is ignored for polygons</param>
            <returns>A new polygon category</returns>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonScheme.CreateRandomCategory(System.String)">
            <summary>
            Uses the settings on this scheme to create a random category.
            </summary>
            <returns>A new IFeatureCategory</returns>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonScheme.OnExcludeCategories(DotSpatial.Symbology.PolygonCategoryCollection)">
            <summary>
            Handle the event un-wiring and scheme update for the old categories
            </summary>
            <param name="categories">The category collection to update.</param>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonScheme.OnIncludeCategories(DotSpatial.Symbology.PolygonCategoryCollection)">
            <summary>
            Handle the event wiring and scheme update for the new categories.
            </summary>
            <param name="categories">The category collection to update</param>
        </member>
        <member name="P:DotSpatial.Symbology.PolygonScheme.Categories">
            <summary>
            Gets or sets the symbolic categories as a valid IPointSchemeCategoryCollection.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.PolygonScheme.NumCategories">
            <summary>
            Gets the number of categories in this scheme
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.PolygonFeatureTypeException">
            <summary>
            PolygonFeatureTypeException
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonFeatureTypeException.#ctor">
            <summary>
            Creates a new instance of PolygonFeatureTypeException
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonFeatureTypeException.#ctor(System.String)">
            <summary>
            Creates a new instance of PolygonFeatureTypeException
            </summary>
            <param name="message">The custom error message to use for this exception</param>
        </member>
        <member name="T:DotSpatial.Symbology.SimplePattern">
            <summary>
            SimplePattern
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.SimplePattern.#ctor">
            <summary>
            Creates a new instance of SimplePattern
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.SimplePattern.#ctor(System.Drawing.Color)">
            <summary>
            Creates a new SimplePattern with the specified fill color
            </summary>
            <param name="fillColor">The fill color to use for this simple pattern</param>
        </member>
        <member name="M:DotSpatial.Symbology.SimplePattern.GetFillColor">
            <summary>
            Gets the fill color
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.SimplePattern.SetFillColor(System.Drawing.Color)">
            <summary>
            Sets the fill color
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:DotSpatial.Symbology.SimplePattern.FillPath(System.Drawing.Graphics,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Fills the path
            </summary>
            <param name="g">The Graphics device to draw to</param>
            <param name="gp">The GraphicsPath to fill using this pattern</param>
        </member>
        <member name="P:DotSpatial.Symbology.SimplePattern.FillColor">
            <summary>
            Gets or sets solid Color used for filling this pattern.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.SimplePattern.Opacity">
            <summary>
            Sets the opacity of this simple pattern by modifying the alpha channel of the fill color.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.PictureMode">
            <summary>
            ImageModes
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.PictureMode.Icon">
            <summary>
            The icon property should be used for storing image data
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.PictureMode.Image">
            <summary>
            The image property should be used for storing image data
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.ISimpleSymbol">
            <summary>
            ISimpleSymbol
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.IOutlinedSymbol">
            <summary>
            IOutlinedSymbol
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.IOutlined">
            <summary>
            IOutlined
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IOutlined.OutlineColor">
            <summary>
            Gets or sets the outline color that surrounds this specific symbol.
            (this will have the same shape as the symbol, but be larger.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IOutlined.OutlineOpacity">
            <summary>
            This redefines the Alpha channel of the color to a floating point opacity
            that ranges from 0 to 1.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IOutlined.OutlineWidth">
            <summary>
            Gets or sets the size of the outline beyond the size of this symbol.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IOutlined.UseOutline">
            <summary>
            Gets or sets the boolean outline
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.IOutlinedSymbol.CopyOutline(DotSpatial.Symbology.IOutlinedSymbol)">
            <summary>
            Copies only the use outline, outline width and outline color properties from the specified symbol.
            </summary>
            <param name="symbol">The symbol to copy from.</param>
        </member>
        <member name="P:DotSpatial.Symbology.ISimpleSymbol.PointShape">
            <summary>
            Gets or sets the PointTypes enumeration that describes how to draw the simple symbol.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.IPictureSymbol">
            <summary>
            IPictureSymbol
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IPictureSymbol.Image">
            <summary>
            Gets or sets the image to use when the PictureMode is set to Image
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IPictureSymbol.ImageFilename">
            <summary>
            Gets or sets the string fileName, if any, associated with the image file.
            Setting this will automatically also load the Image.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IPictureSymbol.Opacity">
            <summary>
            Gets or sets the opacity for this image.  Setting this will automatically change the image in memory.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.CharacterSubset">
            <summary>
            CharacterSubsets
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.Basic_Latin">
            <summary>
            Basic Latin
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.Latin1_Supplement">
            <summary>
            Latin-1 Supplement
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.Latin_Extended_A">
            <summary>
            Latin Extended-A
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.Latin_Extended_B">
            <summary>
            Latin Extended-B
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.IPA_Extensions">
            <summary>
            IPA Extensions
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.Spacing_Modifier_Letters">
            <summary>
            Spacing Modifier Letters
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.Combining_Diacritical_Marks">
            <summary>
            Combining Diacritical Marks
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.Greek_and_Coptic">
            <summary>
            Greek and Coptic
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.Cyrillic">
            <summary>
            Cyrillic
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.Armenian">
            <summary>
            Armenian
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.Hebrew">
            <summary>
            Hebrew
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.Arabic">
            <summary>
            Arabic
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.Devanagari">
            <summary>
            Devanagari
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.Bengali">
            <summary>
            Bengali
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.Gumukhi">
            <summary>
            Gumukhi
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.Gujarati">
            <summary>
            Gujarati
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.Oriya">
            <summary>
            Oriya
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.Tamil">
            <summary>
            Tamil
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.Teluga">
            <summary>
            Teluga
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.Kannada">
            <summary>
            Kanada
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.Malayalam">
            <summary>
            Malayalam
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.Thai">
            <summary>
            Thai
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.Lao">
            <summary>
            Lao
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.Tibetan">
            <summary>
            Tibetan
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.Georgian">
            <summary>
            Georgian
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.Hangul_Jamo">
            <summary>
            Hangul Jamo 4352
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.Latin_Extended_Additional">
            <summary>
            Latin Extended Additional
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.Greek_Extended">
            <summary>
            Greek Extended
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.General_Punctuation">
            <summary>
            General Punctuation
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.Superscripts_and_Subscripts">
            <summary>
            Superscripts and Subscripts
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.Currency_Symbols">
            <summary>
            Currency Symbols
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.Combining_Diacritical_Marks_for_Symbols">
            <summary>
            Combining Diacritical Marks for Symbols
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.Letterlike_Symbols">
            <summary>
            Letterlike Symbols
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.Number_Forms">
            <summary>
            Number Forms
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.Arrows">
            <summary>
            Arrows
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.Mathematical_Operators">
            <summary>
            Mathematical Operators
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.Miscellaneous_Technical">
            <summary>
            Miscellaneous Technical
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.Control_Pictures">
            <summary>
            Control Pictures
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.Optical_Character_Recognition">
            <summary>
            Optical Character Recognition
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.Enclosed_Alphanumerics">
            <summary>
            Enclosed Alphanumerics
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.Box_Drawing">
            <summary>
            Box Drawing
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.Block_Elements">
            <summary>
            Block Elements
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.Geometric_Shapes">
            <summary>
            Geometric Shapes
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.Miscellaneous_Symbols">
            <summary>
            Miscellaneous Symbols
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.Dingbats">
            <summary>
            Dingbats
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.CJK_Symbols_and_Puctuation">
            <summary>
            CJK Symbols and Punctuation
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.Hiragana">
            <summary>
            Hiragana
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.Katakana">
            <summary>
            Katakana
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.Bopomofo">
            <summary>
            Bopomofo
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.Hangul_Compatibility">
            <summary>
            Hangul Compatibility
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.Kanbun">
            <summary>
            Kanbun
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.Enclosed_CJK_Letters_and_Months">
            <summary>
            Enclosed CJK Letters and Months
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.CJK_Compatibility">
            <summary>
            CJK Compatibility
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.CJK_Unified_Ideographs">
            <summary>
            CJK Unified Ideographs
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.Hangul_Syllables">
            <summary>
            Hangul Syllables
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.Private_Use_Area">
            <summary>
            Private Use Area
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.CJK_Compatibility_Ideographs">
            <summary>
            CJK Compatibility Ideographs
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.Alphabetic_Presentation_Forms">
            <summary>
            Alphabetic Presentation Forms
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.Arabic_Presentation_Forms">
            <summary>
            Arabic Presentation Forms
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.Combining_Half_Marks">
            <summary>
            Combining Half Marks
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.CJK_Compatibility_Forms">
            <summary>
            CJK Compatibility Forms
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.Small_Form_Variants">
            <summary>
            Small Form Variants
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.Arabic_Presentation_Forms_B">
            <summary>
            Arabic Presentation Forms-B
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.Halfwidth_and_fullwidth_Forms">
            <summary>
            Halfwidth and fullwidth Forms
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.CharacterSubset.Specials">
            <summary>
            Specials
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.ILineDecoration">
            <summary>
            LineDecoration
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ILineDecoration.Draw(System.Drawing.Graphics,System.Drawing.Drawing2D.GraphicsPath,System.Double)">
            <summary>
            Given the points on this line decoration, this will cycle through and handle
            the drawing as dictated by this decoration.
            </summary>
            <param name="g"></param>
            <param name="path"></param>
            <param name="scaleWidth">The double scale width for controling markers</param>
        </member>
        <member name="P:DotSpatial.Symbology.ILineDecoration.Symbol">
            <summary>
            Gets or sets the decorative symbol
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILineDecoration.FlipFirst">
            <summary>
            Gets or sets a boolean that, if true, flips the first symbol in relation
            to the direction of the line.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILineDecoration.FlipAll">
            <summary>
            Gets or sets a boolean that, if true, reverses all of the symbols
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILineDecoration.RotateWithLine">
            <summary>
            Gets or sets a boolean that, if true, will cause the symbol to
            be rotated according to the direction of the line.  Arrows
            at the ends, for instance, will point along the direction of
            the line, regardless of the direction of the line.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILineDecoration.NumSymbols">
            <summary>
            Gets or sets the number of symbols that should be drawn on each
            line.  (not each segment).
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILineDecoration.Offset">
            <summary>
            Gets or sets the offset distance measured to the left of the line in pixels.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.ILineLayer">
            <summary>
            A layer with drawing characteristics for LineStrings
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILineLayer.Symbolizer">
            <summary>
            Gets or sets the drawing characteristics to use for this layer.
            </summary>
            <exception cref="T:System.InvalidOperationException">Unable to assign a non-point symbolizer to a PointLayer</exception>
        </member>
        <member name="P:DotSpatial.Symbology.ILineLayer.SelectionSymbolizer">
            <summary>
            Gets or sets the LineSymbolizer to use for selected properties.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILineLayer.Symbology">
            <summary>
            Gets or sets the categorical scheme for categorical drawing.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.FeatureLayer">
            <summary>
            This is should not be instantiated because it cannot in itself perform the necessary functions.
            Instead, most of the specified functionality must be implemented in the more specific classes.
            This is also why there is no direct constructor for this class.  You can use the static
            "FromFile" or "FromFeatureLayer" to create FeatureLayers from a file.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.FeatureLayer._categoryExtents">
            <summary>
            The _category extents.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.FeatureLayer._chunkSize">
            <summary>
            The _chunk size.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.FeatureLayer._drawingBounds">
            <summary>
            The _drawing bounds.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.FeatureLayer._drawingFilter">
            <summary>
            The _drawing filter.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.FeatureLayer._drawnStates">
            <summary>
            The _drawn states.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.FeatureLayer._drawnStatesNeeded">
            <summary>
            The _drawn states needed.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.FeatureLayer._editMode">
            <summary>
            The _edit mode.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.FeatureLayer._featureSymbolizer">
            <summary>
            The _feature symbolizer.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.FeatureLayer._labelLayer">
            <summary>
            The _label layer.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.FeatureLayer._name">
            <summary>
            The _name.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.FeatureLayer._scheme">
            <summary>
            The _scheme.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.FeatureLayer._selection">
            <summary>
            The _selection.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.FeatureLayer._selectionFeatureSymbolizer">
            <summary>
            The _selection feature symbolizer.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.FeatureLayer._showLabels">
            <summary>
            The _show labels.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.#ctor(DotSpatial.Data.IFeatureSet)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Symbology.FeatureLayer"/> class.
            Constructor
            </summary>
            <param name="featureSet">
            The data bearing layer to apply new drawing characteristics to
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.#ctor(DotSpatial.Data.IFeatureSet,System.Collections.Generic.ICollection{DotSpatial.Symbology.ILayer})">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Symbology.FeatureLayer"/> class.
            Constructor
            </summary>
            <param name="featureSet">
            The data bearing layer to apply new drawing characteristics to
            </param>
            <param name="container">
            The container this layer should be added to
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.#ctor(DotSpatial.Data.IFeatureSet,System.Collections.Generic.ICollection{DotSpatial.Symbology.ILayer},DotSpatial.Data.IProgressHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Symbology.FeatureLayer"/> class.
            Constructor
            </summary>
            <param name="featureSet">
            The data bearing layer to apply new drawing characteristics to
            </param>
            <param name="container">
            The container this layer should be added to
            </param>
            <param name="progressHandler">
            A progress handler for receiving status messages
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.ZoomToSelectedFeatures">
            <summary>
            Zooms to the envelope of the selected features.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.ZoomToSelectedFeatures(System.Double,System.Double)">
            <summary>
            Zooms to the envelope of the selected features, adding a border of the size specified.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.Configure(DotSpatial.Data.IFeatureSet)">
            <summary>
            The configure.
            </summary>
            <param name="featureSet">
            The feature set.
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.DataSetVerticesInvalidated(System.Object,System.EventArgs)">
            <summary>
            The data set vertices invalidated.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.JoinExcel(System.Object,System.EventArgs)">
            <summary>
            The join excel.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.LabelExtentsClick(System.Object,System.EventArgs)">
            <summary>
            The label extents click.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.SelectedFeaturesChanged(System.Object,System.EventArgs)">
            <summary>
            The selected features changed.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.SelectionToLayerClick(System.Object,System.EventArgs)">
            <summary>
            The selection to layer click.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.SelectionZoomClick(System.Object,System.EventArgs)">
            <summary>
            The selection zoom click.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.ApplyScheme(DotSpatial.Symbology.IFeatureScheme)">
            <summary>
            Applies the specified scheme to this layer, applying the filter constraints in the scheme.
            It is at this time when features are grouped as a one-time operation into their symbol
            categories, so that this doesn't have to happen independently each drawing cycle.
            </summary>
            <param name="inScheme">
            The scheme to be applied to this layer.
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.ClearSelection(DotSpatial.Topology.IEnvelope@)">
            <summary>
            Clears the current selection, reverting the geometries back to their
            normal colors.
            </summary>
            <param name="affectedArea">
            An out value that represents the envelope that was modified by the clear selection instruction
            </param>
            <returns>
            The clear selection.
            </returns>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.DrawSnapShot(System.Drawing.Graphics,DotSpatial.Data.IProj)">
            <summary>
            This method actually draws the image to the snapshot using the graphics object.  This should be
            overridden in sub-classes because the drawing methods are very different.
            </summary>
            <param name="g">
            A graphics object to draw to
            </param>
            <param name="p">
            A projection handling interface designed to translate
             geographic coordinates to screen coordinates
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.ExportSelection(System.String)">
            <summary>
            Saves a featureset with only the selected features to the specified fileName.
            </summary>
            <param name="fileName">
            The string fileName to export features to.
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.GetCategory(System.Int32)">
            <summary>
            Gets the visible characteristic for an individual feature, regardless of whether
            this layer is in edit mode.
            </summary>
            <param name="index">
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.GetCategory(DotSpatial.Data.IFeature)">
            <summary>
            Gets the visible characteristic for a given feature, rather than using the index,
            regardless of whether this layer is in edit mode.
            </summary>
            <param name="feature">
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.GetVisible(System.Int32)">
            <summary>
            Gets the visible characteristic for an individual feature
            </summary>
            <param name="index">
            </param>
            <returns>
            The get visible.
            </returns>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.GetVisible(DotSpatial.Data.IFeature)">
            <summary>
            Gets the visible characteristic for a given feature, rather than using the index.
            </summary>
            <param name="feature">
            </param>
            <returns>
            The get visible.
            </returns>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.InvertSelection(DotSpatial.Topology.IEnvelope,DotSpatial.Topology.IEnvelope,DotSpatial.Symbology.SelectionMode,DotSpatial.Topology.IEnvelope@)">
            <summary>
            This method inverts the selection for the specified region.  Members already a part of the selection
            will be removed from the selection, while members that are not a part of the selection will be added
            to the selection.
            </summary>
            <param name="tolerant">
            The region specifying where features should be added or removed from the
            selection.
            </param>
            <param name="strict">
            With polygon selection it is better not to allow any tolerance since the
             polygons already contain it.
            </param>
            <param name="selectionMode">
            The SelectionModes enumeration that clarifies how the features should
            interact with the region.
            </param>
            <param name="affectedArea">
            The geographic region that will be impacted by the changes.
            </param>
            <returns>
            The invert selection.
            </returns>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.Select(DotSpatial.Topology.IEnvelope,DotSpatial.Topology.IEnvelope,DotSpatial.Symbology.SelectionMode,DotSpatial.Topology.IEnvelope@)">
            <summary>
            Highlights the values in the specified region, and returns the affected area from the selection,
            which should allow for slightly faster drawing in cases where only a small area is changed.
            This will also specify the method by which members should be selected.
            </summary>
            <param name="tolerant">
            The envelope to change.
            </param>
            <param name="strict">
            The envelope to use in cases like polygons where the geometry has no tolerance.
            </param>
            <param name="selectionMode">
            The selection mode that clarifies the rules to use for selection.
            </param>
            <param name="affectedArea">
            The geographic envelope of the region impacted by the selection.
            </param>
            <returns>
            Boolean, true if items were selected.
            </returns>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.Select(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Selects the specified list of features.  If the specified feature is already selected,
            this method will not alter it.  This will only fire a single SelectionExtended event,
            rather than firing it for each member selected.
            </summary>
            <param name="featureIndices">
            A List of integers representing the zero-based feature index values
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.Select(System.Int32)">
            <summary>
            Selects a single feature specified by the integer index in the Features list.
            </summary>
            <param name="featureIndex">
            The zero-based integer index of the feature.
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.Select(DotSpatial.Data.IFeature)">
            <summary>
            Selects the specified feature
            </summary>
            <param name="feature">
            The feature to select
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.SelectAll">
            <summary>
            Cycles through all the features and selects them
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.SelectByAttribute(System.String)">
            <summary>
            Selects all the features in this layer that are associated
            with the specified attribute.  This automatically replaces the existing selection.
            </summary>
            <param name="filterExpression">
            The string expression to
            identify based on attributes the features to select.
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.SelectByAttribute(System.String,DotSpatial.Symbology.ModifySelectionMode)">
            <summary>
            Modifies the features with a new selection based on the modifyMode.
            </summary>
            <param name="filterExpression">
            The string filter expression to use
            </param>
            <param name="modifyMode">
            Determines how the newly chosen features should interact with the existing
             selection
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.SetCategory(System.Int32,DotSpatial.Symbology.IFeatureCategory)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.SetCategory(DotSpatial.Data.IFeature,DotSpatial.Symbology.IFeatureCategory)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.SetShapeSymbolizer(System.Int32,DotSpatial.Symbology.IFeatureSymbolizer)">
            <summary>
            This forces the creation of a category for the specified symbolizer, if it doesn't exist.
            This will add the specified feature to the category.  Be sure that the symbolizer type
            matches the feature type.
            </summary>
            <param name="index">
            The integer index of the shape to control.
            </param>
            <param name="symbolizer">
            The symbolizer to assign.
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.SetVisible(System.Int32,System.Boolean)">
            <summary>
            Sets the visible characteristic for an individual feature regardless of
            whether this layer is in edit mode.
            </summary>
            <param name="index">
            </param>
            <param name="visible">
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.SetVisible(DotSpatial.Data.IFeature,System.Boolean)">
            <summary>
            Sets the visible characteristic for a given feature, rather than using the index
            regardless of whether this layer is in edit mode.
            </summary>
            <param name="feature">
            </param>
            <param name="visible">
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.ShowAttributes">
            <summary>
            Displays a form with the attributes for this shapefile.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.SnapShot(DotSpatial.Data.Extent,System.Int32)">
            <summary>
            Creates a bitmap of the requested size that covers the specified geographic extent using
            the current symbolizer for this layer.  This does not have any drawing optimizations,
            or techniques to speed up performance and should only be used in special cases like
            draping of vector content onto a texture.  It also doesn't worry about selections.
            </summary>
            <param name="geographicExtent">
            The extent to use when computing the snapshot.
            </param>
            <param name="width">
            The integer height of the bitmap.  The height is calculated based on
            the aspect ratio of the specified geographic extent.
            </param>
            <returns>
            A Bitmap object
            </returns>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.UnSelect(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Unselects the specified features.  If any features already unselected, they are ignored.
            This will only fire a single Selection
            </summary>
            <param name="featureIndices">
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.UnSelect(System.Int32)">
            <summary>
            Unselects the specified feature.
            </summary>
            <param name="featureIndex">
            The integer representing the feature to unselect.
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.UnSelect(DotSpatial.Data.IFeature)">
            <summary>
            Removes the specified feature from the selection.
            </summary>
            <param name="feature">
            The feature to unselect.
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.UnSelect(DotSpatial.Topology.IEnvelope,DotSpatial.Topology.IEnvelope,DotSpatial.Symbology.SelectionMode,DotSpatial.Topology.IEnvelope@)">
            <summary>
            Un-highlights or returns the features from the specified region.  The specified selectionMode
            will be used to determine how to choose features.
            </summary>
            <param name="tolerant">
            The geographic envelope in cases like clicking near points where tolerance
             is allowed.
            </param>
            <param name="strict">
            The geographic region when working with absolutes, without a tolerance.
            </param>
            <param name="selectionMode">
            The selection mode that controls how to choose members relative to the
            region.
            </param>
            <param name="affectedArea">
            The geographic envelope that will be visibly impacted by the change.
            </param>
            <returns>
            Boolean, true if members were removed from the selection.
            </returns>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.UnSelectAll">
            <summary>
            Unselects all the features that are currently selected
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.CreateLayerFromSelectedFeatures(DotSpatial.Symbology.IFeatureLayer@)">
            <summary>
            This is testing the idea of using an input parameter type that is marked as out
            instead of a return type.
            </summary>
            <param name="result">
            The result of the creation
            </param>
            <returns>
            Boolean, true if a layer can be created
            </returns>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.OnShowProperties(System.ComponentModel.HandledEventArgs)">
            <summary>
            Occurs when the properties should be shown, and launches a layer dialog.
            </summary>
            <param name="e">
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.OnExcludeScheme(DotSpatial.Symbology.IFeatureScheme)">
            <summary>
            Occurs when setting the symbology to a new scheme and allows removing event handlers
            </summary>
            <param name="scheme">
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.OnHandleFeaturesetEvents(DotSpatial.Data.IFeatureSet)">
            <summary>
            Occurs as a new featureset is being assigned to this layer
            </summary>
            <param name="featureSet">
            The feature Set.
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.OnIgnoreFeaturesetEvents(DotSpatial.Data.IFeatureSet)">
            <summary>
            Unwires event handlers for the specified featureset.
            </summary>
            <param name="featureSet">
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.OnIncludeScheme(DotSpatial.Symbology.IFeatureScheme)">
            <summary>
            Occurs when setting symbology to a new scheme and allows adding event handlers
            </summary>
            <param name="scheme">
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.OnSelectFeatures(System.Object,DotSpatial.Symbology.ExpressionEventArgs)">
            <summary>
            Occurs when selecting features and fires the SelectByAttribute event with
            the expression used as the filter expression
            </summary>
            <param name="sender">
            </param>
            <param name="e">
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.DataSetFeatureAdded(System.Object,DotSpatial.Data.FeatureEventArgs)">
            <summary>
            The data set feature added.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.DataSetFeatureRemoved(System.Object,DotSpatial.Data.FeatureEventArgs)">
            <summary>
            The data set feature removed.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.SchemeItemChanged(System.Object,System.EventArgs)">
            <summary>
            Echoes the ItemChanged event
            </summary>
            <param name="sender">
            </param>
            <param name="e">
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.AssignFastDrawnStates">
            <summary>
            Assigns the fast drawn states
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.RemoveFeaturesAt(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            This method will remove the in ram features from the underlying dataset.
            This will not affect the data source.
            </summary>
            <param name="indexValues">The list or array of integer index values.</param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.RemoveSelectedFeatures">
            <summary>
            This forces the removal of all the selected features.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.RemoveDrawnStates(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            This does more than remove an index key.  This also shifts down the category
            and selection state for every drawn state with a higher index than the
            given index value.  Call this only in index mode, and only if the shape
            is being removed from the FeatureSet.  in practice, this should really
            only be called internally, but is here just in case.
            </summary>
            <param name="indexValues">
            The list or array of index values to remove.
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.CalculateCategoryExtent(DotSpatial.Symbology.IFeatureCategory)">
            <summary>
            This calculates the extent for the category and caches it in the extents collection
            </summary>
            <param name="category">
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.OnApplyScheme(DotSpatial.Symbology.IFeatureScheme)">
            <summary>
            This method cycles through all the Categories in the scheme and creates a new
            category.
            </summary>
            <param name="scheme">
            The scheme to apply
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.OnCopy(DotSpatial.Symbology.Descriptor)">
            <summary>
            Occurs during a copy operation and handles removing surplus event handlers
            </summary>
            <param name="copy">
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.OnCreateLabels">
            <summary>
            A default method to generate a label layer.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.OnExportData">
            <summary>
            Handles the situation for exporting the layer as a new source.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.OnLabelSetup(System.ComponentModel.HandledEventArgs)">
            <summary>
            Occurs before the label setup dialog is shown.  If handled is set to true,
            then the dialog will not be shown.
            </summary>
            <param name="e">
            A HandledEventArgs parameter
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.OnSchemeApplied">
            <summary>
            This fires the scheme applied event after the scheme has been altered
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.OnSnapShotTaken(System.Drawing.Bitmap)">
            <summary>
            Fires the SnapShotTaken event.  This can be overridden in order to modify the bitmap returned etc.
            </summary>
            <param name="e">
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.OnViewAttributes(System.ComponentModel.HandledEventArgs)">
            <summary>
            Occurs before attributes are about to be viewed.  Overriding this
            allows that to be handled, and if e.Handled is true, this class
            won't show the attributes.
            </summary>
            <param name="e">
            A HandledEventArgs
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.DistinctFieldsInExpression(System.String)">
            <summary>
            The distinct fields in expression.
            </summary>
            <param name="expression">
            The expression.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.LabelSetupClick(System.Object,System.EventArgs)">
            <summary>
            The label setup click.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayer.Dispose(System.Boolean)">
            <summary>
            Disposes memory objects
            </summary>
            <param name="disposeManagedResources">
            </param>
        </member>
        <member name="E:DotSpatial.Symbology.FeatureLayer.SchemeApplied">
            <summary>
            Occurs after a new symbolic scheme has been applied to the layer.
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.FeatureLayer.SnapShotTaken">
            <summary>
            Occurs after a snapshot is taken, and contains an event argument with the bitmap
            to be displayed.
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.FeatureLayer.ViewAttributes">
            <summary>
            Occurs before the attribute Table is displayed, also allowing this event to be handled.
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.FeatureLayer.LabelSetup">
            <summary>
            Occurs before the label setup dialog is displayed, allowing the event to be handled.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureLayer.DrawnStatesNeeded">
            <summary>
            Gets or sets the Boolean flag that controls whether the DrawnStates are needed.  If nothing is selected,
            and there is only one category, and there is no filter expression on that category, then this should be false.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureLayer.CategoryExtents">
            <summary>
            Gets the dictionary of extents that is calculated from the categories.  This is calculated one time,
            when the scheme is applied, and then the cached value is used to help drawing symbols that
            are modified by the categorical boundaries.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureLayer.DrawingBounds">
            <summary>
            Gets or sets a rectangle that gives the maximal extent for 2D GDI+ drawing in pixels.
            Coordinates outside this range will cause overflow exceptions to occur.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureLayer.DrawingFilter">
            <summary>
            Gets or sets the drawing filter that can be used to narrow the list of features and then
            cycle through those features.  Using a for-each expression on the filter will automatically
            apply the constraints specified by the characteristics.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureLayer.Name">
            <summary>
             Gets or sets a string name for this layer.  This is not necessarily the same as the legend text.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureLayer.ChunkSize">
            <summary>
            Gets or sets the chunk size on the drawing filter.  This should be controlled
            by drawing layers.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureLayer.DataSet">
            <summary>
            Gets or sets the underlying dataset for this layer, specifically as an IFeatureSet
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureLayer.DrawnStates">
            <summary>
            Controls the drawn states according to a feature index.  This is used if the EditMode is
            false.  When EditMode is true, then drawn states are tied to the features instead.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureLayer.EditMode">
            <summary>
            Gets or sets a boolean.  If edit mode is true, feature index is ignored, and features
            are assumed to be entirely loaded into ram.  If edit mode is false, then index
            is used instead and features are not assumed to be loaded into ram.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureLayer.Extent">
            <summary>
            Gets the envelope of the DataSet supporting this FeatureLayer
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureLayer.LabelLayer">
            <summary>
            Gets or sets the label layer
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureLayer.LegendItems">
            <summary>
            Restructures the LegendItems based on whether or not the symbology makes use
            of schemes.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureLayer.Selection">
            <summary>
            Gets a Selection class that is allows the user to cycle through all the selected features with
            a foreach method.  This can be null.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureLayer.SelectionSymbolizer">
            <summary>
            Gets or sets the shared characteristics to use with the selected features.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureLayer.ShowLabels">
            <summary>
            Gets or sets whether labels should be drawn.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureLayer.Symbolizer">
            <summary>
            Gets or sets and interface for the shared symbol characteristics between point, line and polygon features
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureLayer.Symbology">
            <summary>
            Gets the current feature scheme, but to change it ApplyScheme should be called, so that
            feature categories are updated as well.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.FeatureCategoryCollection">
            <summary>
            FeatureSchemeCategoryCollection
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureCategoryCollection.#ctor">
            <summary>
            Creates a new instance of the FeatureSchemeCategoryCollection
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureCategoryCollection.OnInclude(DotSpatial.Symbology.IFeatureCategory)">
            <summary>
            Occurs when including legend items
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureCategoryCollection.OnExclude(DotSpatial.Symbology.IFeatureCategory)">
            <summary>
            Occurs when excluding legend items
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureCategoryCollection.Scheme">
            <summary>
            Optionally allows the scheme to identify itself for future reference.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.SymbolMode">
            <summary>
            This describes the three permitted states for legend items.
            Items can have a checkbox or a symbol, but not both.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.SymbolMode.Checkbox">
            <summary>
            Display a checkbox next to the legend item
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.SymbolMode.GroupSymbol">
            <summary>
            Draws a symbol, but also allows collapsing.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.SymbolMode.Symbol">
            <summary>
            Display a symbol next to the legend item
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.SymbolMode.None">
            <summary>
            Display only legend text
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.Size2D">
            <summary>
            Size2D
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.Size2D.Height">
            <summary>
            Gets or sets the height
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.Size2D.Width">
            <summary>
            Gets or sets the width
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.Size2D.#ctor">
            <summary>
            Creates a new instance of Size2D
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.Size2D.#ctor(System.Double,System.Double)">
            <summary>
            Creates a new instance of a Size2D
            </summary>
            <param name="width">The double width</param>
            <param name="height">The double height</param>
        </member>
        <member name="M:DotSpatial.Symbology.Size2D.Equals(System.Object)">
            <summary>
            Tests for equality against an object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.Size2D.Equals(DotSpatial.Symbology.Size2D)">
            <summary>
            Tests for equality against another size.
            </summary>
            <param name="size">the size to compare this size to</param>
            <returns>boolean, true if the height and width are the same in each case.</returns>
        </member>
        <member name="M:DotSpatial.Symbology.Size2D.ToString">
            <summary>
            Gets the string equivalent of this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.Size2D.op_Equality(DotSpatial.Symbology.Size2D,DotSpatial.Symbology.Size2D)">
            <summary>
            Determines if the height and width are both equal
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.Size2D.op_Inequality(DotSpatial.Symbology.Size2D,DotSpatial.Symbology.Size2D)">
            <summary>
            Determiens if the height and width are not equal
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.Size2D.GetHashCode">
            <summary>
            Returns the basic hash code for the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.Size2D.OnRandomize(System.Random)">
            <summary>
            Generates random doubles for the size from 1 to 100 for both the width and height
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.RasterLayer">
            <summary>
            A raster layer describes using a single raster, and the primary application will be using this as a texture.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.RasterLayer.#ctor(System.String,DotSpatial.Symbology.IRasterSymbolizer)">
            <summary>
            Opens the specified fileName using the layer manager.
            </summary>
            <param name="fileName"></param>
            <param name="symbolizer"></param>
        </member>
        <member name="M:DotSpatial.Symbology.RasterLayer.#ctor(System.String,DotSpatial.Data.IProgressHandler)">
            <summary>
            Opens the specified fileName and automatically creates a raster that can be used by this raster layer.
            </summary>
            <param name="fileName">The string fileName to use in order to open the file</param>
            <param name="inProgressHandler">The progress handler to show progress messages</param>
        </member>
        <member name="M:DotSpatial.Symbology.RasterLayer.#ctor(DotSpatial.Data.IRaster)">
            <summary>
            Creates a new raster layer using the progress handler defined on the DefaultLayerManager
            </summary>
            <param name="raster">The raster to create this layer for</param>
        </member>
        <member name="M:DotSpatial.Symbology.RasterLayer.#ctor(DotSpatial.Data.IRaster,DotSpatial.Data.IProgressHandler)">
            <summary>
            Creates a new instance of RasterLayer
            </summary>
            <param name="raster">The Raster</param>
            <param name="inProgressHandler">The Progress handler for any status updates</param>
        </member>
        <member name="M:DotSpatial.Symbology.RasterLayer.WriteBitmap">
            <summary>
            This only updates the bitmap representation of the raster.  It does not write to a file unless
            the file is too large to fit in memory, in which case it will update the pyramid image.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.RasterLayer.WriteBitmap(DotSpatial.Data.IProgressHandler)">
            <summary>
            This only updates the bitmap representation of this raster.  This can be overridden, but currently
            uses the default implementation.
            </summary>
            <param name="progressHandler">An implementation of IProgressHandler to receive status messages</param>
        </member>
        <member name="M:DotSpatial.Symbology.RasterLayer.ExportBitmap(System.String,DotSpatial.Data.ImageBandType)">
            <summary>
             Creates a bmp texture and saves it to the specified fileName.
            </summary>
            <param name="fileName">The string fileName to write to</param>
            <param name="bandType">The color band type.</param>
        </member>
        <member name="M:DotSpatial.Symbology.RasterLayer.ExportBitmap(System.String,DotSpatial.Data.IProgressHandler,DotSpatial.Data.ImageBandType)">
            <summary>
            Creates a new filename and saves the content from the current BitmapGetter to the
            file format.  This relies on the DataManager and will only be successful for
            formats supported by the write format possibility.  This will not update this raster
            </summary>
            <param name="fileName">The string fileName to write to</param>
            <param name="progressHandler">The progress handler for creating a new bitmap.</param>
            <param name="bandType">The band type ot use.</param>
        </member>
        <member name="M:DotSpatial.Symbology.RasterLayer.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:DotSpatial.Symbology.RasterLayer.CreatePyramidImage(System.String,DotSpatial.Data.IProgressHandler)">
            <summary>
            Render the full raster block by block, and then save the values to the pyramid raster.
            This will probably be nasty and time consuming, but what can you do.
            </summary>
            <param name="pyrFile"></param>
            <param name="progressHandler"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.RasterLayer.DefaultWriteBitmap(DotSpatial.Data.IProgressHandler)">
            <summary>
            This does not have to be used to work, but provides a default implementation for writing bitmap,
            and will be used by the MapRasterLayer class during file creation.
            </summary>
            <param name="progressHandler"></param>
        </member>
        <member name="M:DotSpatial.Symbology.RasterLayer.OnExportData">
            <summary>
            Handles the situation for exporting the layer as a new source.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.RasterLayer.OnShowProperties(System.ComponentModel.HandledEventArgs)">
            <summary>
            Occurs when this member should raise the shared event to show the property dialog for this raster layer.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DotSpatial.Symbology.RasterLayer.Reproject(DotSpatial.Projections.ProjectionInfo)">
            <summary>
            Reprojects the dataset for this layer.
            </summary>
            <param name="targetProjection">The target projection to use.</param>
        </member>
        <member name="P:DotSpatial.Symbology.RasterLayer.Bounds">
            <summary>
            Gets or sets the boundaries of the raster.
            </summary>
            <remarks>
            [Editor(typeof(Forms.PropertyGridEditor), typeof(UITypeEditor))]
            [TypeConverter(typeof(Forms.GeneralTypeConverter))]
            </remarks>
        </member>
        <member name="P:DotSpatial.Symbology.RasterLayer.BitmapGetter">
            <summary>
            This is what the raster layer uses to retrieve a bitmap representing the specified
            extent.  This could later be redesigned to generate the bitmap on the fly, but I think
            that that would be slow, so caching is probably better.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.RasterLayer.CellHeight">
            <summary>
            Gets the geographic height of the cells for this raster (North-South)
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.RasterLayer.CellWidth">
            <summary>
            Gets the geographic width of the cells for this raster (East-West)
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.RasterLayer.Checked">
            <summary>
            Gets or sets whether this should appear as checked in the legend.  This is also how the
            layer will
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.RasterLayer.DataType">
            <summary>
            Gets the data type of the values in this raster.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.RasterLayer.East">
            <summary>
            Gets the eastern boundary of this raster.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.RasterLayer.ElevationFactor">
            <summary>
            This is a conversion factor that is required in order to convert the elevation units into the same units as the geospatial projection for the latitude and logitude values of the grid.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.RasterLayer.Extent">
            <summary>
            Obtains an envelope
            </summary>
            <returns></returns>
        </member>
        <member name="P:DotSpatial.Symbology.RasterLayer.Extrusion">
            <summary>
            Gets the exaggeration beyond normal elevation values.  A value of 1 is normal elevation,
             a value of 0 would be flat,  while a value of 2 would be twice the normal elevation.
            This applies to the three-dimensional rendering and is not related to the shaded relief pattern
            created by the texture.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.RasterLayer.Filename">
            <summary>
            Gets the fileName where this raster is saved.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.RasterLayer.IsVisible">
            <summary>
            If this is false, then the drawing function will not render anything.
            Warning!  This will also prevent any execution of calculations that take place
            as part of the drawing methods and will also abort the drawing methods of any
            sub-members to this IRenderable.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.RasterLayer.LegendItems">
            <summary>
            Gets or sets the complete list of legend items contained within this legend item
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.RasterLayer.LegendText">
            <summary>
            The text that will appear in the legend
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.RasterLayer.Maximum">
            <summary>
            Gets the maximum value of this raster.  If this is an elevation raster, this is also the top.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.RasterLayer.Minimum">
            <summary>
            Gets the minimum value of this raster.  If this is an elevation raster, this is also the bottom.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.RasterLayer.NoDataValue">
            <summary>
            Gets the value that is used when no actual data exists for the specified location.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.RasterLayer.North">
            <summary>
            Gets the northern boundary of this raster.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.RasterLayer.NumBands">
            <summary>
            Gets the number of bands in this raster.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.RasterLayer.NumColumns">
            <summary>
            Gets the number of columns in this raster.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.RasterLayer.NumRows">
            <summary>
            Gets the number of rows in this raster.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.RasterLayer.DataSet">
            <summary>
            Gets or sets the underlying dataset
            </summary>
            <remarks>
            [TypeConverter(typeof(Forms.GeneralTypeConverter))]
            [Editor(typeof(Forms.PropertyGridEditor), typeof(UITypeEditor))]
            </remarks>
        </member>
        <member name="P:DotSpatial.Symbology.RasterLayer.Symbolizer">
            <summary>
            Gets or sets the collection of symbolzier properties to use for this raster.
            [Editor(typeof(Forms.RasterColorSchemeEditor), typeof(UITypeEditor))]
            [TypeConverter(typeof(Forms.GeneralTypeConverter))]
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.RasterLayer.South">
            <summary>
            Gets the southern boundary of this raster.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.RasterLayer.West">
            <summary>
            Gets the western boundary of this raster.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.SymbologyImages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.SymbologyImages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.SymbologyImages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.DesktopRasterExt">
            <summary>
            A new model, now that we support 3.5 framework and extension methods that are essentially
            derived characteristics away from the IRaster interface, essentially reducing it
            to the simplest interface possible for future implementers, while extending the most
            easy-to-find functionality to the users.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.DesktopRasterExt.CreateHillShade(DotSpatial.Data.IRaster,DotSpatial.Symbology.IShadedRelief)">
            <summary>
            Create Hillshade of values ranging from 0 to 1, or -1 for no-data regions.
            This uses the progress handler defined on this raster.
            </summary>
            <param name="raster">The raster to create hillshade information for</param>
            <param name="shadedRelief">An implementation of IShadedRelief describing how the hillshade should be created.</param>
        </member>
        <member name="M:DotSpatial.Symbology.DesktopRasterExt.CreateHillShade(DotSpatial.Data.IRaster,DotSpatial.Symbology.IShadedRelief,DotSpatial.Data.IProgressHandler)">
            <summary>
            Create Hillshade of values ranging from 0 to 1, or -1 for no-data regions.
            This should be a little faster since we are accessing the Data field directly instead of working
            through a value parameter.
            </summary>
            <param name="raster">The raster to create the hillshade from.</param>
            <param name="shadedRelief">An implementation of IShadedRelief describing how the hillshade should be created.</param>
            <param name="progressHandler">An implementation of IProgressHandler for progress messages</param>
        </member>
        <member name="M:DotSpatial.Symbology.DesktopRasterExt.CreateHillShadeT``1(DotSpatial.Data.Raster{``0},DotSpatial.Symbology.IShadedRelief,DotSpatial.Data.ProgressMeter)">
            <summary>
            Create Hillshade of values ranging from 0 to 1, or -1 for no-data regions.
            This should be a little faster since we are accessing the Data field directly instead of working
            through a value parameter.
            </summary>
            <param name="raster">The raster to create the hillshade from.</param>
            <param name="shadedRelief">An implementation of IShadedRelief describing how the hillshade should be created.</param>
            <param name="progressMeter">An implementation of IProgressHandler for progress messages</param>
        </member>
        <member name="M:DotSpatial.Symbology.DesktopRasterExt.DrawToBitmap(DotSpatial.Data.IRaster,DotSpatial.Symbology.IRasterSymbolizer,System.Drawing.Bitmap)">
            <summary>
            Creates a bitmap from this raster using the specified rasterSymbolizer
            </summary>
            <param name="raster">The raster to draw to the bitmap based on the layout specified in the rasterSymbolizer</param>
            <param name="rasterSymbolizer">The raster symbolizer to use for assigning colors</param>
            <param name="bitmap">This must be an Format32bbpArgb bitmap that has already been saved to a file so that it exists.</param>
            <exception cref="T:System.ArgumentNullException">rasterSymbolizer cannot be null</exception>
        </member>
        <member name="M:DotSpatial.Symbology.DesktopRasterExt.DrawToBitmap(DotSpatial.Data.IRaster,DotSpatial.Symbology.IRasterSymbolizer,System.Drawing.Bitmap,DotSpatial.Data.IProgressHandler)">
            <summary>
            Creates a bitmap from this raster using the specified rasterSymbolizer
            </summary>
            <param name="raster">The raster to draw to a bitmap</param>
            <param name="rasterSymbolizer">The raster symbolizer to use for assigning colors</param>
            <param name="bitmap">This must be an Format32bbpArgb bitmap that has already been saved to a file so that it exists.</param>
            <param name="progressHandler">The progress handler to use.</param>
            <exception cref="T:System.ArgumentNullException">rasterSymbolizer cannot be null</exception>
        </member>
        <member name="M:DotSpatial.Symbology.DesktopRasterExt.DrawToBitmap(DotSpatial.Data.IRaster,DotSpatial.Symbology.IRasterSymbolizer,System.Byte[],System.Int32,DotSpatial.Data.ProgressMeter)">
            <summary>
            Creates a bitmap from this raster using the specified rasterSymbolizer
            </summary>
            <param name="raster">The raster to draw to a bitmap</param>
            <param name="rasterSymbolizer">The raster symbolizer to use for assigning colors</param>
            <param name="rgbData">Byte values representing the ARGB image bytes</param>
            <param name="stride">The stride</param>
            <param name="pm">The progress meter to use.</param>
            <exception cref="T:System.ArgumentNullException">rasterSymbolizer cannot be null</exception>
        </member>
        <member name="M:DotSpatial.Symbology.DesktopRasterExt.DrawToBitmapOld(DotSpatial.Data.IRaster,DotSpatial.Symbology.IRasterSymbolizer,System.Byte[],System.Int32,DotSpatial.Data.ProgressMeter)">
            <summary>
            Creates a bitmap from this raster using the specified rasterSymbolizer
            </summary>
            <param name="raster">The raster to draw to a bitmap</param>
            <param name="rasterSymbolizer">The raster symbolizer to use for assigning colors</param>
            <param name="rgbData">Byte values representing the ARGB image bytes</param>
            <param name="stride">The stride</param>
            <param name="pm">The progress meter to use.</param>
            <exception cref="T:System.ArgumentNullException">rasterSymbolizer cannot be null</exception>
        </member>
        <member name="M:DotSpatial.Symbology.DesktopRasterExt.ByteRange(System.Int32)">
            <summary>
            Returns an integer that ranges from 0 to 255.  If value is larger than 255, the value will be equal to 255.
            If the value is smaller than 255, it will be equal to 255.
            </summary>
            <param name="value">A Double value to convert.</param>
            <returns>An integer ranging from 0 to 255</returns>
        </member>
        <member name="M:DotSpatial.Symbology.DesktopRasterExt.DrawToBitmapT``1(DotSpatial.Data.Raster{``0},DotSpatial.Symbology.IRasterSymbolizer,System.Byte[],System.Int32,DotSpatial.Data.ProgressMeter)">
            <summary>
            Creates a bitmap from this raster using the specified rasterSymbolizer
            </summary>
            <param name="raster">The raster to draw to a bitmap</param>
            <param name="rasterSymbolizer">The raster symbolizer to use for assigning colors</param>
            <param name="rgbData">Byte values representing the ARGB image bytes</param>
            <param name="stride">The stride</param>
            <param name="pm">The progress meter to use.</param>
            <exception cref="T:System.ArgumentNullException">rasterSymbolizer cannot be null</exception>
        </member>
        <member name="M:DotSpatial.Symbology.DesktopRasterExt.PaintColorSchemeToBitmap(DotSpatial.Data.IRaster,DotSpatial.Symbology.IRasterSymbolizer,System.Drawing.Bitmap,DotSpatial.Data.IProgressHandler)">
            <summary>
            Creates a bitmap using only the colorscheme, even if a hillshade was specified.
            </summary>
            <param name="raster">The Raster containing values that need to be drawn to the bitmap as a color scheme.</param>
            <param name="rasterSymbolizer">The raster symbolizer to use.</param>
            <param name="bitmap">The bitmap to edit.  Ensure that this has been created and saved at least once.</param>
            <param name="progressHandler">An IProgressHandler implementation to receive progress updates.</param>
            <exception cref="T:System.ArgumentNullException">rasterSymbolizer cannot be null.</exception>
        </member>
        <member name="M:DotSpatial.Symbology.DesktopRasterExt.PaintColorSchemeToBitmapOld(DotSpatial.Data.IRaster,DotSpatial.Symbology.IRasterSymbolizer,System.Drawing.Bitmap,DotSpatial.Data.IProgressHandler)">
            <summary>
            Creates a bitmap using only the colorscheme, even if a hillshade was specified.
            </summary>
            <param name="raster">The Raster containing values that need to be drawn to the bitmap as a color scheme.</param>
            <param name="rasterSymbolizer">The raster symbolizer to use.</param>
            <param name="bitmap">The bitmap to edit.  Ensure that this has been created and saved at least once.</param>
            <param name="progressHandler">An IProgressHandler implementation to receive progress updates.</param>
            <exception cref="T:System.ArgumentNullException">rasterSymbolizer cannot be null.</exception>
        </member>
        <member name="M:DotSpatial.Symbology.DesktopRasterExt.PaintColorSchemeToBitmapT``1(DotSpatial.Data.Raster{``0},DotSpatial.Symbology.IRasterSymbolizer,System.Drawing.Bitmap,DotSpatial.Data.IProgressHandler)">
            <summary>
            Creates a bitmap using only the colorscheme, even if a hillshade was specified.
            </summary>
            <param name="raster">The Raster containing values that need to be drawn to the bitmap as a color scheme.</param>
            <param name="rasterSymbolizer">The raster symbolizer to use.</param>
            <param name="bitmap">The bitmap to edit.  Ensure that this has been created and saved at least once.</param>
            <param name="progressHandler">An IProgressHandler implementation to receive progress updates.</param>
            <exception cref="T:System.ArgumentNullException">rasterSymbolizer cannot be null.</exception>
        </member>
        <member name="M:DotSpatial.Symbology.DesktopRasterExt.GetUniqueValues(DotSpatial.Data.IRaster)">
            <summary>
            Obtains a list of unique values from the grid.
            </summary>
            <param name="raster">The IRaster to obtain unique values for</param>
            <returns>A list of double values, where no value is repeated.</returns>
        </member>
        <member name="M:DotSpatial.Symbology.DesktopRasterExt.GetUniqueValues(DotSpatial.Data.IRaster,System.Int32,System.Boolean@)">
            <summary>
            Obtains a list of unique values.  If there are more than maxCount values, the process stops and overMaxCount is set to true.
            </summary>
            <param name="raster">the raster to obtain the unique values from.</param>
            <param name="maxCount">An integer specifying the maximum number of values to add to the list of unique values</param>
            <param name="overMaxCount">A boolean that will be true if the process was halted prematurely.</param>
            <returns>A list of doubles representing the independant values.</returns>
        </member>
        <member name="M:DotSpatial.Symbology.DesktopRasterExt.GetRandomValues(DotSpatial.Data.IRaster,System.Int32)">
            <summary>
            This will sample randomly from the raster, preventing duplicates.
            If the sampleSize is larger than this raster, this returns all of the
            values from the raster.  If a "Sample" has been prefetched and stored
            in the Sample array, then this will return that.
            </summary>
            <param name="raster"></param>
            <param name="sampleSize"></param>
            <returns></returns>
        </member>
        <member name="T:DotSpatial.Symbology.PatternType">
            <summary>
            PatternTypes
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.PatternType.Gradient">
            <summary>
            A pattern that gradually changes from one color to another
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.PatternType.Line">
            <summary>
            A pattern comprised of evenly spaced lines
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.PatternType.Marker">
            <summary>
            A pattern comprised of point symbolizers
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.PatternType.Picture">
            <summary>
            A pattern comprised of a tiled texture
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.PatternType.Simple">
            <summary>
            A pattern comprised strictly of a fill color.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.IPointScheme">
            <summary>
            IPointScheme
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IPointScheme.Categories">
            <summary>
            Gets the list of scheme categories belonging to this scheme.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.ShadedRelief">
            <summary>
            ShadedRelief
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ShadedRelief.#ctor">
            <summary>
            Creates a new instance of the ShadedRelief preset for elevation in feet and coordinates in decimal degrees
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ShadedRelief.#ctor(DotSpatial.Symbology.ElevationScenario)">
            <summary>
            Creates a new instance of ShadedRelief based on some more common
            elevation to goegraphic coordinate sysetem scenarios
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ShadedRelief.GetLightDirection">
            <summary>
            Returns a normalized vector in 3 dimensions representing the angle
            of the light source.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.ShadedRelief.OnShadingChanged">
            <summary>
            Fires the ShadingChanged event
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.ShadedRelief.ShadingChanged">
            <summary>
            Occurs when the shading for this object has been altered.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ShadedRelief.AmbientIntensity">
            <summary>
            Gets or sets a float specifying how strong the ambient directional light is.  This should probably be about 1.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ShadedRelief.ElevationFactor">
            <summary>
            This is kept separate from extrusion to reduce confusion.  This is a conversion factor that will
            convert the units of elevation into the same units that the latitude and longitude are stored in.
            To convert feet to decimal degrees is around a factor of .00000274
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ShadedRelief.Extrusion">
            <summary>
            A float value expression that modifies the "height" of the apparent shaded relief.  A value
            of 1 should show the mountains at their true elevations, presuming the ElevationFactor is
            correct.  A value of 0 would be totally flat, while 2 would be twice the value.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ShadedRelief.IsUsed">
            <summary>
            Gets or sets a boolean value indicating whether the ShadedRelief should be used or not.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ShadedRelief.ZenithAngle">
            <summary>
            Gets or sets the zenith angle for the light direction in degrees from 0 (at the horizon) to 90 (straight up).
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ShadedRelief.LightDirection">
            <summary>
            Gets or sets a double that represents the light direction in degrees clockwise from North
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ShadedRelief.LightIntensity">
            <summary>
            This specifies a float that should probably be around 1, which controls the light intensity.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ShadedRelief.HasChanged">
            <summary>
            Gets whether or not the values have been changed on this ShadedRelief more recently than
            a HillShade map has been calculated from it.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.ElevationScenario">
            <summary>
            Some of the more common relationships between elevation and geographic coordinates
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.ElevationScenario.ElevationCentiMeters_ProjectionDegrees">
            <summary>
            The elevation values are in centimeters, but the geographic projection uses decimal degrees
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.ElevationScenario.ElevationCentiMeters_ProjectionMeters">
            <summary>
            The elevation values are in centimeters, but the geographic projection uses Meters
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.ElevationScenario.ElevationCentiMeters_ProjectionFeet">
            <summary>
            The elevation values are in centimeters, but the geographic projection uses Feet
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.ElevationScenario.ElevationFeet_ProjectionDegrees">
            <summary>
            The elevation values are in feet, but the geographic projection uses decimal degrees
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.ElevationScenario.ElevationFeet_ProjectionMeters">
            <summary>
            The elevation values are in feet, but the geographic projection uses meters
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.ElevationScenario.ElevationFeet_ProjectionFeet">
            <summary>
            The elevation values are in feet, but the geographic projection uses feet
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.ElevationScenario.ElevationMeters_ProjectionDegrees">
            <summary>
            The elevation values are in meters, but the geographic projection uses decimal degrees
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.ElevationScenario.ElevationMeters_ProjectionMeters">
            <summary>
            The elevation values are in meters, but the geographic projection uses meters
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.ElevationScenario.ElevationMeters_ProjectionFeet">
            <summary>
            The elevation values are in meters, but the geographic projection uses feet
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.SymbologyMenuItem">
            <summary>
            This class simply stores enough information for the appropriate menu item to be
            generated.  It is not the Windows Forms MenuItem.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.SymbologyMenuItem.#ctor(System.String,System.Drawing.Image,System.EventHandler)">
            <summary>
            Creates a new instance of the menu item
            </summary>
            <param name="name">The name or text to appear for this item</param>
            <param name="image">The icon to draw for this menu item</param>
            <param name="clickHandler">The click event handler</param>
        </member>
        <member name="M:DotSpatial.Symbology.SymbologyMenuItem.#ctor(System.String,System.Drawing.Icon,System.EventHandler)">
            <summary>
            Creates a new instance of the menu item
            </summary>
            <param name="name">The name or text to appear for this item</param>
            <param name="icon">The icon to draw for this menu item</param>
            <param name="clickHandler">The click event handler</param>
        </member>
        <member name="M:DotSpatial.Symbology.SymbologyMenuItem.#ctor(System.String,System.EventHandler)">
            <summary>
            Creates a new instance of the menu item
            </summary>
            <param name="name">The name or text to appear for this item</param>
            <param name="clickHandler">The click event handler</param>
        </member>
        <member name="M:DotSpatial.Symbology.SymbologyMenuItem.#ctor(System.String)">
            <summary>
            Creates a new instance of the menu item
            </summary>
            <param name="name">The name or text to appear for this item</param>
        </member>
        <member name="P:DotSpatial.Symbology.SymbologyMenuItem.Name">
            <summary>
            Gets or sets the name for this menu item
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.SymbologyMenuItem.Icon">
            <summary>
            Gets or sets the icon for this menu item
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.SymbologyMenuItem.Image">
            <summary>
            Gets or sets the image for this menu item
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.SymbologyMenuItem.MenuItems">
            <summary>
            Gets or sets the set of sub-menu items.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.SymbologyMenuItem.ClickHandler">
            <summary>
            The handler for the click event.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.ImageProjection">
            <summary>
            geoGraphics
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ImageProjection.#ctor(DotSpatial.Data.Extent,System.Drawing.Rectangle)">
            <summary>
            Creates a new instance of the ImageGraphics class for assisting with drawing.
            </summary>
            <param name="inExtent"></param>
            <param name="inDestRectangle"></param>
        </member>
        <member name="P:DotSpatial.Symbology.ImageProjection.ImageRectangle">
            <summary>
            The destination rectangle on the bitmap where drawing should occur.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ImageProjection.GeographicExtents">
            <summary>
            The geographic extents where drawing will take place.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.FieldInfoEm">
            <summary>
            FieldInfo
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.FieldInfoEm.GetFirst(System.Collections.Generic.IEnumerable{System.Reflection.FieldInfo},System.String)">
             <summary>
            
             </summary>
             <param name="self"></param>
             <param name="name"></param>
             <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.FieldInfoEm.Contains(System.Collections.Generic.IEnumerable{System.Reflection.FieldInfo},System.String)">
            <summary>
            Determines whether there is a member with the specified name
            </summary>
            <param name="self"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:DotSpatial.Symbology.ExtentExt">
            <summary>
            Extension methods for extent that are related to System.Drawing, and not data.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ExtentExt.Reproportion(DotSpatial.Data.Extent,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            This method assumes that there was a direct correlation between this envelope and the original
            rectangle.  This reproportions this window to match the specified newRectangle.
            </summary>
            <param name="self">The original envelope</param>
            <param name="original">The original rectangle </param>
            <param name="newRectangle">The new rectangle</param>
            <returns>A new IEnvelope </returns>
        </member>
        <member name="T:DotSpatial.Symbology.PolygonSymbolizerEventArgs">
            <summary>
            PolygonSymbolizerEventArgs
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonSymbolizerEventArgs.#ctor(DotSpatial.Symbology.IPolygonSymbolizer)">
            <summary>
            Creates a new instance of PolygonSymbolizerEventArgs
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.PolygonSymbolizerEventArgs.Symbolizer">
            <summary>
            Gets or sets the Symbolizer, casting it to an IPolygonSymbolizer
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.PointLayer">
            <summary>
            This is a specialized FeatureLayer that specifically handles point drawing
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.IPointLayer">
            <summary>
            This is a specialized FeatureLayer that specifically handles point drawing
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IPointLayer.Symbolizer">
            <summary>
            Gets or sets the FeatureSymbolizerOld determining the shared properties.  This is actually still the PointSymbolizerOld
            and should not be used directly on Polygons or Lines.
            </summary>
            <exception cref="T:System.InvalidOperationException">Unable to assign a non-point symbolizer to a PointLayer</exception>
        </member>
        <member name="P:DotSpatial.Symbology.IPointLayer.SelectionSymbolizer">
            <summary>
            Gets or sets the pointSymbolizer characteristics to use for the selected features.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IPointLayer.Symbology">
            <summary>
            Gets the currently applied scheme.  Because setting the scheme requires a processor intensive
            method, we use the ApplyScheme method for assigning a new scheme.  This allows access
            to editing the members of an existing scheme directly, however.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.PointLayer.#ctor">
            <summary>
            This creates a new layer with an empty dataset configured to the point feature type.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.PointLayer.#ctor(DotSpatial.Data.IFeatureSet)">
            <summary>
            Creates a new instance of a PointLayer without sending any status messages
            </summary>
            <param name="inFeatureSet">The IFeatureLayer of data values to turn into a graphical PointLayer</param>
            <exception cref="T:DotSpatial.Symbology.PointFeatureTypeException">Thrown if the featureSet FeatureType is not point or multi-point</exception>
        </member>
        <member name="M:DotSpatial.Symbology.PointLayer.#ctor(DotSpatial.Data.IFeatureSet,DotSpatial.Data.IProgressHandler)">
            <summary>
            Creates a new instance of a PointLayer for storing and drawing points
            </summary>
            <param name="inFeatureSet">Any implentation of an IFeatureLayer</param>
            <param name="progressHandler">A valid implementation of the IProgressHandler interface.</param>
            <exception cref="T:DotSpatial.Symbology.PointFeatureTypeException">Thrown if the featureSet FeatureType is not point or multi-point</exception>
        </member>
        <member name="M:DotSpatial.Symbology.PointLayer.#ctor(DotSpatial.Data.IFeatureSet,System.Collections.Generic.ICollection{DotSpatial.Symbology.ILayer},DotSpatial.Data.IProgressHandler)">
            <summary>
            Creates a new instance of a PointLayer for storing and drawing points.
            </summary>
            <param name="inFeatureSet">Any implementation of an IFeatureLayer.</param>
            <param name="container">An IContainer to contain this layer.</param>
            <param name="progressHandler">A valid implementation of the IProgressHandler interface.</param>
            <exception cref="T:DotSpatial.Symbology.PointFeatureTypeException">Thrown if the featureSet FeatureType is
             not point or multi-point.</exception>
        </member>
        <member name="M:DotSpatial.Symbology.PointLayer.OpenFile(System.String,DotSpatial.Data.IProgressHandler)">
            <summary>
            Attempts to create a new PointLayer using the specified file.  If the filetype is not
            does not generate a point layer, an exception will be thrown.
            </summary>
            <param name="fileName">A string fileName to create a point layer for.</param>
            <param name="progressHandler">Any valid implementation of IProgressHandler for receiving progress messages</param>
            <returns>A PointLayer created from the specified fileName.</returns>
        </member>
        <member name="M:DotSpatial.Symbology.PointLayer.OpenFile(System.String)">
            <summary>
            Attempts to create a new PointLayer using the specified file.  If the filetype is not
            does not generate a point layer, an exception will be thrown.
            </summary>
            <param name="fileName">A string fileName to create a point layer for.</param>
            <returns>A PointLayer created from the specified fileName.</returns>
        </member>
        <member name="P:DotSpatial.Symbology.PointLayer.SelectionSymbolizer">
            <summary>
            Gets or sets the pointSymbolizer characteristics to use for the selected features.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.PointLayer.Symbolizer">
            <summary>
            Gets or sets the symbolic characteristics for this layer.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.PointLayer.Symbology">
            <summary>
            Gets the currently applied scheme.  Because setting the scheme requires a processor intensive
            method, we use the ApplyScheme method for assigning a new scheme.  This allows access
            to editing the members of an existing scheme directly, however.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.PointFeatureTypeException">
            <summary>
            PointFeatureException
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.PointFeatureTypeException.#ctor">
            <summary>
            Creates a new instance of PointFeatureTypeException
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.PointFeatureTypeException.#ctor(System.String)">
            <summary>
            Creates a new instance of PointFeatureTypeException, but with a custom error message
            </summary>
            <param name="message">The string error message to include in the exception</param>
        </member>
        <member name="T:DotSpatial.Symbology.LineSymbolizer">
            <summary>
            LineSymbolizer
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LineSymbolizer.#ctor">
            <summary>
            Creates a new instance of LineSymbolizer
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LineSymbolizer.#ctor(System.Drawing.Color,System.Drawing.Color,System.Double,System.Drawing.Drawing2D.DashStyle,System.Drawing.Drawing2D.LineCap)">
            <summary>
            Creates a new set of cartographic lines that together form a line with a border.  Since a compound
            pen is used, it is possible to use this to create a transparent line with just two border parts.
            </summary>
            <param name="fillColor">The fill color for the line</param>
            <param name="borderColor">The border color of the line</param>
            <param name="width">The width of the entire line</param>
            <param name="dash">The dash pattern to use</param>
            <param name="caps">The style of the start and end caps</param>
        </member>
        <member name="M:DotSpatial.Symbology.LineSymbolizer.#ctor(System.Collections.Generic.IEnumerable{DotSpatial.Symbology.IStroke})">
            <summary>
            Creates a new instance of a LineSymbolizer using the various strokes to form a
            composit symbol.
            </summary>
            <param name="strokes"></param>
        </member>
        <member name="M:DotSpatial.Symbology.LineSymbolizer.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of LineSymbolizer for handling selections.
            </summary>
            <param name="selected">Boolean, true if this should be symbolized like a selected line.</param>
        </member>
        <member name="M:DotSpatial.Symbology.LineSymbolizer.#ctor(System.Drawing.Color,System.Double)">
            <summary>
            Creates a new LineSymbolizer with a single layer with the specified color and width.
            </summary>
            <param name="color">The color</param>
            <param name="width">The line width</param>
        </member>
        <member name="M:DotSpatial.Symbology.LineSymbolizer.#ctor(DotSpatial.Topology.IEnvelope,System.Boolean)">
            <summary>
            Creates a line symbolizer that has a width that is scaled in proportion to the specified envelope as 1/100th of the
            width of the envelope.
            </summary>
            <param name="env"></param>
            <param name="selected"></param>
        </member>
        <member name="M:DotSpatial.Symbology.LineSymbolizer.Draw(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws a line instead of a rectangle
            </summary>
            <param name="g"></param>
            <param name="target"></param>
        </member>
        <member name="M:DotSpatial.Symbology.LineSymbolizer.DrawPath(System.Drawing.Graphics,System.Drawing.Drawing2D.GraphicsPath,System.Double)">
            <summary>
            Sequentially draws all of the strokes using the specified graphics path.
            </summary>
            <param name="g">The graphics device to draw to</param>
            <param name="gp">The graphics path that describes the pathway to draw</param>
            <param name="scaleWidth">The double scale width that when multiplied by the width gives a measure in pixels</param>
        </member>
        <member name="M:DotSpatial.Symbology.LineSymbolizer.GetFillColor">
            <summary>
            Gets  the color of the top-most stroke.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LineSymbolizer.SetFillColor(System.Drawing.Color)">
            <summary>
            Sets the fill color fo the top-most stroke, and forces the top-most stroke
            to be a type of stroke that can accept a fill color if necessary.
            </summary>
            <param name="fillColor"></param>
        </member>
        <member name="M:DotSpatial.Symbology.LineSymbolizer.GetWidth">
            <summary>
            This gets the largest width of all the strokes.
            Setting this will change the width of all the strokes to the specified width, and is not recommended
            if you are using thin lines drawn over thicker lines.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LineSymbolizer.SetWidth(System.Double)">
            <summary>
            This keeps the ratio of the widths the same, but scales the width up for
            all the strokes.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LineSymbolizer.SetOutline(System.Drawing.Color,System.Double)">
            <summary>
            Sets the outline, assuming that the symbolizer either supports outlines, or
            else by using a second symbol layer.
            </summary>
            <param name="outlineColor">The color of the outline</param>
            <param name="width">The width of the outline in pixels</param>
        </member>
        <member name="P:DotSpatial.Symbology.LineSymbolizer.Strokes">
            <summary>
            Gets or sets the list of strokes, which define how the drawing pen should behave.
            </summary>
            <remarks>
            [Editor(typeof(StrokesEditor), typeof(UITypeEditor))]
            [TypeConverter(typeof(GeneralTypeConverter))]
            </remarks>
        </member>
        <member name="T:DotSpatial.Symbology.SymbologyRectangleExt">
            <summary>
            RectangleEM
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.SymbologyRectangleExt.IntersectsWith(System.Drawing.Rectangle,System.Drawing.RectangleF)">
            <summary>
            Calculates the intersection by casting the floating point values to integer values.
            </summary>
            <param name="self">This rectangle</param>
            <param name="other">The floating point rectangle to calculate against</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.SymbologyRectangleExt.ExpandToInclude(System.Drawing.Rectangle,System.Drawing.Point)">
            <summary>
            Tests the location of the point.  If the point is outside of the current rectangle, then the bounds
            of the rectangle are adjusted to include the new point.
            </summary>
            <param name="self"></param>
            <param name="newPoint"></param>
        </member>
        <member name="M:DotSpatial.Symbology.SymbologyRectangleExt.ExpandBy(System.Drawing.Rectangle,System.Int32)">
            <summary>
            Expands the rectangle by the specified integer distance in all directions.
            </summary>
            <param name="self">The rectangle to expand</param>
            <param name="distance">The distance </param>
        </member>
        <member name="T:DotSpatial.Symbology.SimpleLayerEventArgs">
            <summary>
            LayerEventArgs
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.SimpleLayerEventArgs.#ctor(DotSpatial.Symbology.ILayer)">
            <summary>
            Creates a new instance of LayerEventArgs
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.SimpleLayerEventArgs.Layer">
            <summary>
            Gets a layer
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.LayerCollection">
            <summary>
            This extends the ChangeEventList by providing methods that allow access by an object Key, and will pass
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.ILayerCollection">
            <summary>
            ILayerCollection2
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ILayerCollection.UnusedName(System.String)">
            <summary>
            Given a base name, this increments a number for appending
            if the name already exists in the collection.
            </summary>
            <param name="baseName">The string base name to start with</param>
            <returns>The base name modified by a number making it unique in the collection</returns>
        </member>
        <member name="P:DotSpatial.Symbology.ILayerCollection.ParentGroup">
            <summary>
            Gets or sets the ParentGroup for this layer collection, even if that parent group
            is not actually a map frame.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILayerCollection.MapFrame">
            <summary>
            Gets or sets the MapFrame for this layer collection.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILayerCollection.SelectedLayer">
            <summary>
            Gets or sets the currently active layer.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LayerCollection.#ctor(DotSpatial.Symbology.IFrame)">
            <summary>
            Creates a new blank instance of a MapLayer collection.  This is especially useful
            for tracking layers that can draw themselves.  This does not concern itself with
            view extents like a dataframe, but rather is a grouping of layers that is itself
            also an IMapLayer.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LayerCollection.#ctor(DotSpatial.Symbology.IFrame,DotSpatial.Symbology.IGroup)">
            <summary>
            Creates a new layer collection where the parent group is different from the
            map frame.
            </summary>
            <param name="frame"></param>
            <param name="parent"></param>
        </member>
        <member name="M:DotSpatial.Symbology.LayerCollection.#ctor">
            <summary>
            Creates a LayerCollection that is not confined in a MapFrame
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LayerCollection.OnInclude(DotSpatial.Symbology.ILayer)">
            <summary>
            Occurs when wiring events
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:DotSpatial.Symbology.LayerCollection.OnExclude(DotSpatial.Symbology.ILayer)">
            <summary>
            Occurs when unwiring events
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:DotSpatial.Symbology.LayerCollection.UnusedName(System.String)">
            <summary>
            Given a base name, this increments a number for appending
            if the name already exists in the collection.
            </summary>
            <param name="baseName">The string base name to start with</param>
            <returns>The base name modified by a number making it unique in the collection</returns>
        </member>
        <member name="M:DotSpatial.Symbology.LayerCollection.IndexOf(DotSpatial.Symbology.ILegendItem)">
            <summary>
            Gets the index of the specified item in this collection if it is a layer
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.LayerCollection.Insert(System.Int32,DotSpatial.Symbology.ILegendItem)">
            <summary>
            Inserts the specified item into this collection if it is a layer
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:DotSpatial.Symbology.LayerCollection.AddRange(System.Collections.Generic.IEnumerable{DotSpatial.Symbology.ILegendItem})">
            <summary>
            Adds a range of values
            </summary>
            <param name="collection"></param>
        </member>
        <member name="P:DotSpatial.Symbology.LayerCollection.Count">
            <summary>
            Gets the current count.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LayerCollection.MapFrame">
            <summary>
            Gets the map frame of this layer collection
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LayerCollection.ParentGroup">
            <summary>
            Gets or sets the ParentGroup for this layer collection, even if that parent group
            is not actually a map frame.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.LabelScheme">
            <summary>
            LabelScheme
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LabelScheme.#ctor">
            <summary>
            Creates a new instance of LabelScheme
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LabelScheme.AddCategory">
            <summary>
            Adds a category to the scheme, and also names the category with an integer that has not yet been used.
            </summary>
            <returns>A new category with a name that has not yet been used</returns>
        </member>
        <member name="M:DotSpatial.Symbology.LabelScheme.Clone">
            <summary>
            Returns the Copy, but as an object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.LabelScheme.Demote(DotSpatial.Symbology.ILabelCategory)">
            <summary>
            Attempts to reduce the integer index representing this categories rank in the
            list.  By doing this, it will be drawn sooner, and therefore subsequent
            layers will be drawn on top of this layer, and so it reduces the categories
            priority.  If this collection does not contain the category or it is already
            at index 0, this will return false.
            </summary>
            <param name="category">The ILabelCategory to demote</param>
            <returns>Boolean, true if the demotion was successful</returns>
        </member>
        <member name="M:DotSpatial.Symbology.LabelScheme.Promote(DotSpatial.Symbology.ILabelCategory)">
            <summary>
            This attempts to increase the numeric index, which will cause it to be drawn later,
            or higher up on the cue, which means it will be drawn AFTER the previous layers,
            and therefore is a higher priority.  If the category does not exist in the collection
            or the category is already at the highest value, this returns false.
            </summary>
            <param name="category">The category to promote if possible.</param>
            <returns>Boolean, true if the promotion was successful</returns>
        </member>
        <member name="M:DotSpatial.Symbology.LabelScheme.Copy">
            <summary>
            The individual categories are copied, meaning that the text symbolizers
            will be new, and disconnected from the original text symbolizers of this
            scheme.  MemberwiseClone is used so that any subclass members appended
            to this will be shallow copies unless this method is overridden.
            </summary>
            <returns>A Duplicate LabelScheme, but with new, duplicated categories and symbolizers</returns>
        </member>
        <member name="P:DotSpatial.Symbology.LabelScheme.Categories">
            <summary>
            Gets or sets the Categories
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.LabelLayer">
            <summary>
            LabelLayer
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.ILabelLayer">
            <summary>
            ILabelLayer
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ILabelLayer.ClearSelection">
            <summary>
            Clears the current selection, reverting the geometries back to their
            normal colors.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ILabelLayer.CreateLabels">
            <summary>
            Expression creates the labels based on the given string expression.  Field names in
            square brackets will be replaced by the values for those fields in the FeatureSet.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ILabelLayer.Invalidate">
            <summary>
            Invalidates any cached content for this layer.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ILabelLayer.Select(DotSpatial.Data.Extent)">
            <summary>
            Highlights the values from a specified region.  This will not unselect any members,
            so if you want to select a new region instead of an old one, first use ClearSelection.
            This is the default selection that only tests the anchor point, not the entire label.
            </summary>
            <param name="region">An IEnvelope showing a 3D selection box for intersection testing.</param>
            <returns>True if any members were added to the current selection.</returns>
        </member>
        <member name="P:DotSpatial.Symbology.ILabelLayer.FeatureSet">
            <summary>
            Gets or sets the featureSet that defines the text for the labels on this layer.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILabelLayer.FeatureLayer">
            <summary>
            Gets or sets an optional layer to link this layer to.  If this is specified, then drawing will
            be associated with this layer.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILabelLayer.Symbology">
            <summary>
            Gets or sets the symbology
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILabelLayer.SelectionSymbolizer">
            <summary>
            Gets or sets the selection symbolizer from the first TextSymbol group.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILabelLayer.Symbolizer">
            <summary>
            Gets or sets the regular symbolizer from the first TextSymbol group.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LabelLayer.#ctor">
            <summary>
            Creates a new instance of LabelLayer
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LabelLayer.#ctor(DotSpatial.Data.IFeatureSet)">
            <summary>
            Creates a new layer that uses the attributes from the given featureSet
            </summary>
            <param name="inFeatureSet"></param>
        </member>
        <member name="M:DotSpatial.Symbology.LabelLayer.#ctor(DotSpatial.Symbology.IFeatureLayer)">
            <summary>
            Creates a new label layer based on the features in the
            </summary>
            <param name="inFeatureLayer"></param>
        </member>
        <member name="M:DotSpatial.Symbology.LabelLayer.ClearSelection">
            <summary>
            Clears the current selection, reverting the geometries back to their
            normal colors.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LabelLayer.CreateLabels">
            <summary>
            This builds the _drawnStates based on the current label scheme.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LabelLayer.Select(DotSpatial.Data.Extent)">
            <summary>
            Highlights the values from a specified region.  This will not unselect any members,
            so if you want to select a new region instead of an old one, first use ClearSelection.
            This is the default selection that only tests the anchor point, not the entire label.
            </summary>
            <param name="region">An IEnvelope showing a 3D selection box for intersection testing.</param>
            <returns>True if any members were added to the current selection.</returns>
        </member>
        <member name="M:DotSpatial.Symbology.LabelLayer.CreateIndexedLabels">
            <summary>
            This builds the _drawnStates based on the current label scheme.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LabelLayer.UnSelect(DotSpatial.Data.Extent)">
            <summary>
            Removes the features in the given region
            </summary>
            <param name="region">the geographic region to remove the feature from the selection on this layer</param>
            <returns>Boolean true if any features were removed from the selection.</returns>
        </member>
        <member name="M:DotSpatial.Symbology.LabelLayer.OnSelectionCleared(DotSpatial.Symbology.FeatureChangeArgs)">
            <summary>
            Fires the selection cleared event
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LabelLayer.OnSelectionExtended(DotSpatial.Symbology.FeatureChangeEnvelopeArgs)">
            <summary>
            Fires the selection extended event
            </summary>
            <param name="args"></param>
        </member>
        <member name="E:DotSpatial.Symbology.LabelLayer.SelectionCleared">
            <summary>
            Occurs after the selection has been cleared
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.LabelLayer.SelectionExtended">
            <summary>
            Occurs after the selection is updated by the addition of new members
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LabelLayer.DrawnStates">
            <summary>
            Gets or sets the dictionary that quickly identifies the category for
            each label.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LabelLayer.FastDrawnStates">
            <summary>
            Gets or sets the indexed collection of drawn states
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LabelLayer.Labels">
            <summary>
            Gets or sets a valid IList of ILabels.  This can just be a List of labels, but allows for
            custom list development later.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LabelLayer.FeatureSet">
            <summary>
            Gets or sets the featureSet that defines the text for the labels on this layer.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LabelLayer.FeatureLayer">
            <summary>
            Gets or sets an optional layer to link this layer to.  If this is specified, then drawing will
            be associated with this layer.  This also updates the FeatureSet property.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LabelLayer.Symbology">
            <summary>
            Gets or sets the labeling scheme as a collection of categories.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LabelLayer.SelectionSymbolizer">
            <summary>
            Gets or sets the selection symbolizer from the first TextSymbol group.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LabelLayer.Symbolizer">
            <summary>
            Gets or sets the regular symbolizer from the first TextSymbol group.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.ChangedObjectEventArgs">
            <summary>
            ChangedObjectEvent
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ChangedObjectEventArgs.#ctor(System.Object)">
            <summary>
            Creates a new instance of ChangedObjectEvent
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ChangedObjectEventArgs.Item">
            <summary>
            Gets the item that has been changed
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.IPolygonLayer">
            <summary>
            A layer with drawing characteristics for LineStrings
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IPolygonLayer.SelectionSymbolizer">
            <summary>
            Gets or sets the symbolizer describing the selection on the default category.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IPolygonLayer.Symbolizer">
            <summary>
            Gets or sets the symbolizer describing the symbolizer on the default category.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IPolygonLayer.Symbology">
            <summary>
            Gets or sets the polygon scheme that symbolically breaks down the drawing into symbol categories.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.SimpleSymbol">
            <summary>
            SimpleSymbol
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.OutlinedSymbol">
            <summary>
            OutlinedSymbol
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.OutlinedSymbol.#ctor">
            <summary>
            Creates a new instance of OutlinedSymbol
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.OutlinedSymbol.CopyOutline(DotSpatial.Symbology.IOutlinedSymbol)">
            <summary>
            Copies only the use outline, outline width and outline color properties from the specified symbol.
            </summary>
            <param name="symbol">The symbol to copy from.</param>
        </member>
        <member name="M:DotSpatial.Symbology.OutlinedSymbol.OnDraw(System.Drawing.Graphics,System.Double)">
            <summary>
            Handles the drawing code, extending it to include some outline content.
            </summary>
            <param name="g"></param>
            <param name="scaleSize"></param>
        </member>
        <member name="M:DotSpatial.Symbology.OutlinedSymbol.OnDrawOutline(System.Drawing.Graphics,System.Double,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Actually handles the rendering of the outline itself.
            </summary>
            <param name="g"></param>
            <param name="scaleSize"></param>
            <param name="gp"></param>
        </member>
        <member name="M:DotSpatial.Symbology.OutlinedSymbol.OnRandomize(System.Random)">
            <summary>
            Occurs during the randomize process and allows future overriding of the process for sub-classes
            </summary>
            <param name="generator"></param>
        </member>
        <member name="P:DotSpatial.Symbology.OutlinedSymbol.XmlOutlineColor">
            <summary>
            Provided for XML serialization
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.OutlinedSymbol.OutlineColor">
            <summary>
            Gets or sets the outline color that surrounds this specific symbol.
            (this will have the same shape as the symbol, but be larger.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.OutlinedSymbol.OutlineOpacity">
            <summary>
            This redefines the Alpha channel of the color to a floating point opacity
            that ranges from 0 to 1.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.OutlinedSymbol.OutlineWidth">
            <summary>
            Gets or sets the size of the outline beyond the size of this symbol.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.OutlinedSymbol.UseOutline">
            <summary>
            Gets or sets the boolean outline
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.SimpleSymbol.#ctor">
            <summary>
            Creates a new instance of SimpleSymbol
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.SimpleSymbol.#ctor(System.Drawing.Color)">
            <summary>
            Creates a point symbol with the specified color.
            </summary>
            <param name="color">The color of the symbol.</param>
        </member>
        <member name="M:DotSpatial.Symbology.SimpleSymbol.#ctor(System.Drawing.Color,DotSpatial.Symbology.PointShape)">
            <summary>
            Creates a point symbol with the specified color and shape.
            </summary>
            <param name="color">The color of the symbol.</param>
            <param name="shape">The shape of the symbol.</param>
        </member>
        <member name="M:DotSpatial.Symbology.SimpleSymbol.#ctor(System.Drawing.Color,DotSpatial.Symbology.PointShape,System.Double)">
            <summary>
            Creates a SimpleSymbol with the specified color, shape and size.  The size is used for
            both the horizontal and vertical directions.
            </summary>
            <param name="color">The color of the symbol.</param>
            <param name="shape">The shape of the symbol.</param>
            <param name="size">The size of the symbol.</param>
        </member>
        <member name="M:DotSpatial.Symbology.SimpleSymbol.GetColor">
            <summary>
            Gets the font color of this symbol to represent the color of this symbol
            </summary>
            <returns>The color of this symbol as a font</returns>
        </member>
        <member name="M:DotSpatial.Symbology.SimpleSymbol.SetColor(System.Drawing.Color)">
            <summary>
            Sets the fill color of this symbol to the specified color.
            </summary>
            <param name="color">The Color.</param>
        </member>
        <member name="M:DotSpatial.Symbology.SimpleSymbol.OnDraw(System.Drawing.Graphics,System.Double)">
            <summary>
            Handles the specific drawing for this symbol.
            </summary>
            <param name="g">The System.Drawing.Graphics surface to draw with.</param>
            <param name="scaleSize">A double controling the scaling of the symbol.</param>
        </member>
        <member name="M:DotSpatial.Symbology.SimpleSymbol.OnRandomize(System.Random)">
            <summary>
            Occurs during the randomizing process
            </summary>
            <param name="generator"></param>
        </member>
        <member name="M:DotSpatial.Symbology.SimpleSymbol.AddStar(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.SizeF)">
            <summary>
            Draws a 5 pointed star with the points having twice the radius as the bends.
            </summary>
            <param name="gp">The GraphicsPath to add the start to</param>
            <param name="scaledSize">The SizeF size to fit the Start to</param>
        </member>
        <member name="M:DotSpatial.Symbology.SimpleSymbol.DrawStar(System.Drawing.Graphics,System.Drawing.Pen,System.Drawing.Brush,System.Drawing.SizeF)">
            <summary>
            Draws a 5 pointed star with the points having twice the radius as the bends.
            </summary>
            <param name="g">The Graphics surface to draw on</param>
            <param name="scaledBorderPen">The Pen to draw the border with</param>
            <param name="fillBrush">The Brush to use to fill the Star</param>
            <param name="scaledSize">The SizeF size to fit the Start to</param>
        </member>
        <member name="M:DotSpatial.Symbology.SimpleSymbol.AddEllipse(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.SizeF)">
            <summary>
            Draws an ellipse on the specified graphics surface.
            </summary>
            <param name="gp">The GraphicsPath to add this shape to</param>
            <param name="scaledSize">The size to fit the ellipse into (the ellipse will be centered at 0, 0)</param>
        </member>
        <member name="M:DotSpatial.Symbology.SimpleSymbol.DrawEllipse(System.Drawing.Graphics,System.Drawing.Pen,System.Drawing.Brush,System.Drawing.SizeF)">
            <summary>
            Draws an ellipse on the specified graphics surface.
            </summary>
            <param name="g">The graphics surface to draw on</param>
            <param name="scaledBorderPen">The Pen to use for the border, or null if no border should be drawn</param>
            <param name="fillBrush">The Brush to use for the fill, or null if no fill should be drawn</param>
            <param name="scaledSize">The size to fit the ellipse into (the ellipse will be centered at 0, 0)</param>
        </member>
        <member name="M:DotSpatial.Symbology.SimpleSymbol.AddRegularPoly(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.SizeF,System.Int32)">
            <summary>
            Draws a regular polygon with equal sides.  The first point will be located all the way to the right on the X axis.
            </summary>
            <param name="gp">Specifies the GraphicsPath surface to draw on</param>
            <param name="scaledSize">Specifies the SizeF to fit the polygon into</param>
            <param name="numSides">Specifies the integer number of sides that the polygon should have</param>
        </member>
        <member name="M:DotSpatial.Symbology.SimpleSymbol.DrawRegularPoly(System.Drawing.Graphics,System.Drawing.Pen,System.Drawing.Brush,System.Drawing.SizeF,System.Int32)">
            <summary>
            Draws a regular polygon with equal sides.  The first point will be located all the way to the right on the X axis.
            </summary>
            <param name="g">Specifies the Graphics surface to draw on</param>
            <param name="scaledBorderPen">Specifies the Pen to use for the border</param>
            <param name="fillBrush">Specifies the Brush to use for to fill the shape</param>
            <param name="scaledSize">Specifies the SizeF to fit the polygon into</param>
            <param name="numSides">Specifies the integer number of sides that the polygon should have</param>
        </member>
        <member name="P:DotSpatial.Symbology.SimpleSymbol.XmlColor">
            <summary>
            Only provided because XML Serialization doesn't work for colors
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.SimpleSymbol.Color">
            <summary>
            Gets or sets the Color
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.SimpleSymbol.Opacity">
            <summary>
            Gets or sets the opacity as a floating point value ranging from 0 to 1, where
            0 is fully transparent and 1 is fully opaque.  This actually adjusts the alpha of the color value.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.SimpleSymbol.PointShape">
            <summary>
            Gets or sets the PointTypes enumeration that describes how to draw the simple symbol.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.IntervalSnapMethod">
            <summary>
            IntervalSnapMethods
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.IntervalSnapMethod.DataValue">
            <summary>
            Snap the chosen values to the nearest data value.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.IntervalSnapMethod.None">
            <summary>
            No snapping at all is used
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.IntervalSnapMethod.Rounding">
            <summary>
            Snaps to the nearest integer value.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.IntervalSnapMethod.SignificantFigures">
            <summary>
            Disregards scale, and preserves a fixed number of figures.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.DrawingFilter">
            <summary>
            DrawingFilter
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.DrawingFilter.#ctor(DotSpatial.Data.IFeatureList,DotSpatial.Symbology.IFeatureScheme)">
            <summary>
            Creates a new instance of DrawingFilter without using any chunks.  The use chunks
            value will be false, and sub-categories will not be selected based on the chunk.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.DrawingFilter.#ctor(DotSpatial.Data.IFeatureList,DotSpatial.Symbology.IFeatureScheme,System.Int32)">
            <summary>
            Creates a new instance of DrawingFilter, sub-dividing the features into chunks.
            regardless of selection or category, chunks simply subdivide the filter
            into chunks of equal size.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.DrawingFilter.Clone">
            <summary>
            Creates a shallow copy
            </summary>
            <returns>Returns a shallow copy of this object.</returns>
        </member>
        <member name="M:DotSpatial.Symbology.DrawingFilter.ApplyScheme(DotSpatial.Symbology.IFeatureScheme)">
            <summary>
            This will use the filter expressions on the categories to change the categories for those members.
            This means that an item will be classified as the last filter that it qualifies for.
            </summary>
            <param name="scheme">The scheme of categories to apply to the drawing states</param>
        </member>
        <member name="M:DotSpatial.Symbology.DrawingFilter.GetDefaultState(System.Int32)">
            <summary>
            If UseChunks is true, this uses the index value combined with the chunk size
            to calculate the chunk, and also sets the category to the [0] category and the
            selection state to unselected.  This can be overridden in sub-classes to come up
            with a different default state.
            </summary>
            <param name="index">The integer index to get the default state of</param>
            <returns>An IDrawnState</returns>
        </member>
        <member name="M:DotSpatial.Symbology.DrawingFilter.GetEnumerator">
            <summary>
            Gets an enumator for cycling through exclusively the features that satisfy all the listed criteria,
            including chunk index, selected state, and scheme category.
            </summary>
            <returns>An Enumerator for cycling through the values</returns>
        </member>
        <member name="M:DotSpatial.Symbology.DrawingFilter.Invalidate">
            <summary>
            Invalidates this drawing filter, effectively eliminating all the original
            categories, selection statuses, and only keeps the basic chunk size.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.DrawingFilter.OnInitialize">
            <summary>
            Fires the Initialized Event
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.DrawingFilter.DoInitialize">
            <summary>
            This block of code actually cycles through the source features, and assigns a default
            drawing state to each feature.  I thought duplicate features would be less of a problem
            then people re-ordering an indexed list at some point, so for now we are using
            features to index the values.
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.DrawingFilter.Initialized">
            <summary>
            Occurs after this filter has built its internal list of items.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.DrawingFilter.Category">
            <summary>
            Gets or sets the scheme category to use
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.DrawingFilter.Chunk">
            <summary>
            Gets the integer chunk that the filter should use
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.DrawingFilter.ChunkSize">
            <summary>
            Gets or sets the integer size of each chunk.  Setting this to
            a new value will cycle through and update the chunk on all
            the features.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.DrawingFilter.Count">
            <summary>
            If the drawing state for any features has changed, or else if
            the state of any members has changed, this will cycle through
            the filter members and cache a new count.  If nothing has
            changed, then this will simply return the cached value.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.DrawingFilter.DefaultCategory">
            <summary>
            Gets the default category for the scheme.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.DrawingFilter.DrawnStates">
            <summary>
            Gets the dictionary of drawn states that this drawing filter uses.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.DrawingFilter.FeatureList">
            <summary>
            Gets the underlying list of features that this drawing filter
            is ultimately based upon.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.DrawingFilter.NumChunks">
            <summary>
            If chunks are being used, then this indicates the total count of chunks.
            Otherwise, this returns 1 as everything is effectively in one chunk.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.DrawingFilter.Selected">
            <summary>
            If UseSelection is true, this will get or set the boolean selection state
            that will be used to select values.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.DrawingFilter.Item(DotSpatial.Data.IFeature)">
            <summary>
            This uses the feature as the key and attempts to find the specified drawn state
            that describes selection, chunk and category.
            </summary>
            <param name="key">The feature</param>
            <remarks>The strength is that if someone inserts a new member or re-orders
            the features in the featureset, we don't forget which ones are selected.
            The disadvantage is that duplicate features in the same featureset
            will cause an exception.</remarks>
            <returns></returns>
        </member>
        <member name="P:DotSpatial.Symbology.DrawingFilter.Item(System.Int32)">
            <summary>
            This is less direct as it requires searching two indices rather than one, but
            allows access to the drawn state based on the feature ID.
            </summary>
            <param name="index">The integer index in the underlying featureSet.</param>
            <returns>The current IDrawnState for the current feature.</returns>
        </member>
        <member name="P:DotSpatial.Symbology.DrawingFilter.UseCategory">
            <summary>
            Gets or sets a boolean that indicates whether the filter should subdivide based on category.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.DrawingFilter.UseChunks">
            <summary>
            Gets or sets a boolean that indicates whether we should use the chunk
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.DrawingFilter.UseSelection">
            <summary>
            Gets or sets a boolean that indicates whether this filter should use the Selected
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.DrawingFilter.UseVisibility">
            <summary>
            Gets or sets the boolean indicating whether or not this feature should be drawn.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.DrawingFilter.Visible">
            <summary>
            Gets or sets a boolean that specifies whether to return visible, or hidden features if UseVisibility is true.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.ClassificationType">
            <summary>
            ClassificationTypes
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.ClassificationType.Custom">
            <summary>
            Each category is designed with a custom expression
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.ClassificationType.UniqueValues">
            <summary>
            Unique values are added
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.ClassificationType.Quantities">
            <summary>
            A Quantile scheme is applied, which forces the behavior of continuous categories.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.CustomPolygonSymbolizer">
            <summary>
            CustomPolygonSymbolizer
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.CustomPolygonSymbolizer.#ctor">
            <summary>
            Creates a new CustomSymbolizer for symbolizing Polygons
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.CustomPolygonSymbolizer.#ctor(System.String,System.String,System.String,DotSpatial.Symbology.PolygonSymbolizer)">
            <summary>
            Creates a new Custom Polygon symbolizer with the specified properties
            </summary>
            <param name="uniqueName">the unique name</param>
            <param name="name">the name of the custom symbolizer</param>
            <param name="category">the map category of the custom symbolizer</param>
            <param name="symbolizer">the associated Polygon symbolizer</param>
        </member>
        <member name="P:DotSpatial.Symbology.CustomPolygonSymbolizer.Symbolizer">
            <summary>
            Gets or sets the Polygon symbolizer
            </summary>
            <remarks>
            [Editor(typeof(PolygonSymbolizerEditor), typeof(UITypeEditor))]
            </remarks>
        </member>
        <member name="T:DotSpatial.Symbology.LabelPlacementMethod">
            <summary>
            Methods used in calculating the placement of a label
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.LabelPlacementMethod.Centroid">
            <summary>
            Use the centroid of the feature
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.LabelPlacementMethod.Center">
            <summary>
            Use the center of the extents of the feature
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.LabelPlacementMethod.InteriorPoint">
            <summary>
            Use the closest point to the centroid that is in the feature
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.PartLabelingMethod">
            <summary>
            Determins if all parts should be labeled or just the largest
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.PartLabelingMethod.LabelAllParts">
            <summary>
            Label all parts
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.PartLabelingMethod.LabelLargestPart">
            <summary>
            Only label the largest part
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.ILabelContainer">
            <summary>
            A layer or other object capable of containing
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ILabelContainer.DrawLabels">
            <summary>
            Draws every label in the layer without worrying about any collision testing
            or specific tests outside of this label container.  If LabelCollisionTesting
            is set to true, it should still do collision testing for the labels INSIDE
            this label container.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ILabelContainer.DrawLabels(System.Collections.Generic.List{System.Int32})">
            <summary>
            The list of integers corresponds to the integer values that were returned as
            keys to the GetLabelExtents dictionary.  The Layer will then draw each of the
            specific lables to draw.
            </summary>
            <param name="labelsToDraw"></param>
        </member>
        <member name="M:DotSpatial.Symbology.ILabelContainer.GetLabelExtents">
            <summary>
            Gets the list of non-rotated extents for labels visible in the current display.
            The integer keys represent the index of the labeled item.
            The envelope values represent the actual rectangles that the labels occupy for
            collision testing.  If LabelCollisionTesting is true, then collisions should
            be resolved for the entire layer first based on whatever internal priority
            methods exist.  Only the non-colliding visible labels will be returned.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ILabelContainer.GetRotatedLabelBounds">
            <summary>
            Gets the list of possibly rotated label boundaries visible in the current display.
            The integer keys represent the index of the labeled item.
            The envelope values represent the actual rectangles that the labels occupy for
            collision testing.  If LabelCollisionTesting is true, then collisions should
            be resolved for the entire layer first based on whatever internal priority
            methods exist.  Only the non-colliding visible labels will be returned.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILabelContainer.Labels">
            <summary>
            The integer indexed list of all the labels in this container.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILabelContainer.LabelCollisionTesting">
            <summary>
            If this is set to true, then the only labels being sent to GetLabelExtents
            should be the labels that actually need to be drawn.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILabelContainer.Priority">
            <summary>
            A priority rating for all the labels in this layer.  The higher this number,
            the more likely the labels from this layer are to win a collision contest
            between layers.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.ITextSymbolGroup">
            <summary>
            ITextSymbolGroup
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ITextSymbolGroup.Add(DotSpatial.Symbology.ILabel)">
            <summary>
            Add a new integer into this group.
            </summary>
            <param name="label">The label to be added to the group.</param>
            <returns>Boolean, false if the integer was already in this group.</returns>
        </member>
        <member name="M:DotSpatial.Symbology.ITextSymbolGroup.Clear">
            <summary>
            Removes all the selected indices and returns them to the regular indices.
            This returns a list of integer indices for the labels that were changed.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ITextSymbolGroup.Select(System.Int32)">
            <summary>
            Selects a single label
            </summary>
            <param name="label">The integer label to select</param>
        </member>
        <member name="M:DotSpatial.Symbology.ITextSymbolGroup.UnSelect(System.Int32)">
            <summary>
            Unselect a single label in this group.
            </summary>
            <param name="label">The integer label</param>
        </member>
        <member name="P:DotSpatial.Symbology.ITextSymbolGroup.Symbolizer">
            <summary>
            Gets or sets the text symbolizer for this group of labels
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ITextSymbolGroup.RegularLabels">
            <summary>
            Gets or sets the list of regular labels based on their index in the actual list of labels
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ITextSymbolGroup.SelectedLabels">
            <summary>
            Gets or sets the list of selected labels based on their index in the actual list of labels
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ITextSymbolGroup.SelectionSymbolizer">
            <summary>
            Gets or sets the set of symbolic characteristics that should be used for drawing selected labels.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.ColorCategoryEventArgs">
            <summary>
            An EventArgs specifically tailored to ColorCategory.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ColorCategoryEventArgs.#ctor(DotSpatial.Symbology.IColorCategory)">
            <summary>
            Initializes a new instance of the ColorCategoryEventArgs class.
            </summary>
            <param name="colorCategory">The IColorCategory that is involved in this event.</param>
        </member>
        <member name="P:DotSpatial.Symbology.ColorCategoryEventArgs.ColorCategory">
            <summary>
            Gets the ColorCategory associated with this event.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.Statistics">
            <summary>
            Statistics
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.Statistics.Clear">
            <summary>
            resets all statistics to 0.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.Statistics.Calculate(System.Collections.Generic.List{System.Double})">
            <summary>
            Calculates the statistics for the specified values
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:DotSpatial.Symbology.Statistics.Calculate(System.Collections.Generic.List{System.Double},System.Double,System.Double)">
            <summary>
            Calculates the statistics for the specified values
            </summary>
            <param name="values"></param>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="P:DotSpatial.Symbology.Statistics.Count">
            <summary>
            Gets the integer count of the values
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.Statistics.Maximum">
            <summary>
            Gets the highest value
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.Statistics.Mean">
            <summary>
            Gets the average value
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.Statistics.Median">
            <summary>
            Gets the middle value, or the average of the two middle values
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.Statistics.Minimum">
            <summary>
            Gets the minimum value
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.Statistics.StandardDeviation">
            <summary>
            Gets the standard deviation
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.Statistics.Sum">
            <summary>
            Gets the sum of the values.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.SymbolListEM">
            <summary>
            SymbolListEM
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.SymbolListEM.GetBoundingSize(System.Collections.Generic.IList{DotSpatial.Symbology.ISymbol})">
            <summary>
            Calculates the bounding size for this entire symbol.
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="T:DotSpatial.Symbology.LineDecoration">
            <summary>
            LineDecoration
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LineDecoration.#ctor">
            <summary>
            Creates a new instance of LineDecoration
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LineDecoration.Draw(System.Drawing.Graphics,System.Drawing.Drawing2D.GraphicsPath,System.Double)">
            <summary>
            Given the points on this line decoration, this will cycle through and handle
            the drawing as dictated by this decoration.
            </summary>
            <param name="g"></param>
            <param name="path"></param>
            <param name="scaleWidth">The double scale width for controling markers</param>
        </member>
        <member name="M:DotSpatial.Symbology.LineDecoration.GetOffset(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Given the current point, this uses the vector pointing to the next point in the line
            to determine the direction of "left" and applies the offset in that direction.
            </summary>
            <param name="point"></param>
            <param name="nextPoint"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.LineDecoration.OnRandomize(System.Random)">
            <summary>
            Handles the creation of random content for the LineDecoration.
            </summary>
            <param name="generator">The Random class that generates random numbers</param>
        </member>
        <member name="P:DotSpatial.Symbology.LineDecoration.Symbol">
            <summary>
            Gets or sets the decorative symbol
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LineDecoration.FlipFirst">
            <summary>
            Gets or sets a boolean that, if true, flips the first symbol in relation
            to the direction of the line.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LineDecoration.FlipAll">
            <summary>
            Gets or sets a boolean that, if true, reverses all of the symbols
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LineDecoration.RotateWithLine">
            <summary>
            Gets or sets a boolean that, if true, will cause the symbol to
            be rotated according to the direction of the line.  Arrows
            at the ends, for instance, will point along the direction of
            the line, regardless of the direction of the line.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LineDecoration.NumSymbols">
            <summary>
            Gets or sets the number of symbols that should be drawn on each
            line.  (not each segment).
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LineDecoration.Offset">
            <summary>
            Gets or sets the offset distance measured to the left of the line in pixels.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.LineLayer">
            <summary>
            A layer with drawing characteristics for LineStrings
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LineLayer.#ctor(DotSpatial.Data.IFeatureSet)">
            <summary>
            Constructor
            </summary>
            <param name="inFeatureSet"></param>
            <exception cref="T:DotSpatial.Symbology.LineFeatureTypeException">Thrown if a non-line featureSet is supplied</exception>
        </member>
        <member name="M:DotSpatial.Symbology.LineLayer.#ctor(DotSpatial.Data.IFeatureSet,DotSpatial.Data.IProgressHandler)">
            <summary>
            Constructor that also shows progress
            </summary>
            <param name="inFeatureSet">A featureset that contains lines</param>
            <param name="progressHandler">An IProgressHandler for receiving status messages</param>
            <exception cref="T:DotSpatial.Symbology.LineFeatureTypeException">Thrown if a non-line featureSet is supplied</exception>
        </member>
        <member name="M:DotSpatial.Symbology.LineLayer.#ctor(DotSpatial.Data.IFeatureSet,System.Collections.Generic.ICollection{DotSpatial.Symbology.ILayer},DotSpatial.Data.IProgressHandler)">
            <summary>
            Constructor that also shows progress.
            </summary>
            <param name="inFeatureSet">A featureset that contains lines.</param>
            <param name="container">An IContainer that the line layer should be created in.</param>
            <param name="progressHandler">An IProgressHandler for receiving status messages.</param>
            <exception cref="T:DotSpatial.Symbology.LineFeatureTypeException">Thrown if a non-line featureSet is supplied.</exception>
        </member>
        <member name="M:DotSpatial.Symbology.LineLayer.DrawSnapShot(System.Drawing.Graphics,DotSpatial.Data.IProj)">
            <summary>
            Draws some section of the extent to the specified graphics object.
            </summary>
            <param name="g">The graphics object to draw to.</param>
            <param name="p">The projection interface that specifies how to transform geographic coordinates to an image.</param>
        </member>
        <member name="M:DotSpatial.Symbology.LineLayer.DrawLineString(System.Drawing.Graphics,DotSpatial.Data.IProj,System.Collections.Generic.List{System.Drawing.Pen},DotSpatial.Topology.IBasicLineString)">
            <summary>
            Draws a LineString.
            </summary>
            <param name="g"></param>
            <param name="p"></param>
            <param name="pens"></param>
            <param name="bls"></param>
        </member>
        <member name="P:DotSpatial.Symbology.LineLayer.SelectionSymbolizer">
            <summary>
            Gets or sets the line symbolizer to use for the selection
            </summary>
            <remarks>
            [TypeConverter(typeof(GeneralTypeConverter))]
            [Editor(typeof(LineSymbolizerEditor), typeof(UITypeEditor))]
            </remarks>
        </member>
        <member name="P:DotSpatial.Symbology.LineLayer.Symbolizer">
            <summary>
            Gets or sets the FeatureSymbolizerOld determining the shared properties.  This is actually still the PointSymbolizerOld
            and should not be used directly on Polygons or Lines.
            </summary>
            <remarks>
            [TypeConverter(typeof(GeneralTypeConverter))]
            [Editor(typeof(LineSymbolizerEditor), typeof(UITypeEditor))]
            </remarks>
            <exception cref="T:System.InvalidOperationException">Unable to assign a non-point symbolizer to a PointLayer</exception>
        </member>
        <member name="P:DotSpatial.Symbology.LineLayer.Symbology">
            <summary>
            Gets or sets the line scheme subdividing the layer into categories.
            </summary>
            <remarks>
            [TypeConverter(typeof(GeneralTypeConverter))]
            [Editor(typeof(LineSchemePropertyGridEditor), typeof(UITypeEditor))]
            </remarks>
        </member>
        <member name="T:DotSpatial.Symbology.LineFeatureTypeException">
            <summary>
            LineFeatureTypeException
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LineFeatureTypeException.#ctor">
            <summary>
            Creates a new instance of LineFeatureTypeException
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LineFeatureTypeException.#ctor(System.String)">
            <summary>
            Creates a new instance of LineFeatureTypeException
            </summary>
            <param name="message">The custom error message for this exception</param>
        </member>
        <member name="T:DotSpatial.Symbology.ScaleMode">
            <summary>
            Specifies whether non-coordinate drawing properties like width or size
            use pixels or map coordinates.  If pixels are used, a "back transform"
            to approximate pixel sizes.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.ScaleMode.Simple">
            <summary>
            Uses the simplest symbology possible, but can draw quickly
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.ScaleMode.Geographic">
            <summary>
            Symbol sizing parameters are based in world coordinates and will get smaller when zooming out like a real object.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.ScaleMode.Symbolic">
            <summary>
            The symbols approximately preserve their size as you zoom
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.RasterEditorSettings">
            <summary>
            VectorEditorSettings
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.RasterEditorSettings.#ctor">
            <summary>
            Creates a new instance of VectorEditorSettings
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.RasterEditorSettings.Min">
            <summary>
            Gets or sets the minimum value that will contribute to statistics
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.RasterEditorSettings.Max">
            <summary>
            Gets or sets the maximum value that will contribute to statistics.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.LayerProviders">
            <summary>
            DataProviders
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LayerProviders.#ctor(System.Collections.Generic.List{DotSpatial.Symbology.ILayerProvider})">
            <summary>
            Creates a new instance of DataProviders
            </summary>
            <param name="providers">Specifies a list of IDataProviders</param>
        </member>
        <member name="P:DotSpatial.Symbology.LayerProviders.Providers">
            <summary>
            Gets the list of providers for this event.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.FeatureLayerEventSender">
            <summary>
            When a menu item is clicked, it usually shows a dialog, but the dialog might be
            System.Windows.Forms, which is not known in DotSpatial.Symbology.  Instead,
            the event is tracked to this class, which can be tracked.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.FeatureLayerEventSender._instance">
            <summary>
            As part of the singleton pattern the fact that this is static
            allows all the various event throwing options to work through this.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayerEventSender.#ctor">
            <summary>
            This is private as part of the Singleton pattern so that only using the
            "DefaultManager" appraoch
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayerEventSender.Raise_ShowProperties(System.Object,DotSpatial.Symbology.FeatureLayerEventArgs)">
            <summary>
            Raises the shared ShowPropertiesClicked event
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayerEventSender.Raise_ShowAttributes(System.Object,DotSpatial.Symbology.FeatureLayerEventArgs)">
            <summary>
            Raises the shared ShowAttributesClicked event handler,
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayerEventSender.Raise_LabelSetup(System.Object,DotSpatial.Symbology.LabelLayerEventArgs)">
            <summary>
            Raises the shared ShowAttributesClicked event handler,
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayerEventSender.Raise_LabelExtents(System.Object,DotSpatial.Symbology.DynamicVisibilityEventArgs)">
            <summary>
            Raises the shared LabelExtentsclicked
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayerEventSender.Raise_ExcelJoin(System.Object,DotSpatial.Data.FeatureSetEventArgs)">
            <summary>
            Raises the shared ExcelJoinClicked event
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.FeatureLayerEventSender.Raise_ExportData(System.Object,DotSpatial.Symbology.FeatureLayerEventArgs)">
            <summary>
            Raises the shared ExportDataclicked event
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.FeatureLayerEventSender.Instance">
            <summary>
            This instance is static member of the singleton.
            SymbologyEvents bob = SymbologyEvents.Instance;
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.FeatureLayerEventSender.ShowPropertiesClicked">
            <summary>
            Occurs when the "Properties" menu item is clicked in a feature layer
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.FeatureLayerEventSender.ShowAttributesClicked">
            <summary>
            Occurs when the "Show attributes" menu item is clicked in a feature layer
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.FeatureLayerEventSender.LabelSetupClicked">
            <summary>
            Occurs when "Label Setup " is clicked
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.FeatureLayerEventSender.LabelExtentsClicked">
            <summary>
            Occurs to control dynamic visibiliy on label layers.
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.FeatureLayerEventSender.ExcelJoinClicked">
            <summary>
            Occurs when joining columns form an excel file to a shapefile.
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.FeatureLayerEventSender.ExportDataClicked">
            <summary>
            Occurs when the export data menu item has been clicked
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.Selection">
            <summary>
            Selection
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.Selection.#ctor(DotSpatial.Data.IFeatureSet,DotSpatial.Symbology.IDrawingFilter)">
            <summary>
            Creates a new instance of Selection
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.PolygonLayer">
            <summary>
            A layer with drawing characteristics for LineStrings
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonLayer.#ctor(DotSpatial.Data.IFeatureSet)">
             <summary>
             Constructor
             </summary>
            <param name="inFeatureSet">A featureset that contains polygons</param>
            <exception cref="T:DotSpatial.Symbology.PolygonFeatureTypeException">Thrown if a non-polygon featureset is supplied.</exception>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonLayer.#ctor(DotSpatial.Data.IFeatureSet,DotSpatial.Data.IProgressHandler)">
            <summary>
            Constructor that also shows progress
            </summary>
            <param name="inFeatureSet">A featureset that contains polygons</param>
            <param name="progressHandler">An IProgressHandler to receive progress messages</param>
            <exception cref="T:DotSpatial.Symbology.PolygonFeatureTypeException">Thrown if a non-polygon featureset is supplied.</exception>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonLayer.#ctor(DotSpatial.Data.IFeatureSet,System.Collections.Generic.ICollection{DotSpatial.Symbology.ILayer},DotSpatial.Data.IProgressHandler)">
            <summary>
            Initializes a new instance of the PolygonLayer class.
            </summary>
            <param name="inFeatureSet">A featureset that contains polygons.</param>
            <param name="container">A Container to store the newly created layer in.</param>
            <param name="progressHandler">An IProgressHandler to receive progress messages.</param>
            <exception cref="T:DotSpatial.Symbology.PolygonFeatureTypeException">Thrown if a non-polygon featureset is supplied.</exception>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonLayer.DrawSnapShot(System.Drawing.Graphics,DotSpatial.Data.IProj)">
            <summary>
            Draws some section of the extent to the specified graphics object.
            </summary>
            <param name="g">The graphics object to draw to.</param>
            <param name="p">The projection interface that specifies how to transform geographic coordinates to an image.</param>
        </member>
        <member name="P:DotSpatial.Symbology.PolygonLayer.SelectionSymbolizer">
            <summary>
            Gets or sets the symbolic characteristics for the members of this symbol class that have been selected.
            </summary>
            <remarks>
            [TypeConverter(typeof(GeneralTypeConverter))]
            [Editor(typeof(PolygonSymbolizerEditor), typeof(UITypeEditor))]
            </remarks>
        </member>
        <member name="P:DotSpatial.Symbology.PolygonLayer.Symbolizer">
            <summary>
            Gets or sets the default Polygon Symbolizer to use with all the lines on this layer.
            Setting this will not clear the existing individually specified Symbolizers,
            only the default symbolizer.
            </summary>
            <remarks>
            [TypeConverter(typeof(GeneralTypeConverter))]
            [Editor(typeof(PolygonSymbolizerEditor), typeof(UITypeEditor))]
            </remarks>
        </member>
        <member name="P:DotSpatial.Symbology.PolygonLayer.Symbology">
            <summary>
            Gets or sets the polygon scheme that symbolically breaks down the drawing into symbol categories.
            </summary>
            <remarks>
            [TypeConverter(typeof(GeneralTypeConverter))]
            [Editor(typeof(PolygonSchemePropertyGridEditor), typeof(UITypeEditor))]
            </remarks>
        </member>
        <member name="T:DotSpatial.Symbology.PolygonCategory">
            <summary>
            PointSchemeCategory
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.IPolygonCategory">
            <summary>
            IPointSchemeCategory
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IPolygonCategory.Symbolizer">
            <summary>
            Gets or sets the symbolizer for this category
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.IPolygonCategory.SelectionSymbolizer">
            <summary>
            Gets or sets the symbolizer to use to draw selected features from this category.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonCategory.#ctor">
            <summary>
            Creates a new instance of PointSchemeCategory
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonCategory.#ctor(System.Drawing.Color,System.Drawing.Color,System.Double)">
            <summary>
            Specifies a category that is made up from a simple color.
            </summary>
            <param name="fillColor">The color to fill the polygons with</param>
            <param name="outlineColor">The border color for the polygons</param>
            <param name="outlineWidth">The width of the line drawn on the border</param>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonCategory.#ctor(System.Drawing.Image,System.Drawing.Drawing2D.WrapMode,System.Double)">
            <summary>
            Creates a new PolygonCategory with the specified image being tiled within the category.
            The s
            </summary>
            <param name="picture">The picture to draw</param>
            <param name="wrap">The way to wrap the picture</param>
            <param name="angle">The angle to rotate the image</param>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonCategory.#ctor(System.Drawing.Image,System.Drawing.Drawing2D.WrapMode,System.Double,System.Drawing.Color,System.Double)">
            <summary>
            Creates a new PolygonCategory with the specified image being tiled within the category.
            The simple outline characteristics are also defined.
            </summary>
            <param name="picture">The picture to draw</param>
            <param name="wrap">The way to wrap the picture</param>
            <param name="angle">The angle to rotate the image</param>
            <param name="outlineColor">The color to use</param>
            <param name="outlineWidth">The outline width</param>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonCategory.#ctor(System.Drawing.Color,System.Drawing.Color,System.Double,DotSpatial.Symbology.GradientType,System.Drawing.Color,System.Double)">
            <summary>
            Creates a new instance of a Gradient Pattern using the specified colors and angle
            </summary>
            <param name="startColor">The start color</param>
            <param name="endColor">The end color</param>
            <param name="angle">The direction of the gradient</param>
            <param name="style">The type of gradient to use</param>
            <param name="outlineColor">The color to use for the border symbolizer</param>
            <param name="outlineWidth">The width of the line to use for the border symbolizer</param>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonCategory.#ctor(DotSpatial.Symbology.IPolygonSymbolizer)">
            <summary>
            Creates a new category based on a symbolizer, and uses the same symbolizer, but with a fill and border color of light cyan
            for the selection symbolizer
            </summary>
            <param name="polygonSymbolizer">The symbolizer to use in order to create a category</param>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonCategory.GetColor">
            <summary>
            This gets a single color that attempts to represent the specified
            category.  For polygons, for example, this is the fill color (or central fill color)
            of the top pattern.  If an image is being used, the color will be gray.
            </summary>
            <returns>The System.Color that can be used as an approximation to represent this category.</returns>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonCategory.SetColor(System.Drawing.Color)">
            <summary>
            Sets the fill color of the top-most pattern to the specified color, if the pattern can specify a color.
            </summary>
            <param name="color">Sets the color of the top most pattern for the principal symbolizer.</param>
        </member>
        <member name="M:DotSpatial.Symbology.PolygonCategory.ToString">
            <summary>
            A string representation of this category.
            </summary>
            <returns>String</returns>
        </member>
        <member name="P:DotSpatial.Symbology.PolygonCategory.Symbolizer">
            <summary>
            Gets or sets the symbolizer for this category
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.PolygonCategory.SelectionSymbolizer">
            <summary>
            Gets or sets the symbolizer to use to draw selected features from this category.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.PictureSymbol">
            <summary>
            PictureSymbol
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.PictureSymbol.#ctor">
            <summary>
            Creates a new instance of PictureSymbol
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.PictureSymbol.#ctor(System.Drawing.Image)">
            <summary>
            Creates a new instance of a PictureSymbol from the specified image
            </summary>
            <param name="image">The image to use when creating the symbol</param>
        </member>
        <member name="M:DotSpatial.Symbology.PictureSymbol.#ctor(System.Drawing.Image,System.Double)">
            <summary>
            Creates a new instance of a PictureSymbol from the specified image.
            The larger dimension from the image will be adjusted to fit the size,
            while the smaller dimension will be kept proportional.
            </summary>
            <param name="image">The image to use for this symbol</param>
            <param name="size">The double size to use for the larger of the two dimensions of the image.</param>
        </member>
        <member name="M:DotSpatial.Symbology.PictureSymbol.#ctor(System.Drawing.Icon)">
            <summary>
            Creates a new instance of a PictureSymbol from the specified icon
            </summary>
            <param name="icon">The icon to use when creating this symbol</param>
        </member>
        <member name="M:DotSpatial.Symbology.PictureSymbol.#ctor(DotSpatial.Data.IImageData)">
            <summary>
            Creates a new PictureSymbol given an existing imageData object.
            </summary>
            <param name="imageData">The imageData object to use.</param>
        </member>
        <member name="M:DotSpatial.Symbology.PictureSymbol.SetColor(System.Drawing.Color)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Symbology.PictureSymbol.Dispose">
            <summary>
            Disposes the current images
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.PictureSymbol.OnCopy(DotSpatial.Symbology.Descriptor)">
             <summary>
             This helps the copy process by preparing the internal variables AFTER memberwiseclone has created this
            
             </summary>
             <param name="copy"></param>
        </member>
        <member name="M:DotSpatial.Symbology.PictureSymbol.OnDraw(System.Drawing.Graphics,System.Double)">
            <summary>
            OnDraw
            </summary>
            <param name="g">Graphics object</param>
            <param name="scaleSize">The double scale Size</param>
        </member>
        <member name="M:DotSpatial.Symbology.PictureSymbol.OnRandomize(System.Random)">
            <summary>
            We can randomize the opacity
            </summary>
            <param name="generator"></param>
        </member>
        <member name="M:DotSpatial.Symbology.PictureSymbol.OnDisposing">
            <summary>
            Overrideable functions for handling the basic disposal of image classes in this object.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.PictureSymbol.IsDisposed">
            <summary>
            This is set to true when the dispose method is called.
            This will be set to false again if the image is set after that.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.PictureSymbol.ImageBase64String">
            <summary>
            Gets or sets the image in 'base64' string format.
            This can be used if the image file name is not set.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.PictureSymbol.Image">
            <summary>
            Gets or sets the image to use when the PictureMode is set to Image
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.PictureSymbol.ImageFilename">
            <summary>
            Gets or sets the string image fileName to use
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.PictureSymbol.Opacity">
            <summary>
            Gets or sets the opacity for this image.  Setting this will automatically change the image in memory.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.PointCategoryCollection">
            <summary>
            This is simply an alias to make things a tad (though not much) more understandable
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.PointCategoryCollection.OnSelectFeatures(System.Object,DotSpatial.Symbology.ExpressionEventArgs)">
            <summary>
            Instructs the parent layer to select features matching the specified expression.
            </summary>
            <param name="sender">The object sender where features were selected.</param>
            <param name="e">The event args describing which expression was used.</param>
        </member>
        <member name="M:DotSpatial.Symbology.PointCategoryCollection.OnInclude(DotSpatial.Symbology.IPointCategory)">
            <summary>
            Ensures that newly added categories can navigate to higher legend items.
            </summary>
            <param name="item">The newly added legend item.</param>
        </member>
        <member name="M:DotSpatial.Symbology.PointCategoryCollection.OnExclude(DotSpatial.Symbology.IPointCategory)">
            <summary>
            Ensures that items are disconnected from parent items when removed from the collection.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:DotSpatial.Symbology.PointCategoryCollection.OnCopy(DotSpatial.Data.CopyList{DotSpatial.Symbology.IPointCategory})">
            <summary>
            Overrides the OnCopy method to remove the SelectFeatures handler on the copy
            </summary>
            <param name="copy"></param>
        </member>
        <member name="M:DotSpatial.Symbology.PointCategoryCollection.UpdateItemParentPointers">
            <summary>
            Cycles through all the categories and resets the parent item.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.PointCategoryCollection.Scheme">
            <summary>
            Gets or sets the parent scheme.
            </summary>
        </member>
        <member name="E:DotSpatial.Symbology.PointCategoryCollection.SelectFeatures">
            <summary>
            Occurs when a category indicates that its filter expression should be used
            to select its members.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.FilterType">
            <summary>
            Add, remove and clear methods don't work on all the categorical sub-filters, but rather only on the
            most immediate.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.FilterType.Category">
            <summary>
            Categories
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.FilterType.Chunk">
            <summary>
            Chunks
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.FilterType.Selection">
            <summary>
            Selected or unselected
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.FilterType.Visible">
            <summary>
            Visible or not
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.CustomPointSymbolizer">
            <summary>
            CustomPointSymbolizer
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.CustomPointSymbolizer.#ctor">
            <summary>
            Creates a new CustomSymbolizer for symbolizing Points
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.CustomPointSymbolizer.#ctor(System.String,System.String,System.String,DotSpatial.Symbology.PointSymbolizer)">
            <summary>
            Creates a new Custom Point symbolizer with the specified properties
            </summary>
            <param name="uniqueName">the unique name</param>
            <param name="name">the name of the custom symbolizer</param>
            <param name="category">the map category of the custom symbolizer</param>
            <param name="symbolizer">the associated Point symbolizer</param>
        </member>
        <member name="P:DotSpatial.Symbology.CustomPointSymbolizer.Symbolizer">
            <summary>
            Gets or sets the Point symbolizer
            </summary>
            <remarks>
            [Editor(typeof(PointSymbolizerEditor), typeof(UITypeEditor))]
            </remarks>
        </member>
        <member name="T:DotSpatial.Symbology.LabelSymbolizer">
            <summary>
            TextSymbolizer
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.ILabelSymbolizer">
            <summary>
            ITextSymbolizer
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ILabelSymbolizer.GetFont">
            <summary>
            Uses the properties defined on this symbolizer to return a font.
            </summary>
            <returns>A new font</returns>
        </member>
        <member name="P:DotSpatial.Symbology.ILabelSymbolizer.LabelPlacementMethod">
            <summary>
            Gets or sets the labeling method
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILabelSymbolizer.PartsLabelingMethod">
            <summary>
            Gets or sets the way features with multiple parts are labeled
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILabelSymbolizer.Alignment">
            <summary>
            Gets or sets the the multi-line text alignment in the box.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILabelSymbolizer.Angle">
            <summary>
            Gets or set the angle that the font should be drawn in
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILabelSymbolizer.UseAngle">
            <summary>
            Gets or set a boolean indicating whether or not <see cref="P:DotSpatial.Symbology.ILabelSymbolizer.Angle"/> should be used
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILabelSymbolizer.LabelAngleField">
            <summary>
            Gets or set the field with angle to draw label
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILabelSymbolizer.UseLabelAngleField">
            <summary>
            Gets or set a boolean indicating whether or not <see cref="P:DotSpatial.Symbology.ILabelSymbolizer.LabelAngleField"/> should be used
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILabelSymbolizer.BackColor">
            <summary>
            Gets or sets the background color
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILabelSymbolizer.BackColorEnabled">
            <summary>
            Gets or sets a boolean indicating whether or not a background color should be used
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILabelSymbolizer.BorderColor">
            <summary>
            Gets or sets the border color
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILabelSymbolizer.BorderVisible">
            <summary>
            Gets or sets a boolean indicating whether or not a border should be drawn around the label.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILabelSymbolizer.DropShadowEnabled">
            <summary>
            Gets or sets a boolean that will force a shadow to be drawn if this is true.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILabelSymbolizer.DropShadowColor">
            <summary>
            Gets or sets the color of the actual shadow.  Use the alpha channel to specify opacity.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILabelSymbolizer.DropShadowGeographicOffset">
            <summary>
            Gets or sets an X and Y geographic offset that is only used if ScaleMode is set to Geographic
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILabelSymbolizer.DropShadowPixelOffset">
            <summary>
            Gets or sets an X and Y pixel offset that is used if the ScaleMode is set to Symbolic or Simple.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILabelSymbolizer.FontFamily">
            <summary>
            Gets or sets the string font family name
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILabelSymbolizer.FontSize">
            <summary>
            gets or sets the font size
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILabelSymbolizer.FontStyle">
            <summary>
            Gets or sets the font style.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILabelSymbolizer.FontColor">
            <summary>
            Gets or set the color that the font should be drawn in.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILabelSymbolizer.HaloEnabled">
            <summary>
            Gets or sets a boolean that governs whether or not to draw a halo.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILabelSymbolizer.HaloColor">
            <summary>
            Gets or sets the color of the halo that surrounds the text.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILabelSymbolizer.OffsetX">
            <summary>
            Gets or sets the X offset in pixels from the center of each feature.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILabelSymbolizer.OffsetY">
            <summary>
            Gets or sets the Y offset in pixels from the center of each feature.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILabelSymbolizer.PreventCollisions">
            <summary>
            Gets or sets a boolean.  If true, as high priority labels are placed, they
            take up space and will not allow low priority labels that conflict for the
            space to be placed.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILabelSymbolizer.PriorityField">
            <summary>
            Gets or sets the string field name for the field that controls which labels
            get placed first.  If collision detection is on, a higher priority means
            will get placed first.  If it is off, higher priority will be labeled
            on top of lower priority.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILabelSymbolizer.PrioritizeLowValues">
            <summary>
            Gets or sets a boolean.  Normally high values from the field are given
            a higher priority.  If this is true, low values are given priority instead.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILabelSymbolizer.Orientation">
            <summary>
            Gets or sets the position of the label relative to the placement point
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.ILabelSymbolizer.ScaleMode">
            <summary>
            Gets or sets the scaling behavior for the text
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LabelSymbolizer.#ctor">
            <summary>
            Creates a new instance of TextSymbolizer
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.LabelSymbolizer.GetFont">
            <summary>
            Uses the properties defined on this symbolizer to return a font.
            </summary>
            <returns>A new font</returns>
        </member>
        <member name="P:DotSpatial.Symbology.LabelSymbolizer.BackColorOpacity">
            <summary>
            Gets or sets the background color
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LabelSymbolizer.BorderColorOpacity">
            <summary>
            Gets or sets the border color
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LabelSymbolizer.FontColorOpacity">
            <summary>
            Gets or set the color that the font should be drawn in.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LabelSymbolizer.Alignment">
            <summary>
            Gets or sets the multi-line text alignment in the box. I.e., Control the positioning of the text within the rectangular bounds.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LabelSymbolizer.Angle">
            <summary>
            Gets or set the angle that the font should be drawn in
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LabelSymbolizer.UseAngle">
            <summary>
            Gets or set a boolean indicating whether or not <see cref="P:DotSpatial.Symbology.LabelSymbolizer.Angle"/> should be used
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LabelSymbolizer.LabelAngleField">
            <summary>
            Gets or set the field with angle to draw label
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LabelSymbolizer.UseLabelAngleField">
            <summary>
            Gets or set a boolean indicating whether or not <see cref="P:DotSpatial.Symbology.LabelSymbolizer.LabelAngleField"/> should be used
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LabelSymbolizer.BackColor">
            <summary>
            Gets or sets the background color
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LabelSymbolizer.BackColorEnabled">
            <summary>
            Gets or sets a boolean indicating whether or not a background color should be used
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LabelSymbolizer.BorderColor">
            <summary>
            Gets or sets the border color
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LabelSymbolizer.BorderVisible">
            <summary>
            Gets or sets a boolean indicating whether or not a border should be drawn around the label.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LabelSymbolizer.DropShadowEnabled">
            <summary>
            Gets or sets a boolean that will force a shadow to be drawn if this is true.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LabelSymbolizer.DropShadowColor">
            <summary>
            Gets or sets the color of the actual shadow.  Use the alpha channel to specify opacity.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LabelSymbolizer.DropShadowGeographicOffset">
            <summary>
            Gets or sets an X and Y geographic offset that is only used if ScaleMode is set to Geographic
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LabelSymbolizer.DropShadowPixelOffset">
            <summary>
            Gets or sets an X and Y pixel offset that is used if the ScaleMode is set to Symbolic or Simple.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LabelSymbolizer.FontFamily">
            <summary>
            Gets or sets the string font family name
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LabelSymbolizer.FontSize">
            <summary>
            gets or sets the font size
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LabelSymbolizer.FontStyle">
            <summary>
            Gets or sets the font style.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LabelSymbolizer.Orientation">
            <summary>
            Gets or sets the orientation relative to the placement point. I.e., Controls the position of the label relative to the feature.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LabelSymbolizer.FontColor">
            <summary>
            Gets or set the color that the font should be drawn in.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LabelSymbolizer.HaloEnabled">
            <summary>
            Gets or sets a boolean that governs whether or not to draw a halo.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LabelSymbolizer.HaloColor">
            <summary>
            Gets or sets the color of the halo that surrounds the text.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LabelSymbolizer.LabelPlacementMethod">
            <summary>
            Gets or sets the labeling method
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LabelSymbolizer.PartsLabelingMethod">
            <summary>
            Gets or sets the way features with multiple parts are labeled
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LabelSymbolizer.OffsetX">
            <summary>
            Gets or sets the X offset in pixels from the center of each feature.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LabelSymbolizer.OffsetY">
            <summary>
            Gets or sets the Y offset in pixels from the center of each feature.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LabelSymbolizer.PreventCollisions">
            <summary>
            Gets or sets a boolean.  If true, as high priority labels are placed, they
            take up space and will not allow low priority labels that conflict for the
            space to be placed.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LabelSymbolizer.PriorityField">
            <summary>
            Gets or sets the string field name for the field that controls which labels
            get placed first.  If collision detection is on, a higher priority means
            will get placed first.  If it is off, higher priority will be labeled
            on top of lower priority.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LabelSymbolizer.PrioritizeLowValues">
            <summary>
            Gets or sets a boolean.  Normally high values from the field are given
            a higher priority.  If this is true, low values are given priority instead.
            </summary>
        </member>
        <member name="P:DotSpatial.Symbology.LabelSymbolizer.ScaleMode">
            <summary>
            Gets or sets the scaling behavior for the text
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.ImageSymbolizer">
            <summary>
            ImageSymbolizer
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.IImageSymbolizer">
            <summary>
            IImageSymbolizer
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.QuickSchemeType">
            <summary>
            QuickSchemeTypes
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.QuickSchemeType.Box">
            <summary>
            Box-plot: Tukey 1977
            Basically it is like subdividing the data into 4 quartiles,
            denoted like Q1, Q2, Q3, Q4.
            -------
            Low Outlier (less than the Quartile - 3/2 Interquartile range)
            Q1 (Q1 - 3/2 the Interquartile range to Q1
            Q2 (Quartile 1 to Median)
            Q3 (Median to Quartile 3)
            Q4 (Q3 to Q3 + 3/2 the Interquartile range
            High Outlier (Greater than Q3 plus the interquartile range
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.QuickSchemeType.DefinedInterval">
            <summary>
            The interval size is defined, rather than the number of subdivisions
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.QuickSchemeType.EqualInterval">
            <summary>
            Symbolize so that the total range of values for a specific field are subdivided into
            a number of breaks where all the breaks cover the same difference in values.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.QuickSchemeType.Exponential">
            <summary>
            Intervals are selected so that the number of observations in each successive interval
            increases or decreases exponentially
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.QuickSchemeType.NaturalBreaks">
            <summary>
            The Jenks natural breaks algorithm strives for variance minimization within
            a classification.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.QuickSchemeType.Percentile">
            <summary>
            Percentile subdivides into the following six categories:
            less than 1%,
            1% to just less than 10%,
            10% to just less than 50%
            50% to just less than 90%
            90% to just less than 99%
            greater than or equal to 99%
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.QuickSchemeType.Quantile">
            <summary>
            The number of members found in each cateogry is the same, but the range might be
            widely different for datasets that don't have equally distributed values.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.QuickSchemeType.StandardDeviation">
            <summary>
            The mean and standard deviation of the attribute values are calculated, and
            values are classified according to their deviation from the mean (z-transform)
            The transformed values are mapped, usually at intervales of 1.0 or .5 standard
            deviations.  This often results in no central class.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.QuickSchemeType.UniqueValues">
            <summary>
            Symbolize so that each separate entry will have a separate category for that entry.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.SymbolType">
            <summary>
            SymbolTypes
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.SymbolType.Character">
            <summary>
            A symbol based on a character, including special purpose symbolic character sets.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.SymbolType.Custom">
            <summary>
            An extended, custom symbol that is not part of the current design.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.SymbolType.Picture">
            <summary>
            A symbol based on an image or icon.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.SymbolType.Simple">
            <summary>
            A symbol described by a simple geometry, outline and color.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.PointScheme">
            <summary>
            PointScheme
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.PointScheme.#ctor">
            <summary>
            Creates a new instance of PointScheme with no categories added to the list yet.
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.PointScheme.#ctor(DotSpatial.Topology.IRectangle)">
            <summary>
            creates a new instance of the PointScheme, but assigns the specified symbolizer
            as the symbolizer to use on a single default category.
            </summary>
            <param name="extent">The geographic point size for the default will be 1/100th the specified extent</param>
        </member>
        <member name="M:DotSpatial.Symbology.PointScheme.DrawCategory(System.Int32,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws the regular symbolizer for the specified cateogry to the specified graphics
            surface in the specified bounding rectangle.
            </summary>
            <param name="index">The integer index of the feature to draw.</param>
            <param name="g">The Graphics object to draw to</param>
            <param name="bounds">The rectangular bounds to draw in</param>
        </member>
        <member name="M:DotSpatial.Symbology.PointScheme.AddCategory(DotSpatial.Symbology.ICategory)">
            <summary>
            Adds a new scheme, assuming that the new scheme is the correct type.
            </summary>
            <param name="category">The category to add</param>
        </member>
        <member name="M:DotSpatial.Symbology.PointScheme.DecreaseCategoryIndex(DotSpatial.Symbology.ICategory)">
            <summary>
            Reduces the index value of the specified category by 1 by
            exchaning it with the category before it.  If there is no
            category before it, then this does nothing.
            </summary>
            <param name="category">The category to decrease the index of</param>
        </member>
        <member name="M:DotSpatial.Symbology.PointScheme.IncreaseCategoryIndex(DotSpatial.Symbology.ICategory)">
            <summary>
            Re-orders the specified member by attempting to exchange it with the next higher
            index category.  If there is no higher index, this does nothing.
            </summary>
            <param name="category">The category to increase the index of</param>
        </member>
        <member name="M:DotSpatial.Symbology.PointScheme.RemoveCategory(DotSpatial.Symbology.ICategory)">
            <summary>
            Removes the specified category
            </summary>
            <param name="category">The category to insert</param>
        </member>
        <member name="M:DotSpatial.Symbology.PointScheme.InsertCategory(System.Int32,DotSpatial.Symbology.ICategory)">
            <summary>
            Inserts the category at the specified index
            </summary>
            <param name="index">The integer index where the category should be inserted</param>
            <param name="category">The category to insert</param>
        </member>
        <member name="M:DotSpatial.Symbology.PointScheme.SuspendEvents">
            <summary>
            Suspends the category events
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.PointScheme.ResumeEvents">
            <summary>
            Resumes the category events
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.PointScheme.ClearCategories">
            <summary>
            Clears the categories
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.PointScheme.CreateRandomCategory(System.String)">
            <summary>
            Uses the settings on this scheme to create a random category.
            </summary>
            <returns>A new IFeatureCategory</returns>
        </member>
        <member name="M:DotSpatial.Symbology.PointScheme.GetDefaultColors(System.Int32)">
            <summary>
            If possible, use the template to control the colors.  Otherwise, just use the default
            settings for creating "unbounded" colors.
            </summary>
            <param name="count">The integer count.</param>
            <returns>The List of colors</returns>
        </member>
        <member name="M:DotSpatial.Symbology.PointScheme.GenerateUniqueColors(DotSpatial.Data.IFeatureSet,System.String)">
            <summary>
            Calculates the unique colors as a scheme
            </summary>
            <param name="fs">The featureset with the data Table definition</param>
            <param name="uniqueField">The unique field</param>
        </member>
        <member name="M:DotSpatial.Symbology.PointScheme.GetCategories">
            <summary>
            Gets the point categories cast as FeatureCategories.  This is enumerable,
            but should be thought of as a copy of the original, not the original itself.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.PointScheme.CreateNewCategory(System.Drawing.Color,System.Double)">
            <summary>
            Creates the category using a random fill color
            </summary>
            <param name="fillColor">The base color to use for creating the category</param>
            <param name="size">The double size of the larger dimension of the point.</param>
            <returns>A new polygon category</returns>
        </member>
        <member name="M:DotSpatial.Symbology.PointScheme.OnExcludeCategories(DotSpatial.Symbology.PointCategoryCollection)">
            <summary>
            Handle the event un-wiring and scheme update for the old categories
            </summary>
            <param name="categories">The category collection to update.</param>
        </member>
        <member name="M:DotSpatial.Symbology.PointScheme.OnIncludeCategories(DotSpatial.Symbology.PointCategoryCollection)">
            <summary>
            Handle the event wiring and scheme update for the new categories.
            </summary>
            <param name="categories">The category collection to update</param>
        </member>
        <member name="P:DotSpatial.Symbology.PointScheme.Categories">
            <summary>
            Gets or sets the symbolic categories as a valid IPointSchemeCategoryCollection.
            </summary>
            <remarks>
            [TypeConverter(typeof(CategoryCollectionConverter))]
            [Editor(typeof(PointCategoryCollectionEditor), typeof(UITypeEditor))]
            </remarks>
        </member>
        <member name="P:DotSpatial.Symbology.PointScheme.NumCategories">
            <summary>
            Gets the number of categories in this scheme
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.SymbolizerType">
            <summary>
            The available feature symbolizer types
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.SymbolizerType.Point">
            <summary>
            The type is PointSymbolizer
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.SymbolizerType.Line">
            <summary>
            The type is LineSymbolizer
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.SymbolizerType.Polygon">
            <summary>
            The type is PolygonSymbolizer
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.SymbolizerType.Raster">
            <summary>
            The type is RasterSymbolizer
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.SymbolizerType.Unknown">
            <summary>
            The type of the symbolizer is unknown
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.GraphicsPathExt">
            <summary>
            GraphicsPathEM
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.GraphicsPathExt.AddRoundedRectangle(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Rectangle,System.Int32)">
            <summary>
            Adds a round rectangle to the graphics path where the integer radius specified determines how rounded the rectangle should become.
            This can be thought of rounded arcs connected by straight lines.
            </summary>
            <param name="self"></param>
            <param name="bounds"></param>
            <param name="radius"></param>
        </member>
        <member name="M:DotSpatial.Symbology.GraphicsPathExt.AddRoundedRectangleTopLeft(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Rectangle,System.Int32)">
            <summary>
            Adds the unclosed set of lines that are the top and left of the shape
            </summary>
            <param name="self"></param>
            <param name="bounds"></param>
            <param name="radius"></param>
        </member>
        <member name="M:DotSpatial.Symbology.GraphicsPathExt.AddRoundedRectangleBottomRight(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Rectangle,System.Int32)">
            <summary>
            Adds the unclosed set of lines that are the bottom and right of the shape
            </summary>
            <param name="self"></param>
            <param name="bounds"></param>
            <param name="radius"></param>
        </member>
        <member name="M:DotSpatial.Symbology.GraphicsPathExt.GetBounds(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Tests each of the points in the graphics path, and calculates a RectangleF that completely contains
            all of the points in the graphics path.
            </summary>
            <param name="self">The grpahics path to test.</param>
            <returns>A RectangleF</returns>
        </member>
        <member name="T:DotSpatial.Symbology.DynamicVisibilityMode">
            <summary>
            DynamicVisibilityModes
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.DynamicVisibilityMode.ZoomedIn">
            <summary>
            The layer will only be visible when zoomed in closer than the
            DynamicVisibilityWidth.
            </summary>
        </member>
        <member name="F:DotSpatial.Symbology.DynamicVisibilityMode.ZoomedOut">
            <summary>
            The layer will only be visible when zoomed out beyond the
            DynamicVisibilityWidth.
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.Size2DConverter">
            <summary>
            The ExpandableSetConverter works by assuming that a pair of
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.Size2DConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns true if the source type is string
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.Size2DConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts a string into a Size2D
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Symbology.Size2DConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the Size2D into a string
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
    </members>
</doc>
